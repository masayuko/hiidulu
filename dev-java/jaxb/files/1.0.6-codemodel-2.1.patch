Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/XJCTask.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/XJCTask.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/XJCTask.java
@@ -22,6 +22,7 @@ package com.sun.tools.xjc;
 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.io.Writer;
 import java.lang.reflect.Constructor;
 import java.net.MalformedURLException;
 import java.util.ArrayList;
@@ -467,22 +468,30 @@ public class XJCTask extends Task {
      * {@link CodeWriter} that produces progress messages
      * as Ant verbose messages.
      */
-    private class AngProgressCodeWriter implements CodeWriter {
+    private class AngProgressCodeWriter extends CodeWriter {
         public AngProgressCodeWriter( CodeWriter output ) {
             this.output = output;
         }
 
         private final CodeWriter output;
-    
-        public OutputStream open(JPackage pkg, String fileName) throws IOException {
+
+        private void logFileName(JPackage pkg, String fileName) {
             if(pkg.isUnnamed())
                 log( "generating " + fileName, Project.MSG_VERBOSE );
             else
                 log( "generating " +
                     pkg.name().replace('.',File.separatorChar)+
                     File.separatorChar+fileName, Project.MSG_VERBOSE );
-        
-            return output.open(pkg,fileName);
+        }
+    
+        public OutputStream openBinary(JPackage pkg, String fileName) throws IOException {
+            logFileName(pkg, fileName);
+            return output.openBinary(pkg,fileName);
+        }
+    
+        public Writer openSource(JPackage pkg, String fileName) throws IOException {
+            logFileName(pkg, fileName);
+            return output.openSource(pkg,fileName);
         }
     
         public void close() throws IOException {
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/ObjectFactoryGenerator.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/generator/ObjectFactoryGenerator.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/ObjectFactoryGenerator.java
@@ -26,6 +26,7 @@ import java.util.Iterator;
 
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBException;
+import javax.xml.bind.PropertyException;
 
 import com.sun.codemodel.JClass;
 import com.sun.codemodel.JClassAlreadyExistsException;
@@ -189,7 +190,7 @@ final class ObjectFactoryGenerator {
         JMethod m1 = objectFactory.constructor(JMod.PUBLIC);
         m1.body().invoke("super").arg($grammarInfo);
         m1.javadoc()
-            .setComment( "Create a new ObjectFactory that can be used to " +
+            .append( "Create a new ObjectFactory that can be used to " +
                          "create new instances of schema derived classes " +
                          "for package: " + targetPackage.name() );
         
@@ -212,12 +213,15 @@ final class ObjectFactoryGenerator {
                                          "newInstance" )
                                 .arg( JExpr.ref( "javaContentInterface" ) ) );
         m2.javadoc()
-            .setComment(
-                "Create an instance of the specified Java content interface." )  
-            .addParam( "javaContentInterface", "the Class object of the java" +
-                       "content interface to instantiate" )
-            .addReturn( "a new instance" )
-            .addThrows( "JAXBException",  "if an error occurs" );
+            .append(
+                "Create an instance of the specified Java content interface." ); 
+        m2.javadoc().addParam( "javaContentInterface" )
+            .append(" the Class object of the java" +
+                       "content interface to instantiate" );
+        m2.javadoc().addReturn()
+            .append( "a new instance" );
+	m2.javadoc().addThrows( JAXBException.class )
+            .append( "if an error occurs" );
         
         // unneccessarily shadow DefaultJAXBContextImpl methods so that when
         // developers look at the generated code, they will see the api signatures
@@ -244,13 +248,16 @@ final class ObjectFactoryGenerator {
             JVar $name = m3.param( String.class, "name" );
             m3.body()._return( JExpr._super().invoke("getProperty").arg( $name ) );
             m3.javadoc()
-                .setComment( "Get the specified property. This method can only be\n" +
+                .append( "Get the specified property. This method can only be\n" +
                              "used to get provider specific properties.\n" +
                              "Attempting to get an undefined property will result\n" +
-                             "in a PropertyException being thrown." )
-                .addParam( "name", "the name of the property to retrieve" )
-                .addReturn( "the value of the requested property" )
-                .addThrows(  "PropertyException", "when there is an error " +
+                             "in a PropertyException being thrown." );
+            m3.javadoc().addParam( "name" )
+                .append( "the name of the property to retrieve" );
+            m3.javadoc().addReturn()
+                .append( "the value of the requested property" );
+            m3.javadoc().addThrows( PropertyException.class )
+                .append( "when there is an error " +
                              "retrieving the given property or value" );
         }
         
@@ -264,13 +271,16 @@ final class ObjectFactoryGenerator {
             m4.body().invoke( JExpr._super(), "setProperty" )
                 .arg($name).arg($value);
             m4.javadoc()
-                .setComment( "Set the specified property. This method can only be\n" +
+                .append( "Set the specified property. This method can only be\n" +
                              "used to set provider specific properties.\n" +
                              "Attempting to set an undefined property will result\n" +
-                             "in a PropertyException being thrown." )
-                .addParam( "name", "the name of the property to retrieve" )
-                .addParam( "value", "the value of the property to be set" )
-                .addThrows(  "PropertyException", "when there is an error " +
+                             "in a PropertyException being thrown." );
+            m4.javadoc().addParam( "name" )
+                .append("the name of the property to retrieve" );
+            m4.javadoc().addParam( "value")
+                .append(" the value of the property to be set" );
+            m4.javadoc().addThrows( PropertyException.class )
+                .append( "when there is an error " +
                              "processing the given property or value" );
         }
 
@@ -302,7 +312,7 @@ final class ObjectFactoryGenerator {
 
         
         // add some class javadoc
-        objectFactory.javadoc().appendComment( 
+        objectFactory.javadoc().append( 
             "This object contains factory methods for each \n" +
             "Java content interface and Java element interface \n" +
             "generated in the " + targetPackage.name() + " package. \n" +
@@ -343,9 +353,10 @@ final class ObjectFactoryGenerator {
 
             // add some jdoc to avoid javadoc warnings in jdk1.4
             m.javadoc()
-                .appendComment( "Create an instance of " + 
-                                 getPartlyQualifiedName(cc.ref) )
-                .addThrows( "JAXBException", "if an error occurs" );
+                .append( "Create an instance of " + 
+                                 getPartlyQualifiedName(cc.ref) );
+            m.javadoc().addThrows( JAXBException.class )
+                .append("if an error occurs" );
         }        
         
 
@@ -374,9 +385,10 @@ final class ObjectFactoryGenerator {
             
             // add some jdoc to avoid javadoc warnings in jdk1.4
             m.javadoc()
-                .appendComment( "Create an instance of " + 
-                                 getPartlyQualifiedName(cc.ref) )
-                .addThrows( "JAXBException", "if an error occurs" );
+                .append( "Create an instance of " + 
+                                 getPartlyQualifiedName(cc.ref) );
+            m.javadoc().addThrows( JAXBException.class )
+                .append("if an error occurs" );
             
             // constructor
             // [RESULT]
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/field/ArrayFieldRenderer.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/generator/field/ArrayFieldRenderer.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/field/ArrayFieldRenderer.java
@@ -96,7 +96,7 @@ public class ArrayFieldRenderer extends 
         //     return (T[]) <var>.toArray(new T[<var>.size()]);
         // }
         JMethod $get = writer.declareMethod( exposedType.array(),"get"+fu.name);
-        writer.javadoc().appendComment(fu.getJavadoc());
+        writer.javadoc().append(fu.getJavadoc());
         body = $get.body();
         
         if($defValues!=null) {
@@ -144,7 +144,7 @@ public class ArrayFieldRenderer extends 
             body._return($r);
         }
         
-        writer.javadoc().addReturn("array of\n"+JavadocBuilder.listPossibleTypes(fu));
+        writer.javadoc().addReturn().append("array of\n"+JavadocBuilder.listPossibleTypes(fu));
                         
         // [RESULT]
         // ET getX(int idx) {
@@ -168,10 +168,10 @@ public class ArrayFieldRenderer extends 
                 ._throw(JExpr._new(codeModel.ref(IndexOutOfBoundsException.class)));
         }
                     
-        writer.javadoc().appendComment(fu.getJavadoc());
+        writer.javadoc().append(fu.getJavadoc());
         $get.body()._return(unbox(JExpr.cast( internalType, ref(true).invoke("get").arg($idx) )));
 
-        writer.javadoc().addReturn(
+        writer.javadoc().addReturn().append(
             "one of\n"+JavadocBuilder.listPossibleTypes(fu));
 
                         
@@ -205,7 +205,7 @@ public class ArrayFieldRenderer extends 
             codeModel.VOID,
             "set"+fu.name);
         
-        writer.javadoc().appendComment(fu.getJavadoc());
+        writer.javadoc().append(fu.getJavadoc());
         
         $value = writer.addParameter(exposedType.array(),"values");
         $set.body().invoke(ref(false),"clear");
@@ -216,7 +216,7 @@ public class ArrayFieldRenderer extends 
         _for.update( $i.incr() );
         _for.body().invoke(ref(true),"add").arg(box($value.component($i)));
 
-        writer.javadoc().addParam( $value,
+        writer.javadoc().addParam( $value ).append(
             "allowed objects are\n"+JavadocBuilder.listPossibleTypes(fu));
                         
         // [RESULT] ET setX(int,ET)
@@ -226,13 +226,13 @@ public class ArrayFieldRenderer extends 
         $idx = writer.addParameter( codeModel.INT, "idx" );
         $value = writer.addParameter( exposedType, "value" );
 
-        writer.javadoc().appendComment(fu.getJavadoc());
+        writer.javadoc().append(fu.getJavadoc());
                         
         body = $set.body();
         body._return( unbox(JExpr.cast(internalType,
             ref(true).invoke("set").arg($idx).arg(box($value)))));
 
-        writer.javadoc().addParam( $value,
+        writer.javadoc().addParam( $value ).append(
             "allowed object is\n"+JavadocBuilder.listPossibleTypes(fu));
     }
 
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/field/ConstFieldRenderer.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/generator/field/ConstFieldRenderer.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/field/ConstFieldRenderer.java
@@ -96,7 +96,7 @@ public final class ConstFieldRenderer im
         $ref = context.ref.field(JMod.PUBLIC|JMod.STATIC|JMod.FINAL,
             isCollection ? getType().array() : getType(),
             use.name, initializer );
-        $ref.javadoc().appendComment(use.getJavadoc());
+        $ref.javadoc().append(use.getJavadoc());
     }
     
     public void generate() {}
@@ -104,7 +104,7 @@ public final class ConstFieldRenderer im
     public JBlock getOnSetEventHandler() {
         // since this is a constant field, we will never fire this event.
         // just return a dummy block.
-        return JBlock.dummyInstance;
+        return new JBlock();
     }
     
     
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/field/OptionalUnboxedFieldRenderer.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/generator/field/OptionalUnboxedFieldRenderer.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/field/OptionalUnboxedFieldRenderer.java
@@ -104,7 +104,7 @@ public class OptionalUnboxedFieldRendere
             javadoc = Messages.format(
                 Messages.DEFAULT_GETTER_JAVADOC,
                 NameConverter.standard.toVariableName(fu.name));
-        writer.javadoc().appendComment(javadoc);
+        writer.javadoc().append(javadoc);
 
         DefaultValue[] defaultValues = fu.getDefaultValues();
         if(defaultValues==null) {
@@ -139,7 +139,7 @@ public class OptionalUnboxedFieldRendere
             javadoc = Messages.format(
                 Messages.DEFAULT_SETTER_JAVADOC,
                 NameConverter.standard.toVariableName(fu.name));
-        writer.javadoc().appendComment(javadoc);
+        writer.javadoc().append(javadoc);
     }
 
     public void toArray( JBlock block, JExpression $array ) {
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/field/SingleFieldRenderer.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/generator/field/SingleFieldRenderer.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/field/SingleFieldRenderer.java
@@ -95,7 +95,7 @@ public class SingleFieldRenderer extends
             javadoc = Messages.format(
                 Messages.DEFAULT_GETTER_JAVADOC,
                 NameConverter.standard.toVariableName(fu.name));
-        writer.javadoc().appendComment(javadoc);
+        writer.javadoc().append(javadoc);
         
         
         DefaultValue[] defaultValues = fu.getDefaultValues();
@@ -110,7 +110,7 @@ public class SingleFieldRenderer extends
             cond._else()._return(ref());
         }
 
-        writer.javadoc().addReturn(
+        writer.javadoc().addReturn().append(
             "possible object is\n"+JavadocBuilder.listPossibleTypes(fu));
          
         // [RESULT]
@@ -131,8 +131,8 @@ public class SingleFieldRenderer extends
                 Messages.DEFAULT_SETTER_JAVADOC,
                 NameConverter.standard.toVariableName(fu.name));
         
-        writer.javadoc().appendComment(javadoc);
-        writer.javadoc().addParam( $value,
+        writer.javadoc().append(javadoc);
+        writer.javadoc().addParam( $value ).append(
             "allowed object is\n"+JavadocBuilder.listPossibleTypes(fu));
     }
     
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/field/TypedListFieldRenderer.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/generator/field/TypedListFieldRenderer.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/field/TypedListFieldRenderer.java
@@ -74,13 +74,13 @@ public class TypedListFieldRenderer exte
         $idx = writer.addParameter(codeModel.INT,"idx");
         $value = writer.addParameter(fu.type,"value");
 
-        writer.javadoc().appendComment(fu.getJavadoc());
+        writer.javadoc().append(fu.getJavadoc());
                         
         body = $add.body();
         body.invoke(ref(false),"add")
             .arg($idx).arg($value);
 
-        writer.javadoc().addParam( $value,
+        writer.javadoc().addParam( $value ).append(
             "allowed object is\n"+JavadocBuilder.listPossibleTypes(fu));
 
                         
@@ -91,21 +91,21 @@ public class TypedListFieldRenderer exte
         JMethod $get = writer.declareMethod(fu.type,"get"+fu.name);
         $idx = writer.addParameter(codeModel.INT,"idx");
 
-        writer.javadoc().appendComment(fu.getJavadoc());
+        writer.javadoc().append(fu.getJavadoc());
         
         // if the field is null, then the size of the list is null,
         // so the operation will fail anyway. no need for the initialization check here.
         $get.body()._return(JExpr.cast(fu.type,
             ref(true).invoke("get").arg($idx)));
 
-        writer.javadoc().addReturn(JavadocBuilder.listPossibleTypes(fu));
+        writer.javadoc().addReturn().append(JavadocBuilder.listPossibleTypes(fu));
         
                         
         // [RESULT] Iterator iterateX()
         JMethod $iterate = writer.declareMethod(
             codeModel.ref(Iterator.class),
             "iterate"+fu.name);
-        writer.javadoc().appendComment(fu.getJavadoc());
+        writer.javadoc().append(fu.getJavadoc());
         $iterate.body()._return(
             JOp.cond( ref(true).eq(JExpr._null()),
                 codeModel.ref(EmptyIterator.class).staticRef("theInstance"),
@@ -124,13 +124,13 @@ public class TypedListFieldRenderer exte
         $idx = writer.addParameter( codeModel.INT, "idx" );
         $value = writer.addParameter( fu.type, "value" );
                         
-        writer.javadoc().appendComment(fu.getJavadoc());
+        writer.javadoc().append(fu.getJavadoc());
         
         body = $set.body();
         body._return( JExpr.cast(fu.type,
             ref(false).invoke("set").arg($idx).arg($value)));
 
-        writer.javadoc().addParam($value,
+        writer.javadoc().addParam($value).append(
             "allowed object is\n"+JavadocBuilder.listPossibleTypes(fu));
 
     }
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/field/UntypedListFieldRenderer.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/generator/field/UntypedListFieldRenderer.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/field/UntypedListFieldRenderer.java
@@ -102,7 +102,7 @@ public class UntypedListFieldRenderer ex
         //     return <ref>;
         // }
         JMethod $get = writer.declareMethod(List.class,"get"+fu.name);
-        writer.javadoc().appendComment(fu.getJavadoc());
+        writer.javadoc().append(fu.getJavadoc());
         body = $get.body();
         if($defValues!=null) {
             JBlock then = body._if(
@@ -118,7 +118,7 @@ public class UntypedListFieldRenderer ex
         body._return(ref(false));
         
         
-        writer.javadoc().appendComment(
+        writer.javadoc().append(
             "Gets the value of the "+fu.name+" property.\n\n"+
             "<p>\n" +
             "This accessor method returns a reference to the live list,\n" +            "not a snapshot. Therefore any modification you make to the\n" +
@@ -133,7 +133,7 @@ public class UntypedListFieldRenderer ex
             "\n\n"
         );
         
-        writer.javadoc().appendComment(
+        writer.javadoc().append(
             "<p>\n" +
             "Objects of the following type(s) are allowed in the list\n"+
             JavadocBuilder.listPossibleTypes(fu));
@@ -150,7 +150,7 @@ public class UntypedListFieldRenderer ex
         // recognize that we need to fill in default values again.
         if($defValues!=null) {
              JMethod $delete = writer.declareMethod(codeModel.VOID, "delete"+fu.name);
-             writer.javadoc().setDeprecated(
+             writer.javadoc().addDeprecated().append(
                 "this method is incorrectly generated by previous\n" +
                 "releases of the RI. This method remains here just to make \n" +
                 "the generated code backward compatible.\n" +
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/field/XsiNilFieldRenderer.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/generator/field/XsiNilFieldRenderer.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/field/XsiNilFieldRenderer.java
@@ -75,7 +75,7 @@ public class XsiNilFieldRenderer extends
 
     public void generateAccessors() {
         JMethod $get = writer.declareMethod( codeModel.BOOLEAN, "is"+fu.name );
-        writer.javadoc().appendComment(fu.getJavadoc());
+        writer.javadoc().append(fu.getJavadoc());
                 
         $get.body()._return(ref());
                 
@@ -91,10 +91,10 @@ public class XsiNilFieldRenderer extends
         final JBlock body = $set.body();
         body.assign(ref(),$value);
         
-        writer.javadoc().appendComment(
+        writer.javadoc().append(
             "Passing <code>true</code> will generate xsi:nil in the XML output"
         );
-        writer.javadoc().appendComment(fu.getJavadoc());
+        writer.javadoc().append(fu.getJavadoc());
         
         
         onSetEvent = new LazyBlockReference() {
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/grammar/xducer/EnumerationXducer.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/grammar/xducer/EnumerationXducer.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/grammar/xducer/EnumerationXducer.java
@@ -231,7 +231,7 @@ public class EnumerationXducer extends T
             
             // set javadoc
             if( mem!=null && mem.javadoc!=null )
-                items[i].javadoc().appendComment(mem.javadoc);
+                items[i].javadoc().append(mem.javadoc);
             
             // ASSUMPTION: datatype is context-independent
             valueObjs[i].init(
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/ConversionFinder.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/xmlschema/ConversionFinder.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/ConversionFinder.java
@@ -299,12 +299,12 @@ final class ConversionFinder {
             type.visit((XSVisitor)sw);
             
             JDocComment jdoc = clazz.javadoc();
-            jdoc.appendComment( javadoc!=null? javadoc+"\n\n" : "" );
-            jdoc.appendComment( 
+            jdoc.append( javadoc!=null? javadoc+"\n\n" : "" );
+            jdoc.append( 
                 Messages.format( Messages.JAVADOC_HEADING, type.getName() ) );
-            jdoc.appendComment( "\n<p>\n<pre>\n" );
-            jdoc.appendComment(out.getBuffer().toString());
-            jdoc.appendComment( "</pre>" );
+            jdoc.append( "\n<p>\n<pre>\n" );
+            jdoc.append(out.getBuffer().toString());
+            jdoc.append( "</pre>" );
             
         }
         
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/cs/ClassSelector.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/xmlschema/cs/ClassSelector.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/cs/ClassSelector.java
@@ -396,8 +396,8 @@ public class ClassSelector {
         String doc = bi.getDocumentation();
         
         if(doc!=null && bi.hasTitleInDocumentation()/**otherwise add it later*/) {
-            javadoc.appendComment(doc);
-            javadoc.appendComment("\n");
+            javadoc.append(doc);
+            javadoc.append("\n");
         } 
         
         StringWriter out = new StringWriter();
@@ -419,19 +419,19 @@ public class ClassSelector {
         
         String componentName = 
             (String)sc.apply( new com.sun.xml.xsom.util.ComponentNameFunction() );
-        javadoc.appendComment( 
+        javadoc.append( 
             Messages.format( Messages.JAVADOC_HEADING,
                 componentName, fileName, lineNumber ) );
         
         if(doc!=null && !bi.hasTitleInDocumentation()) {
-            javadoc.appendComment("\n");
-            javadoc.appendComment(doc);
-            javadoc.appendComment("\n");
+            javadoc.append("\n");
+            javadoc.append(doc);
+            javadoc.append("\n");
         } 
         
-        javadoc.appendComment( "\n<p>\n<pre>\n" );
-        javadoc.appendComment(out.getBuffer().toString());
-        javadoc.appendComment( "</pre>" );
+        javadoc.append( "\n<p>\n<pre>\n" );
+        javadoc.append(out.getBuffer().toString());
+        javadoc.append( "</pre>" );
     }
     
 
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/cs/DefaultClassBinder.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/xmlschema/cs/DefaultClassBinder.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/cs/DefaultClassBinder.java
@@ -278,7 +278,7 @@ class DefaultClassBinder extends Abstrac
         
         // set javadoc class comment.
         if( decl.getJavadoc()!=null )
-            r.javadoc().appendComment(decl.getJavadoc()+"\n\n");
+            r.javadoc().append(decl.getJavadoc()+"\n\n");
             // add extra blank lines so that the schema fragment
             // and user-specified javadoc would be separated
         
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/addon/sync/SynchronizedMethodAddOn.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/addon/sync/SynchronizedMethodAddOn.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/addon/sync/SynchronizedMethodAddOn.java
@@ -70,7 +70,7 @@ public class SynchronizedMethodAddOn imp
      * Adds "synchoronized" to all the methods.
      */
     private void augument(ClassContext cc) {
-        for( Iterator itr=cc.implClass.methods(); itr.hasNext(); ) {
+        for( Iterator itr=cc.implClass.methods().iterator(); itr.hasNext(); ) {
             JMethod m = (JMethod)itr.next();
             m.getMods().setSynchronized(true);
         }
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/SkeletonGenerator.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/generator/SkeletonGenerator.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/SkeletonGenerator.java
@@ -494,7 +494,7 @@ public class SkeletonGenerator implement
             generateDelegation( errorSource, impl, (JClass)itr.next(), fr );
         }
         
-        for (Iterator itr = intf.methods(); itr.hasNext();) {
+        for (Iterator itr = intf.methods().iterator(); itr.hasNext();) {
             JMethod m = (JMethod) itr.next();
             
             // make sure that there's no corriding method
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/grammar/xducer/DatabindableXducer.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/grammar/xducer/DatabindableXducer.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/grammar/xducer/DatabindableXducer.java
@@ -44,11 +44,7 @@ public class DatabindableXducer extends 
         
         String name = dt.getJavaObjectType().getName();
         int idx = name.lastIndexOf(".");
-        if(idx<0)
-            returnType = writer._package("").ref(name);
-        else
-            returnType = writer._package(name.substring(0,idx))
-                .ref(name.substring(idx+1));
+        returnType = writer.ref(name);
     }
     
     private final JClass returnType;
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/grammar/xducer/UserTransducer.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/grammar/xducer/UserTransducer.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/grammar/xducer/UserTransducer.java
@@ -138,12 +138,8 @@ public class UserTransducer extends Tran
             inv = value.invoke(printMethod);
         } else {        
             // RESULT: <className>.<method>(<value>)
-            try {
                 inv = codeModel.ref(printMethod.substring(0,idx)).staticInvoke(
                     printMethod.substring(idx+1)).arg(value);
-            } catch( ClassNotFoundException e ) {
-                throw new NoClassDefFoundError(e.getMessage());
-            }
         }
         
         if( enableNamespaceContext )
@@ -172,13 +168,9 @@ public class UserTransducer extends Tran
                 // we can safely assume that this cast works.
                 inv = ((JClass)type).staticInvoke(parseMethod);
             } else {
-                try {
                     // parseMethod specifies the class and its static method.
                     inv = codeModel.ref(parseMethod.substring(0,idx)).staticInvoke(
                         parseMethod.substring(idx+1));
-                } catch( ClassNotFoundException e ) {
-                    throw new NoClassDefFoundError(e.getMessage());
-                }
             }
         }
         
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/TypeUtil.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/TypeUtil.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/TypeUtil.java
@@ -197,18 +197,8 @@ public class TypeUtil {
             // first, try as a primitive type
             return JType.parse(codeModel,typeName); 
         } catch( IllegalArgumentException e ) {
-            try {
                 // then try it as a class
                 return codeModel.ref(typeName);
-            } catch( ClassNotFoundException ee ) {
-                
-                errorHandler.error( new SAXParseException(
-                    Messages.format(Messages.ERR_CLASS_NOT_FOUND,typeName)
-                    ,errorSource));
-                    
-                // recover by assuming some class.
-                return codeModel.ref(Object.class);
-            }
         }
     }
     
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/decorator/RoleBasedDecorator.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/decorator/RoleBasedDecorator.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/decorator/RoleBasedDecorator.java
@@ -126,13 +126,7 @@ public class RoleBasedDecorator extends 
 
             JClass type = null;
             if (typeAtt != null)
-                try {
                     type = codeModel.ref(typeAtt);
-                } catch (ClassNotFoundException e) {
-                    reportError(
-                        Messages.format(Messages.ERR_CLASS_NOT_FOUND, typeAtt),
-                        state.getLocation() );
-                }
 
             FieldItem fi =
                 new FieldItem(
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/dtd/bindinfo/BIUserConversion.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/dtd/bindinfo/BIUserConversion.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/dtd/bindinfo/BIUserConversion.java
@@ -139,7 +139,12 @@ public class BIUserConversion implements
         JType t;
         if(type==null) {
             // defaults to the <name> class in the current package.
-            t = owner.getTargetPackage().ref(name());
+	    try {
+		t = owner.getTargetPackage().ref(name());
+	    } catch( ClassNotFoundException e ) {
+		// TODO: better error handling
+		throw new NoClassDefFoundError(e.getMessage());
+	    }
         } else {
             int idx = type.lastIndexOf('.');
             if(idx<0) {
@@ -148,15 +153,15 @@ public class BIUserConversion implements
                     t = JType.parse(owner.codeModel,type);  // try to parse it as a primitive type
                 } catch( IllegalArgumentException e ) {
                     // otherwise treat it as a class name in the current package
-                    t = owner.getTargetPackage().ref(type);
+		    try {
+			t = owner.getTargetPackage().ref(type);
+		    } catch( ClassNotFoundException e2 ) {
+			// TODO: better error handling
+			throw new NoClassDefFoundError(e2.getMessage());
+		    }
                 }
             } else {
-                try {
                     t = owner.codeModel.ref(type);
-                } catch( ClassNotFoundException e ) {
-                    // TODO: better error handling
-                    throw new NoClassDefFoundError(e.getMessage());
-                }
             }
         }
         
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/bindinfo/parser/CollectionTypeState.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/xmlschema/bindinfo/parser/CollectionTypeState.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/bindinfo/parser/CollectionTypeState.java
@@ -46,11 +46,7 @@ class CollectionTypeState extends NGCCHa
         if( type.equals("indexed") )
       r = ArrayFieldRenderer.theFactory;
     else
-      try {
         r = new UntypedListFieldRenderer.Factory( $runtime.codeModel.ref(type) );
-      } catch( ClassNotFoundException e ) {
-        throw new NoClassDefFoundError(e.getMessage());
-      }
 }
 
     public void enterElement(String $__uri, String $__local, String $__qname, Attributes $attrs) throws SAXException {
Index: jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/marshaller/Inside.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/generator/marshaller/Inside.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/generator/marshaller/Inside.java
@@ -149,11 +149,11 @@ final class Inside extends AbstractSideI
                 return false;       // can't handle that.
             
             JClass vo = context.getRuntime(ValidatableObject.class);
-            JExpression test = JExpr.cast(vo, 
+            JExpression test = ((JExpression)JExpr.cast(vo, 
                 context.codeModel.ref(ProxyGroup.class).staticInvoke("blindWrap")
                     .arg(fmg.peek(false))
                     .arg(vo.dotclass())
-                    .arg(JExpr._null()))
+                    .arg(JExpr._null())))
                 .invoke("getPrimaryInterface");
             
             ClassItem ancls = (ClassItem)tableUse.anomaly;
