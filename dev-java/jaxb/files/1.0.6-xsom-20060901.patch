Index: jaxb-ri-1.0.6/src/com/sun/tools/xjc/grammar/xducer/WhitespaceTransducer.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/grammar/xducer/WhitespaceTransducer.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/grammar/xducer/WhitespaceTransducer.java
@@ -67,7 +67,7 @@ public class WhitespaceTransducer extend
         if(f==null)     // this happens for anySimpleType
             return _core;   // preserve
         else
-            return create(_core,_codeModel,WhitespaceNormalizer.parse(f.getValue()));
+            return create(_core,_codeModel,WhitespaceNormalizer.parse(f.getValue().toString()));
     }
 
     
Index: jaxb-ri-1.0.6/src/com/sun/tools/xjc/reader/xmlschema/AbstractXSFunctionImpl.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/xmlschema/AbstractXSFunctionImpl.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/AbstractXSFunctionImpl.java
@@ -22,8 +22,10 @@ package com.sun.tools.xjc.reader.xmlsche
 import com.sun.xml.bind.JAXBAssertionError;
 import com.sun.xml.xsom.XSAnnotation;
 import com.sun.xml.xsom.XSFacet;
+import com.sun.xml.xsom.XSIdentityConstraint;
 import com.sun.xml.xsom.XSNotation;
 import com.sun.xml.xsom.XSSchema;
+import com.sun.xml.xsom.XSXPath;
 import com.sun.xml.xsom.visitor.XSFunction;
 
 /**
@@ -54,6 +56,16 @@ public abstract class AbstractXSFunction
         return null;
     }
 
+    public Object xpath(XSXPath xpath) {
+        _assert(false);
+        return null;
+    }
+
+    public Object identityConstraint(XSIdentityConstraint decl) {
+        _assert(false);
+        return null;
+    }
+
 
     protected static void _assert( boolean b ) {
         if(!b)
Index: jaxb-ri-1.0.6/src/com/sun/tools/xjc/reader/xmlschema/bindinfo/BIProperty.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/xmlschema/bindinfo/BIProperty.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/bindinfo/BIProperty.java
@@ -40,12 +40,14 @@ import com.sun.xml.xsom.XSComplexType;
 import com.sun.xml.xsom.XSComponent;
 import com.sun.xml.xsom.XSContentType;
 import com.sun.xml.xsom.XSElementDecl;
+import com.sun.xml.xsom.XSIdentityConstraint;
 import com.sun.xml.xsom.XSModelGroup;
 import com.sun.xml.xsom.XSModelGroupDecl;
 import com.sun.xml.xsom.XSParticle;
 import com.sun.xml.xsom.XSSchema;
 import com.sun.xml.xsom.XSSimpleType;
 import com.sun.xml.xsom.XSWildcard;
+import com.sun.xml.xsom.XSXPath;
 import com.sun.xml.xsom.util.XSFinder;
 import com.sun.xml.xsom.visitor.XSFunction;
 
@@ -321,15 +323,15 @@ public final class BIProperty extends Ab
             return b?Boolean.TRUE:Boolean.FALSE;
         }
         
-        public Object attributeDecl(XSAttributeDecl decl) {
+        public Boolean attributeDecl(XSAttributeDecl decl) {
             return toBoolean(decl.getFixedValue()!=null);
         }
 
-        public Object attributeUse(XSAttributeUse use) {
+        public Boolean attributeUse(XSAttributeUse use) {
             return toBoolean(use.getFixedValue()!=null);
         }
         
-        public Object schema(XSSchema s) {
+        public Boolean schema(XSSchema s) {
             // we allow globalBindings to have isConstantProperty==true,
             // so this method returns true to allow this.
             return Boolean.TRUE;
@@ -433,6 +435,9 @@ public final class BIProperty extends Ab
         public Object attGroupDecl(XSAttGroupDecl decl) { throw new JAXBAssertionError(); }
         public Object simpleType(XSSimpleType simpleType) { throw new JAXBAssertionError(); }
         public Object empty(XSContentType empty) { throw new JAXBAssertionError(); }
+        public Object xpath(XSXPath xpath) { throw new JAXBAssertionError(); }
+
+        public Object identityConstraint(XSIdentityConstraint decl) { throw new JAXBAssertionError(); }
     };
     
     
Index: jaxb-ri-1.0.6/src/com/sun/tools/xjc/reader/xmlschema/FieldBuilder.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/xmlschema/FieldBuilder.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/FieldBuilder.java
@@ -64,7 +64,7 @@ import com.sun.xml.xsom.XSWildcard;
 import com.sun.xml.xsom.impl.ModelGroupImpl;
 import com.sun.xml.xsom.impl.ParticleImpl;
 import com.sun.xml.xsom.impl.Ref;
-import com.sun.xml.xsom.impl.SchemaImpl;
+import com.sun.xml.xsom.impl.parser.SchemaDocumentImpl;
 
 /**
  * Builds an expression that has {@link FieldItem} as its top-level
@@ -134,10 +134,10 @@ public class FieldBuilder extends Abstra
         
         if( hasFixedValue ) {
             // refine the BGM to incorporate the fixed value
-            String token = use.getFixedValue();;
+            String token = use.getFixedValue().toString();;
             
             Expression contents =
-                FixedExpBuilder.build( body.exp, token, builder.grammar, use.getContext() );
+                FixedExpBuilder.build( body.exp, token, builder.grammar, use.getFixedValue().context );
             if(contents==Expression.nullSet) {
                 Locator loc;
                 if(use.getDecl().getFixedValue()!=null)   loc = use.getDecl().getLocator();
@@ -168,10 +168,10 @@ public class FieldBuilder extends Abstra
         
         if(use.getDefaultValue()!=null ) {
             // this attribute use has a default value. Reflect it to BGM
-            String token = use.getDefaultValue();
+            String token = use.getDefaultValue().toString();
             
             Expression contents =
-                FixedExpBuilder.build( body.exp, token, builder.grammar, use.getContext() );
+                FixedExpBuilder.build( body.exp, token, builder.grammar, use.getDefaultValue().context );
             if(contents==Expression.nullSet) {
                 Locator loc;
                 if(use.getDecl().getDefaultValue()!=null)   loc = use.getDecl().getLocator();
@@ -336,8 +336,8 @@ public class FieldBuilder extends Abstra
             // make a shallow copy of this model group so that the class customization
             // attached to this model group won't be recognized by the particle builder.
             XSModelGroup mg2 = new ModelGroupImpl(
-                (SchemaImpl)mg.getOwnerSchema(), null, mg.getLocator(),
-                mg.getCompositor(), mg.getChildren() );
+                (SchemaDocumentImpl)mg.getSourceDocument(), null, mg.getLocator(),
+                null, mg.getCompositor(), (ParticleImpl[])mg.getChildren() );
             
             return particle( makeParticle(mg2), null );
         }
Index: jaxb-ri-1.0.6/src/com/sun/tools/xjc/reader/xmlschema/cs/AbstractBinderImpl.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/xmlschema/cs/AbstractBinderImpl.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/cs/AbstractBinderImpl.java
@@ -28,7 +28,9 @@ import com.sun.xml.bind.JAXBAssertionErr
 import com.sun.xml.xsom.XSAnnotation;
 import com.sun.xml.xsom.XSComponent;
 import com.sun.xml.xsom.XSDeclaration;
+import com.sun.xml.xsom.XSIdentityConstraint;
 import com.sun.xml.xsom.XSSchema;
+import com.sun.xml.xsom.XSXPath;
 import com.sun.tools.xjc.reader.xmlschema.bindinfo.BindInfo;
 import com.sun.tools.xjc.reader.xmlschema.bindinfo.BIDeclaration;
 
@@ -109,4 +111,15 @@ abstract class AbstractBinderImpl implem
         if(!b)
             throw new JAXBAssertionError();
     }
+
+    public Object xpath(XSXPath xpath) {
+        _assert(false);
+        return null;
+    }
+
+    public Object identityConstraint(XSIdentityConstraint decl) {
+        _assert(false);
+        return null;
+    }
+
 }
Index: jaxb-ri-1.0.6/src/com/sun/tools/xjc/reader/xmlschema/ConversionFinder.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/xmlschema/ConversionFinder.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/ConversionFinder.java
@@ -327,7 +327,7 @@ final class ConversionFinder {
                     continue;
                 
                 Expression vexp = builder.pool.createValue(baseDt,
-                    baseDt.createValue(facet.getValue(),facet.getContext()));
+                    baseDt.createValue(facet.getValue().toString(),facet.getValue().context));
                 
                 if( needsToGenerateMemberName ) {
                     // generate names for all member names.
@@ -378,13 +378,13 @@ final class ConversionFinder {
             if(!facet.getName().equals(XSFacet.FACET_ENUMERATION))
                 continue;
             
-            String value = facet.getValue();
+            String value = facet.getValue().toString();
             
             if( members.containsKey(value) )
                 continue;   // this name is overrided.
                 
             if( !JJavaName.isJavaIdentifier(
-                    builder.getNameConverter().toConstantName(facet.getValue()) )) {
+                    builder.getNameConverter().toConstantName(facet.getValue().toString()) )) {
                 // this enum value isn't overrided by the customization
                 // and it will not produce a correct Java identifier.
                 //
Index: jaxb-ri-1.0.6/src/com/sun/tools/xjc/reader/xmlschema/SimpleTypeBuilder.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/xmlschema/SimpleTypeBuilder.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/SimpleTypeBuilder.java
@@ -263,16 +263,16 @@ public class SimpleTypeBuilder {
             int max=-1; // unbounded
             XSFacet length = originalType.getFacet("length");
             if(length!=null) {
-                int v = PositiveIntegerType.load(length.getValue()).intValue();
+                int v = PositiveIntegerType.load(length.getValue().toString()).intValue();
                 min = max = v;
             } else {
                 XSFacet minLength = originalType.getFacet("minLength");
                 if(minLength!=null) {
-                    min = PositiveIntegerType.load(minLength.getValue()).intValue();
+                    min = PositiveIntegerType.load(minLength.getValue().toString()).intValue();
                 }
                 XSFacet maxLength = originalType.getFacet("maxLength");
                 if(maxLength!=null) {
-                    String v = maxLength.getValue().trim();
+                    String v = maxLength.getValue().toString().trim();
                     if(v.equals("unbounded"))   max=-1;
                     else
                         max = PositiveIntegerType.load(v).intValue();
Index: jaxb-ri-1.0.6/src/com/sun/tools/xjc/reader/xmlschema/UnusedCustomizationChecker.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/xmlschema/UnusedCustomizationChecker.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/UnusedCustomizationChecker.java
@@ -23,6 +23,7 @@ import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Set;
 
+import com.sun.xml.bind.JAXBAssertionError;
 import com.sun.tools.xjc.reader.xmlschema.bindinfo.BIDeclaration;
 import com.sun.xml.xsom.XSAnnotation;
 import com.sun.xml.xsom.XSAttContainer;
@@ -34,6 +35,7 @@ import com.sun.xml.xsom.XSComponent;
 import com.sun.xml.xsom.XSContentType;
 import com.sun.xml.xsom.XSElementDecl;
 import com.sun.xml.xsom.XSFacet;
+import com.sun.xml.xsom.XSIdentityConstraint;
 import com.sun.xml.xsom.XSListSimpleType;
 import com.sun.xml.xsom.XSModelGroup;
 import com.sun.xml.xsom.XSModelGroupDecl;
@@ -44,6 +46,7 @@ import com.sun.xml.xsom.XSSchema;
 import com.sun.xml.xsom.XSSimpleType;
 import com.sun.xml.xsom.XSUnionSimpleType;
 import com.sun.xml.xsom.XSWildcard;
+import com.sun.xml.xsom.XSXPath;
 import com.sun.xml.xsom.visitor.XSSimpleTypeVisitor;
 import com.sun.xml.xsom.visitor.XSVisitor;
 
@@ -212,6 +215,14 @@ class UnusedCustomizationChecker impleme
         }
     }
 
+    public void xpath(XSXPath xpath) {
+        throw new JAXBAssertionError();
+    }
+
+    public void identityConstraint(XSIdentityConstraint decl) {
+        throw new JAXBAssertionError();
+    }
+
 
     static final String ERR_UNACKNOWLEDGED_CUSTOMIZATION =
         "UnusedCustomizationChecker.UnacknolwedgedCustomization"; // arg:1
Index: jaxb-ri-1.0.6/src/com/sun/tools/xjc/reader/xmlschema/DatatypeBuilder.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/xmlschema/DatatypeBuilder.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/DatatypeBuilder.java
@@ -92,7 +92,7 @@ public class DatatypeBuilder implements 
             Iterator itr = type.iterateDeclaredFacets();
             while(itr.hasNext()) {
                 XSFacet facet = (XSFacet)itr.next();
-                ti.addFacet( facet.getName(), facet.getValue(), facet.isFixed(), facet.getContext() );
+                ti.addFacet( facet.getName(), facet.getValue().toString(), facet.isFixed(), facet.getValue().context );
             }
             dt = ti.derive(type.getTargetNamespace(),type.getName());
             
Index: jaxb-ri-1.0.6/src/com/sun/tools/xjc/reader/xmlschema/cs/AGMFragmentBuilder.java
===================================================================
--- jaxb-ri-1.0.6.orig/xjc/src/com/sun/tools/xjc/reader/xmlschema/cs/AGMFragmentBuilder.java
+++ jaxb-ri-1.0.6/xjc/src/com/sun/tools/xjc/reader/xmlschema/cs/AGMFragmentBuilder.java
@@ -39,6 +39,7 @@ import com.sun.tools.xjc.grammar.ext.Wil
 import com.sun.tools.xjc.reader.Const;
 import com.sun.tools.xjc.reader.xmlschema.AbstractXSFunctionImpl;
 import com.sun.tools.xjc.reader.xmlschema.BGMBuilder;
+import com.sun.xml.xsom.XmlString;
 import com.sun.xml.xsom.XSAttContainer;
 import com.sun.xml.xsom.XSAttGroupDecl;
 import com.sun.xml.xsom.XSAttributeDecl;
@@ -111,22 +112,22 @@ final class AGMFragmentBuilder extends A
 
 
     public Object attributeDecl(XSAttributeDecl decl) {
-        return attribute( decl, decl.getFixedValue(), decl.getContext() );
+        return attribute( decl, decl.getFixedValue() );
     }
     
-    private Expression attribute( XSAttributeDecl decl, String fixedValue, ValidationContext context ) {
+    private Expression attribute( XSAttributeDecl decl, XmlString fixedValue ) {
         SimpleNameClass name = new SimpleNameClass(decl.getTargetNamespace(),decl.getName());
         Datatype dt = builder.simpleTypeBuilder.datatypeBuilder.build(decl.getType());
         
         if(fixedValue!=null) {
-            Object value = dt.createValue( fixedValue, context );
+            Object value = dt.createValue( fixedValue.toString(), fixedValue.context );
             return pool.createAttribute(name, pool.createValue(dt,null,value));
         } else
             return pool.createAttribute( name, pool.createData(dt,null) );
     }
 
     public Object attributeUse(XSAttributeUse use) {
-        Expression e = attribute( use.getDecl(), use.getFixedValue(), use.getContext() );
+        Expression e = attribute( use.getDecl(), use.getFixedValue() );
         if(use.isRequired())    return e;
         else                    return pool.createOptional(e);
     }
