diff -uNr pdfbox.orig/src/org/pdfbox/pdmodel/PDPage.java pdfbox/src/org/pdfbox/pdmodel/PDPage.java
--- pdfbox.orig/src/org/pdfbox/pdmodel/PDPage.java	2008-08-03 00:31:36.000000000 +0900
+++ pdfbox/src/org/pdfbox/pdmodel/PDPage.java	2008-08-03 01:30:17.000000000 +0900
@@ -67,9 +67,13 @@
 import java.util.GregorianCalendar;
 import java.util.List;
 
+/*
 import javax.media.jai.Interpolation;
 import javax.media.jai.JAI;
 import javax.media.jai.PlanarImage;
+*/
+import java.awt.geom.AffineTransform;
+import java.awt.image.AffineTransformOp;
 
 /**
  * This represents a single page in a PDF document.
@@ -682,7 +686,7 @@
         graphics.scale( scaling, scaling );
         PageDrawer drawer = new PageDrawer();
         drawer.drawPage( graphics, this, pageDimension );
-            
+/*            
 	    try{
             int rotation = findRotation();
             if (rotation == 90 || rotation == 270) {
@@ -698,7 +702,16 @@
 		}catch(Throwable T){
 			logger().severe(T.getMessage() + "\n at\n" + FullStackTrace(T));
 		}
-
+*/
+	int rotation = findRotation();
+	if (rotation == 90 || rotation == 270) {
+	    AffineTransform tx = AffineTransform.getQuadrantRotateInstance((int)(rotation / 90));
+	    AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);
+	    BufferedImage fimg = new BufferedImage(retval.getHeight(),
+						retval.getWidth(), retval.getType());
+	    op.filter(retval, fimg);
+	    retval = fimg;
+	}
         return retval;
     }
     
@@ -804,4 +817,4 @@
     {
         return this.getCOSDictionary().hashCode();
     }
-}
\ No newline at end of file
+}
