diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java
index fd7d51b..5579d95 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java
@@ -41,6 +41,7 @@ import org.apache.pdfbox.pdmodel.PDResources;
 import org.apache.pdfbox.pdmodel.common.COSStreamArray;
 import org.apache.pdfbox.pdmodel.common.PDStream;
 import org.apache.pdfbox.pdmodel.font.PDFont;
+import org.apache.pdfbox.pdmodel.font.PDType0TTFont;
 import org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace;
 import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK;
 import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray;
@@ -50,6 +51,7 @@ import org.apache.pdfbox.pdmodel.graphics.color.PDPattern;
 import org.apache.pdfbox.pdmodel.graphics.color.PDSeparation;
 import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;
 import org.apache.pdfbox.pdmodel.graphics.PDXObject;
+import org.apache.pdfbox.util.StringUtil;
 
 /**
  * This class is a convenience for creating page content streams.  You MUST
@@ -558,6 +560,39 @@ public class PDPageContentStream
         appendRawCommands(SHOW_TEXT);
     }
 
+    public void drawStringByCID(PDType0TTFont font, String text) throws IOException
+    {
+        if (!inTextMode)
+        {
+            throw new IOException("Error: must call beginText() before drawString");
+        }
+
+        StringBuilder sb = new StringBuilder(text.length() * 4);
+        int cid; 
+        for (int i = 0, cp; i < text.length(); i += Character.charCount(cp)) {
+            cp = text.codePointAt(i);
+            cid = font.getCID(cp);
+            if (cid < 0x10000)
+            {
+                sb.append(StringUtil.toHex4(cid));
+            }
+            else
+            {
+                cid -= 0x10000;
+                int high = cid / 0x400 + 0xd800;
+                int low = cid % 0x400 + 0xdc00;
+                sb.append(StringUtil.toHex4(high));
+                sb.append(StringUtil.toHex4(low));
+            }
+        }
+
+        appendRawCommands("<"+sb.toString()+">");
+        appendRawCommands(SPACE);
+        appendRawCommands(SHOW_TEXT);
+
+        font.setUsedCodes(text);
+    }
+
     /**
      * Set the stroking color space.  This will add the colorspace to the PDResources
      * if necessary.
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java
index 75df65e..0c5754b 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java
@@ -20,12 +20,14 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.StringTokenizer;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.pdfbox.cos.COSArray;
 import org.apache.pdfbox.cos.COSBase;
 import org.apache.pdfbox.cos.COSDictionary;
+import org.apache.pdfbox.cos.COSInteger;
 import org.apache.pdfbox.cos.COSName;
 import org.apache.pdfbox.cos.COSNumber;
 import org.apache.pdfbox.io.IOUtils;
@@ -46,6 +48,7 @@ public abstract class PDCIDFont extends PDSimpleFont
     private static final Log LOG = LogFactory.getLog(PDCIDFont.class);
 
     private Map<Integer, Float> widthCache = null;
+
     private long defaultWidth = 0;
 
     /**
@@ -374,4 +377,152 @@ public abstract class PDCIDFont extends PDSimpleFont
         }
         return result;
     }
+
+    /**
+     * Set the CIDSystemInfo.
+     *
+     * @param systemInfo - the CIDSystemInfo object
+     */
+    public void setCIDSystemInfo(PDCIDSystemInfo cidsysteminfo)
+    {
+        font.setItem(COSName.CIDSYSTEMINFO, cidsysteminfo.getCIDSystemInfo());
+    }
+
+    public void setFontWidths(COSArray wArray)
+    {
+        font.setItem(COSName.W, wArray);
+        extractWidths();
+    }
+
+    public void setFontWidths(String wString) throws IOException
+    {
+        COSArray wArray = getFontWidthsArray(wString);
+        setFontWidths(wArray);
+    }
+
+    public void resetFontWidths(COSArray wArray)
+    {
+        if (font.getItem(COSName.W) != null)
+        {
+            font.removeItem(COSName.W);
+            widthCache = null;
+        }
+        font.setItem(COSName.W, wArray);
+        extractWidths();
+    }
+
+    public COSArray getFontWidthsArray(String wString) throws IOException
+    {
+        COSArray outer = new COSArray();
+        COSArray inner = null;
+
+        StringTokenizer st = new StringTokenizer(wString);
+        if (st.countTokens() % 2 != 0)
+        {
+            throw new IOException("wString is invalid");
+        }
+        else if (st.countTokens() == 2)
+        {
+            outer.add(COSInteger.get(Long.parseLong(st.nextToken())));
+            inner = new COSArray();
+            inner.add(COSInteger.get(Long.parseLong(st.nextToken())));
+            outer.add(inner);
+            return outer;
+        }
+
+        final int FIRST = 0;
+        final int BRACKET = 1;
+        final int SERIAL = 2;
+
+        long lastCid   = Long.parseLong(st.nextToken());
+        long lastValue = Long.parseLong(st.nextToken());
+        outer.add(COSInteger.get(lastCid));
+        int state = FIRST;
+
+        while (st.hasMoreTokens())
+        {
+            long cid   = Long.parseLong(st.nextToken());
+            long value = Long.parseLong(st.nextToken());
+
+            switch (state)
+            {
+                case FIRST:
+                {
+                    if (cid == lastCid + 1 && value == lastValue) 
+                    {
+                        state = SERIAL;
+                    }
+                    else if (cid == lastCid + 1) 
+                    {
+                        state = BRACKET;
+                        inner = new COSArray();
+                        inner.add(COSInteger.get(lastValue));
+                    }
+                    else 
+                    {
+                        inner = new COSArray();
+                        inner.add(COSInteger.get(lastValue));
+                        outer.add(inner);
+                        outer.add(COSInteger.get(cid));
+                    }
+                    break;
+                }
+                case BRACKET:
+                {
+                    if (cid == lastCid + 1 && value == lastValue)
+                    {
+                        state = SERIAL;
+                        outer.add(inner);
+                        outer.add(COSInteger.get(lastCid));
+                    }
+                    else if (cid == lastCid + 1)
+                    {
+                        inner.add(COSInteger.get(lastValue));
+                    }
+                    else 
+                    {
+                        state = FIRST;
+                        inner.add(COSInteger.get(lastValue));
+                        outer.add(inner);
+                        outer.add(COSInteger.get(cid));
+                    }
+                    break;
+                }
+                case SERIAL:
+                {
+                    if (cid != lastCid + 1 || value != lastValue)
+                    {
+                        outer.add(COSInteger.get(lastCid));
+                        outer.add(COSInteger.get(lastValue));
+                        outer.add(COSInteger.get(cid));
+                        state = FIRST;
+                    }
+                    break;
+                }
+            }
+            lastValue = value;
+            lastCid = cid;
+        }
+        switch (state) {
+            case FIRST: {
+                inner = new COSArray();
+                inner.add(COSInteger.get(lastValue));
+                outer.add(inner);
+                break;
+            }
+            case BRACKET: {
+                inner.add(COSInteger.get(lastValue));
+                outer.add(inner);
+                break;
+            }
+            case SERIAL: {
+                outer.add(COSInteger.get(lastCid));
+                outer.add(COSInteger.get(lastValue));
+                break;
+            }
+        }
+
+        return outer;
+    }
+
 }
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2Font.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2Font.java
index e65826e..5ec38d9 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2Font.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2Font.java
@@ -204,4 +204,36 @@ public class PDCIDFontType2Font extends PDCIDFont
         return trueTypeFont;
     }
 
+    public void setCID2GID(COSBase map)
+    {
+        font.setItem(COSName.CID_TO_GID_MAP, map);
+
+        if (map != null && map instanceof COSStream)
+        {
+            hasCIDToGIDMap = Boolean.TRUE;
+        }
+        else
+        {
+            hasCIDToGIDMap = Boolean.FALSE;
+        }
+
+        if (map != null && map instanceof COSName)
+        {
+            hasIdentityCIDToGIDMap = Boolean.TRUE;
+        }
+        else
+        {
+            hasIdentityCIDToGIDMap = Boolean.FALSE;
+        }
+    }
+
+    public void resetCID2GID(COSBase map)
+    {
+        if (font.getItem(COSName.CID_TO_GID_MAP) != null)
+        {
+            font.removeItem(COSName.CID_TO_GID_MAP);
+        }
+        setCID2GID(map);
+    }
+
 }
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDSystemInfo.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDSystemInfo.java
new file mode 100644
index 0000000..d7dd441
--- /dev/null
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDSystemInfo.java
@@ -0,0 +1,35 @@
+package org.apache.pdfbox.pdmodel.font;
+
+import java.io.IOException;
+import org.apache.pdfbox.cos.COSDictionary;
+import org.apache.pdfbox.cos.COSName;
+
+public class PDCIDSystemInfo
+{
+    private COSDictionary cidsysteminfo;
+
+    public static final PDCIDSystemInfo ADOBE_IDENTITY_0 = 
+        new PDCIDSystemInfo("Adobe", "Identity", 0);
+
+    public PDCIDSystemInfo(String info)
+    {
+        String[] parts = info.split("-");
+        cidsysteminfo = new COSDictionary();
+        cidsysteminfo.setString(COSName.REGISTRY, parts[0]);
+        cidsysteminfo.setString(COSName.ORDERING, parts[1]);
+        cidsysteminfo.setInt(COSName.SUPPLEMENT, Integer.valueOf(parts[2]));
+    }
+
+    public PDCIDSystemInfo(String registry, String ordering, int supplement)
+    {
+        cidsysteminfo = new COSDictionary();
+        cidsysteminfo.setString(COSName.REGISTRY, registry);
+        cidsysteminfo.setString(COSName.ORDERING, ordering);
+        cidsysteminfo.setInt(COSName.SUPPLEMENT, supplement);
+    }
+
+    public COSDictionary getCIDSystemInfo()
+    {
+        return cidsysteminfo;
+    }
+}
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFontDescriptorDictionary.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFontDescriptorDictionary.java
index e71b27e..8d15dfd 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFontDescriptorDictionary.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFontDescriptorDictionary.java
@@ -578,6 +578,20 @@ public class PDFontDescriptorDictionary extends PDFontDescriptor implements COSO
     }
 
     /**
+     * Reset the true type font program.
+     *
+     * @param ttfStream The true type stream.
+     */
+    public void resetFontFile2( PDStream ttfStream )
+    {
+        if (dic.getItem(COSName.FONT_FILE2) != null)
+        {
+            dic.removeItem(COSName.FONT_FILE2);
+        }
+        dic.setItem( COSName.FONT_FILE2, ttfStream );
+    }
+
+    /**
      * A stream containing a font program that is not true type or type 1.
      *
      * @return A stream containing a font program.
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0CJKFont.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0CJKFont.java
new file mode 100644
index 0000000..11d407d
--- /dev/null
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0CJKFont.java
@@ -0,0 +1,152 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.pdfbox.pdmodel.font;
+
+import java.io.IOException;
+import java.util.Collections;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.MissingResourceException;
+import java.util.Properties;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.fontbox.util.BoundingBox;
+import org.apache.pdfbox.cos.COSArray;
+import org.apache.pdfbox.cos.COSDictionary;
+import org.apache.pdfbox.cos.COSInteger;
+import org.apache.pdfbox.cos.COSName;
+import org.apache.pdfbox.pdmodel.common.PDRectangle;
+import org.apache.pdfbox.pdmodel.font.PDCIDFontType0Font;
+import org.apache.pdfbox.pdmodel.font.PDCIDSystemInfo;
+import org.apache.pdfbox.pdmodel.font.PDFont;
+import org.apache.pdfbox.pdmodel.font.PDType0Font;
+import org.apache.pdfbox.pdmodel.font.PDFontDescriptor;
+import org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary;
+import org.apache.pdfbox.util.ResourceLoader;
+
+/**
+ * This is implementation for the CJK Fonts.
+ *
+ * @author Keiji Suzuki</a>
+ * 
+ */
+public class PDType0CJKFont extends PDType0Font
+{
+    /**
+     * Log instance.
+     */
+    private static final Log LOG = LogFactory.getLog(PDType0CJKFont.class);
+
+    private static final Map<String, String> SUPPORTED_FONTS = new HashMap<String, String>();
+
+    static
+    {
+        loadSupportedFonts("org/apache/pdfbox/resources/cjk/supported_fonts.properties");
+    }
+
+    private static final Map<String, PDFont> CACHED_FONTS = new HashMap<String, PDFont>();
+
+    public static PDFont getFont(String fontName) throws IOException
+    {
+        if (!SUPPORTED_FONTS.containsKey(fontName))
+        {
+            throw new IOException(fontName+" is not supported");
+        }
+
+        PDFont font = null;
+        if (CACHED_FONTS.containsKey(fontName))
+        {
+            font = CACHED_FONTS.get(fontName);
+        }
+        else
+        {
+            font = makeFont(fontName);
+            CACHED_FONTS.put(fontName, font);
+        }
+
+        return font;
+    }
+
+    private static PDFont makeFont(String fontName) throws IOException
+    {
+        String path = String.format("org/apache/pdfbox/resources/cjk/%s.properties", fontName);
+        Properties fontProperties = ResourceLoader.loadProperties(path, false);
+        if (fontProperties == null)
+        {
+            throw new MissingResourceException("Font properties not found: " + path, PDType0CJKFont.class.getName(), path);
+        }
+
+        PDFontDescriptorDictionary fd = new PDFontDescriptorDictionary();
+        fd.setFontName(fontName);
+        fd.setFlags(Integer.valueOf(fontProperties.getProperty("Flags")).intValue());
+
+        String fontBBox = fontProperties.getProperty("FontBBox");
+        String[] bb = fontBBox.substring(1, fontBBox.length() - 2).split(" ");
+        BoundingBox bbox = new BoundingBox();
+        bbox.setLowerLeftX(Integer.valueOf(bb[0]).intValue());
+        bbox.setLowerLeftY(Integer.valueOf(bb[1]).intValue());
+        bbox.setUpperRightX(Integer.valueOf(bb[2]).intValue());
+        bbox.setUpperRightY(Integer.valueOf(bb[3]).intValue());
+        fd.setFontBoundingBox(new PDRectangle(bbox));
+
+        fd.setItalicAngle(Integer.valueOf(fontProperties.getProperty("ItalicAngle")).intValue());
+        fd.setAscent(Integer.valueOf(fontProperties.getProperty("Ascent")).intValue());
+        fd.setDescent(Integer.valueOf(fontProperties.getProperty("Descent")).intValue());
+        fd.setCapHeight(Integer.valueOf(fontProperties.getProperty("CapHeight")).intValue());
+        fd.setStemV(Integer.valueOf(fontProperties.getProperty("StemV")).intValue());
+
+        PDCIDFontType0Font cid = new PDCIDFontType0Font();
+        cid.setBaseFont(fontName);
+        cid.setCIDSystemInfo(new PDCIDSystemInfo(fontProperties.getProperty("CIDSystemInfo")));
+        cid.setFontDescriptor(fd);
+        cid.setDefaultWidth(Integer.valueOf(fontProperties.getProperty("DW")).intValue());
+        cid.setFontWidths(fontProperties.getProperty("W"));
+
+        PDType0Font font = new PDType0Font();
+        font.setBaseFont(fontName);
+        font.setEncoding(COSName.getPDFName(fontProperties.getProperty("Encoding")));
+        font.setDescendantFont(cid);
+
+        return font;
+    }
+
+    private static void loadSupportedFonts(String location)
+    {
+        try
+        {
+            Properties supportedProperties = ResourceLoader.loadProperties(location, false);
+            if (supportedProperties == null)
+            {
+                throw new MissingResourceException("Supported fonts properties not found: " + location, PDType0CJKFont.class.getName(), location);
+            }
+            Enumeration<?> names = supportedProperties.propertyNames();
+            for (Object name : Collections.list(names))
+            {
+                String fontName = name.toString();
+                String fontType = supportedProperties.getProperty(fontName);
+                SUPPORTED_FONTS.put(fontName, fontType.toLowerCase());
+            }
+        }
+        catch (IOException io)
+        {
+            LOG.error("error while reading the supported fonts property file.", io);
+        }
+    }
+
+}
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java
index 171a921..710519e 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java
@@ -24,6 +24,7 @@ import org.apache.pdfbox.cos.COSArray;
 import org.apache.pdfbox.cos.COSDictionary;
 import org.apache.pdfbox.cos.COSName;
 import org.apache.pdfbox.pdmodel.common.PDRectangle;
+import org.apache.pdfbox.pdmodel.common.PDStream;
 
 /**
  * This is implementation of the Type0 Font. See <a
@@ -80,7 +81,7 @@ public class PDType0Font extends PDSimpleFont
     @Override
     public PDRectangle getFontBoundingBox() throws IOException
     {
-        throw new RuntimeException("Not yet implemented");
+        return descendantFont.getFontDescriptor().getFontBoundingBox();
     }
 
     /**
@@ -181,4 +182,46 @@ public class PDType0Font extends PDSimpleFont
         return descendantFont;
     }
 
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public float getStringWidth(String string) throws IOException
+    {
+        byte[] bytes = string.getBytes("UTF-16BE");
+        float totalWidth = 0f;
+        for (int i=0; i<bytes.length; i=i+2)
+        {
+            totalWidth += getFontWidth(bytes, i, 2);
+        }
+        return totalWidth;
+    }
+
+    public void setDescendantFont(PDCIDFont cidfont)
+    {
+        descendantFont = cidfont;
+        descendantFontArray = new COSArray();
+        descendantFontArray.add(descendantFont);
+        font.setItem(COSName.DESCENDANT_FONTS, descendantFontArray);
+    }
+
+    public void setEncoding(COSName encoding)
+    {
+        font.setItem(COSName.ENCODING, encoding);
+    }
+
+    public void setToUnicode(PDStream toUnicode)
+    {
+        font.setItem(COSName.TO_UNICODE, toUnicode);
+    }
+
+    public void resetToUnicode(PDStream toUnicode)
+    {
+        if (font.getItem(COSName.TO_UNICODE) != null)
+        {
+            font.removeItem(COSName.TO_UNICODE);
+        }
+        font.setItem(COSName.TO_UNICODE, toUnicode);
+    }
+
 }
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0TTFont.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0TTFont.java
new file mode 100644
index 0000000..1c16887
--- /dev/null
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0TTFont.java
@@ -0,0 +1,479 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.pdfbox.pdmodel.font;
+
+import java.io.File;
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.nio.charset.Charset;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Random;
+import java.util.Set;
+import java.util.TreeSet;
+
+import org.apache.fontbox.ttf.*;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.fontbox.util.BoundingBox;
+import org.apache.pdfbox.cos.COSArray;
+import org.apache.pdfbox.cos.COSBase;
+import org.apache.pdfbox.cos.COSDictionary;
+import org.apache.pdfbox.cos.COSInteger;
+import org.apache.pdfbox.cos.COSName;
+import org.apache.pdfbox.pdmodel.PDDocument;
+import org.apache.pdfbox.pdmodel.common.PDRectangle;
+import org.apache.pdfbox.pdmodel.common.PDStream;
+import org.apache.pdfbox.util.StringUtil;
+
+/**
+ * This is implementation for the CJK Fonts.
+ *
+ * @author Keiji Suzuki</a>
+ * 
+ */
+public class PDType0TTFont extends PDType0Font
+{
+    /**
+     * Log instance.
+     */
+    private static final Log LOG = LogFactory.getLog(PDType0TTFont.class);
+
+    /** Original font path */
+    private static String fontPath;
+
+    /** Does the original font have serif */
+    private static boolean isSerif;
+
+    /** Prefix of the embedded font */
+    private static String prefix;
+
+    /** Font name of the embedded font*/
+    private static String bfname;
+
+    /** Codes used in wrriten text */
+    private TreeSet<Integer> usedCodes = new TreeSet<Integer>();
+
+    /** Default font width of the embedded font */
+    private long defaultW;
+
+    /** Embedded font */
+    private TTFSubFont subFont;
+
+    /** Map from unicode to cid */
+    private CMAPEncodingEntry unicode2cidMap;
+
+    /**
+     * Constructor.
+     *
+     * @param fontpath The absolute path of original font. When use ttc font, add 'comma' and 
+     *          the index of using font after the font path.
+     * @param isSerif Does the font have serif
+     *
+     * @throws IOException If an error occures while font parsing.
+     */
+    public PDType0TTFont(String fontPath, boolean isSerif) throws IOException
+    {
+        super();
+        this.fontPath = fontPath;
+        this.isSerif = isSerif;
+        this.prefix = getPrefix();
+
+        int fontIndex = -1;
+        int ttcPos = fontPath.toLowerCase().indexOf("ttc");
+        if (ttcPos > -1)
+        {
+            fontIndex = Integer.valueOf(fontPath.substring(ttcPos+4));
+            fontPath = fontPath.substring(0, ttcPos+3);
+        }
+
+        RAFDataStream raf = new RAFDataStream(new File(fontPath), "r");
+        CIDFontType2Parser parser = new CIDFontType2Parser(false);
+        TrueTypeFont ttf = null;
+        if (fontIndex > -1)
+        {
+            parser.parseTTC(raf);
+            ttf = parser.parseTTF(raf, fontIndex);
+        }
+        else
+        {
+            ttf = parser.parseTTF(raf);
+        }
+
+        subFont = new TTFSubFont(ttf, prefix);
+
+        PDFontDescriptorDictionary fd = new PDFontDescriptorDictionary();
+        loadDescriptorDictionary(ttf, fd);
+
+        PDCIDFontType2Font desendant = new PDCIDFontType2Font();
+        desendant.setBaseFont(bfname);
+        desendant.setCIDSystemInfo(PDCIDSystemInfo.ADOBE_IDENTITY_0);
+        desendant.setFontDescriptor(fd);
+        desendant.setDefaultWidth(defaultW);
+
+        setBaseFont(bfname);
+        setEncoding(COSName.IDENTITY_H);
+        setDescendantFont(desendant);
+
+    }
+
+    /**
+     *  Reload embedded font with used codes. You must call this method
+     *    before calling document.save()
+     *
+     *  @param document The PDDocument.
+     *  @throws IOException
+     */
+    public void reloadFont(PDDocument document)  throws IOException
+    {
+        int[] used = getUsedCodes();
+        for (int cp : used)
+        {
+            subFont.addCharCode(cp);
+        }
+
+        ByteArrayOutputStream bos = new ByteArrayOutputStream();
+        subFont.writeToStream(bos);
+        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
+        PDStream fontStream = new PDStream(document, bis);
+        fontStream.addCompression();
+        fontStream.getStream().setInt(COSName.LENGTH1, fontStream.getByteArray().length);
+
+        PDCIDFontType2Font descendantFont = (PDCIDFontType2Font) getDescendantFont();
+        PDFontDescriptorDictionary fd = (PDFontDescriptorDictionary) descendantFont.getFontDescriptor();
+        fd.resetFontFile2(fontStream);
+
+
+        InputStream stream = fontStream.createInputStream();
+        TrueTypeFont ttf = null;
+        try
+        {
+            TTFParser parser = new TTFParser();
+            ttf = parser.parseTTF(stream);
+
+            CMAPTable cmapTable = ttf.getCMAP();
+            CMAPEncodingEntry[] cmaps = cmapTable.getCmaps();
+            CMAPEncodingEntry gidMap = null;
+
+            for (int i = 0; i < cmaps.length; i++)
+            {
+                if (cmaps[i].getPlatformId() == CMAPTable.PLATFORM_WINDOWS)
+                {
+                    int platformEncoding = cmaps[i].getPlatformEncodingId();
+                    if (CMAPTable.ENCODING_UNICODE == platformEncoding)
+                    {
+                        gidMap = cmaps[i];
+                        break;
+                    }
+                }
+            }
+
+            Map<Integer, Integer> unicode2cid = new LinkedHashMap<Integer, Integer>();
+            Map<Integer, Integer> cid2gid = new HashMap<Integer, Integer>();
+            Map<Integer, Integer> gid2cid = new HashMap<Integer, Integer>();
+            TreeSet<Integer> gidset = new TreeSet<Integer>();
+            int maxcid = Integer.MIN_VALUE;
+            for (int i=0, len=used.length; i<len; i++)
+            {
+                int unicode = used[i];
+                int cid = unicode2cidMap.getGlyphId(unicode);
+                int gid = gidMap.getGlyphId(unicode);
+                unicode2cid.put(unicode, cid);
+                cid2gid.put(cid, gid);
+                gid2cid.put(gid, cid);
+                gidset.add(gid);
+                if (cid > maxcid)
+                {
+                    maxcid = cid;
+                }
+            }
+
+            HeaderTable header = ttf.getHeader();
+            float scaling = 1000f / header.getUnitsPerEm();
+
+            HorizontalMetricsTable hmtx = ttf.getHorizontalMetrics();
+            int[] widths = hmtx.getAdvanceWidth();
+            StringBuilder sb = new StringBuilder();
+            for (Integer gid : gidset)
+            {
+                sb.append(" ").append(gid2cid.get(gid.intValue()))
+                  .append(" ").append(Math.round(widths[gid.intValue()] * scaling));
+            }
+            COSArray wArray = descendantFont.getFontWidthsArray(sb.toString().substring(1));
+            descendantFont.resetFontWidths(wArray);
+            descendantFont.resetCID2GID(getCIDToGID(document, maxcid, cid2gid));
+
+            this.resetToUnicode(getToUnicode(document, unicode2cid));
+        }
+        finally
+        {
+            if (ttf != null)
+            {
+                ttf.close();
+            }
+        }
+
+    }
+
+    private void loadDescriptorDictionary(TrueTypeFont ttf, PDFontDescriptorDictionary fd) throws IOException
+    {
+        NamingTable naming = ttf.getNaming();
+        List<NameRecord> records = naming.getNameRecords();
+        for (int i = 0; i < records.size(); i++)
+        {
+            NameRecord nr = records.get(i);
+            if (nr.getNameId() == NameRecord.NAME_POSTSCRIPT_NAME)
+            {
+                bfname = nr.getString();
+                fd.setFontName(bfname);
+            }
+        }
+
+        OS2WindowsMetricsTable os2 = ttf.getOS2Windows();
+        boolean isSymbolic = false;
+        switch (os2.getFamilyClass())
+        {
+        case OS2WindowsMetricsTable.FAMILY_CLASS_SYMBOLIC:
+            isSymbolic = true;
+            break;
+        case OS2WindowsMetricsTable.FAMILY_CLASS_SCRIPTS:
+            fd.setScript(true);
+            break;
+        case OS2WindowsMetricsTable.FAMILY_CLASS_CLAREDON_SERIFS:
+        case OS2WindowsMetricsTable.FAMILY_CLASS_FREEFORM_SERIFS:
+        case OS2WindowsMetricsTable.FAMILY_CLASS_MODERN_SERIFS:
+        case OS2WindowsMetricsTable.FAMILY_CLASS_OLDSTYLE_SERIFS:
+        case OS2WindowsMetricsTable.FAMILY_CLASS_SLAB_SERIFS:
+            isSerif = true;
+            break;
+        default:
+            // do nothing
+        }
+        switch (os2.getWidthClass())
+        {
+            case OS2WindowsMetricsTable.WIDTH_CLASS_ULTRA_CONDENSED:
+                fd.setFontStretch("UltraCondensed");
+                break;
+            case OS2WindowsMetricsTable.WIDTH_CLASS_EXTRA_CONDENSED:
+                fd.setFontStretch("ExtraCondensed");
+                break;
+            case OS2WindowsMetricsTable.WIDTH_CLASS_CONDENSED:
+                fd.setFontStretch("Condensed");
+                break;
+            case OS2WindowsMetricsTable.WIDTH_CLASS_SEMI_CONDENSED:
+                fd.setFontStretch("SemiCondensed");
+                break;
+            case OS2WindowsMetricsTable.WIDTH_CLASS_MEDIUM:
+                fd.setFontStretch("Normal");
+                break;
+            case OS2WindowsMetricsTable.WIDTH_CLASS_SEMI_EXPANDED:
+                fd.setFontStretch("SemiExpanded");
+                break;
+            case OS2WindowsMetricsTable.WIDTH_CLASS_EXPANDED:
+                fd.setFontStretch("Expanded");
+                break;
+            case OS2WindowsMetricsTable.WIDTH_CLASS_EXTRA_EXPANDED:
+                fd.setFontStretch("ExtraExpanded");
+                break;
+            case OS2WindowsMetricsTable.WIDTH_CLASS_ULTRA_EXPANDED:
+                fd.setFontStretch("UltraExpanded");
+                break;
+            default:
+                // do nothing
+        }
+        fd.setFontWeight(os2.getWeightClass());
+        fd.setSymbolic(isSymbolic);
+        fd.setNonSymbolic(!isSymbolic);
+        fd.setSerif(isSerif);
+
+        HeaderTable header = ttf.getHeader();
+        PDRectangle rect = new PDRectangle();
+        float scaling = 1000f / header.getUnitsPerEm();
+        rect.setLowerLeftX(Math.round(header.getXMin() * scaling));
+        rect.setLowerLeftY(Math.round(header.getYMin() * scaling));
+        rect.setUpperRightX(Math.round(header.getXMax() * scaling));
+        rect.setUpperRightY(Math.round(header.getYMax() * scaling));
+        fd.setFontBoundingBox(rect);
+
+        HorizontalHeaderTable hHeader = ttf.getHorizontalHeader();
+        fd.setAscent(Math.round(hHeader.getAscender() * scaling));
+        fd.setDescent(Math.round(hHeader.getDescender() * scaling));
+
+        GlyphTable glyphTable = ttf.getGlyph();
+        GlyphData[] glyphs = glyphTable.getGlyphs();
+
+        PostScriptTable ps = ttf.getPostScript();
+        fd.setFixedPitch(ps.getIsFixedPitch() > 0);
+        fd.setItalicAngle(ps.getItalicAngle());
+
+        String[] names = ps.getGlyphNames();
+
+        if (names != null)
+        {
+            for (int i = 0; i < names.length; i++)
+            {
+                // if we have a capital H then use that, otherwise use the
+                // tallest letter
+                if (names[i].equals("H"))
+                {
+                    fd.setCapHeight(Math.round(glyphs[i].getBoundingBox().getUpperRightY() / scaling));
+                }
+                if (names[i].equals("x"))
+                {
+                    fd.setXHeight(Math.round(glyphs[i].getBoundingBox().getUpperRightY() / scaling));
+                }
+            }
+        }
+
+        // hmm there does not seem to be a clear definition for StemV,
+        // this is close enough and I am told it doesn't usually get used.
+        fd.setStemV(Math.round(fd.getFontBoundingBox().getWidth() * .13f));
+
+        fd.setFlags(fd.getFlags());
+
+        CMAPTable cmapTable = ttf.getCMAP();
+        CMAPEncodingEntry[] cmaps = cmapTable.getCmaps();
+
+        for (int i = 0; i < cmaps.length; i++)
+        {
+            if (cmaps[i].getPlatformId() == CMAPTable.PLATFORM_WINDOWS)
+            {
+                int platformEncoding = cmaps[i].getPlatformEncodingId();
+                if (CMAPTable.ENCODING_UNICODE == platformEncoding)
+                {
+                    unicode2cidMap = cmaps[i];
+                    break;
+                }
+            }
+        }
+
+        HorizontalMetricsTable hmtx = ttf.getHorizontalMetrics();
+        int[] widths = hmtx.getAdvanceWidth();
+        defaultW = Math.round(widths[0] * scaling);
+    }
+
+    public int getCID(int unicode)
+    {
+        return unicode2cidMap.getGlyphId(unicode);
+    }
+
+    private String getPrefix()
+    {
+        Random rnd = new Random();
+        StringBuilder sb = new StringBuilder();
+        for (int i=0; i<6; i++)
+        {
+            sb.append((char)('A'+rnd.nextInt(26)));
+        }
+        return sb.toString() + "+";
+    }
+
+    public void setUsedCodes(String text)
+    {
+        for (int i = 0, len=text.length(), cp; i < len; i += Character.charCount(cp)) 
+        {
+            cp = text.codePointAt(i);
+            usedCodes.add(cp);
+        }
+    }
+
+    private int[] getUsedCodes()
+    {
+        int[] used = new int[usedCodes.size()];
+        int j = 0;
+        for (Integer code : usedCodes)
+        {
+            used[j++] = code.intValue();
+        }
+
+        return used;
+    }
+
+    private PDStream getToUnicode(PDDocument document, Map<Integer, Integer> unicode2cid)
+        throws IOException
+    {
+        StringBuilder sb = new StringBuilder(
+            "/CIDInit /ProcSet findresource begin\n" +
+            "12 dict begin\n" +
+            "begincmap\n" +
+            "/CIDSystemInfo\n" +
+            "<< /Registry (TT1+0)\n" +
+            "/Ordering (T42UV)\n" +
+            "/Supplement 0\n" +
+            ">> def\n" +
+            "/CMapName /TT1+0 def\n" +
+            "/CMapType 2 def\n" +
+            "1 begincodespacerange\n" +
+            "<0000> <FFFF>\n" +
+            "endcodespacerange\n"
+        );
+        int size = 0, i = 0;
+        for (Integer unicode : unicode2cid.keySet())
+        {
+            if (size == 0) 
+            {
+                if (i != 0) {
+                    sb.append("endbfchar\n");
+                }
+                size = Math.min(100, unicode2cid.size() - i);
+                sb.append(size).append(" beginbfchar\n");
+            }
+            --size; ++i;
+            sb.append(StringUtil.toHex(unicode2cid.get(unicode))).append(" ").append(StringUtil.toHex(unicode.intValue())).append('\n');
+        }
+        sb.append(
+            "endbfchar\n" +
+            "endcmap\n" +
+            "CMapName currentdict /CMap defineresource pop\n" +
+            "end end\n"
+        );
+
+        ByteArrayInputStream bis = new ByteArrayInputStream(sb.toString().getBytes(Charset.forName("US-ASCII")));
+        PDStream toUnicode = new PDStream(document, bis);
+        toUnicode.addCompression();
+        return toUnicode;
+    }
+
+    private COSBase getCIDToGID(PDDocument document, int maxcid, Map<Integer, Integer> cid2gid) throws IOException
+    {
+        byte[] bs = new byte[2*(maxcid+1)];
+        for (int i=0; i<=maxcid; i++)
+        {
+            if (cid2gid.containsKey(i))
+            {
+                int gid = cid2gid.get(i);
+                bs[i*2]   = (byte)((gid >> 8) & 0xFF);
+                bs[i*2+1] = (byte)(gid & 0xFF);
+            }
+            else
+            {
+                bs[i*2]   = (byte)0;
+                bs[i*2+1] = (byte)0;
+            }
+        }
+        ByteArrayInputStream bis = new ByteArrayInputStream(bs);
+        PDStream cidToGID = new PDStream(document, bis);
+        cidToGID.addCompression();
+        return cidToGID.getCOSObject();
+    }
+
+
+}
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/util/StringUtil.java b/pdfbox/src/main/java/org/apache/pdfbox/util/StringUtil.java
index a781c56..25950c2 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/util/StringUtil.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/util/StringUtil.java
@@ -36,4 +36,24 @@ public class StringUtil
                 throw new RuntimeException("Unsupported Encoding", e);
             }
     }
+
+    public static String toHex4(int n)
+    {
+        String s = "0000" + Integer.toHexString(n);
+        return s.substring(s.length() - 4);
+    }
+
+    public static String toHex(int n)
+    {
+        if (n < 0x10000)
+        {
+            return "<" + toHex4(n) + ">";
+        }
+
+        n -= 0x10000;
+        int high = n / 0x400 + 0xd800;
+        int low = n % 0x400 + 0xdc00;
+        return "[<" + toHex4(high) + toHex4(low) + ">]";
+    }
+
 }
diff --git a/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeFanHeitiStd-Bold.properties b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeFanHeitiStd-Bold.properties
new file mode 100644
index 0000000..c18b1c9
--- /dev/null
+++ b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeFanHeitiStd-Bold.properties
@@ -0,0 +1,12 @@
+Name=AdobeFanHeitiStd-Bold
+CIDSystemInfo=Adobe-CNS1-5
+Encoding=UniCNS-UTF16-H
+ItalicAngle=0
+Flags=4
+StemV=80
+FontBBox=[-163 -283 1087 967]
+Ascent=880
+Descent=-120
+CapHeight=766
+DW=1000
+W=0 0 1 224 2 266 3 392 4 551 5 562 6 883 7 677 8 213 9 322 10 322 11 470 12 677 13 247 14 343 15 245 16 370 17 562 18 562 19 562 20 562 21 562 22 562 23 562 24 562 25 562 26 562 27 245 28 247 29 677 30 677 31 677 32 447 33 808 34 661 35 602 36 610 37 708 38 535 39 528 40 689 41 703 42 275 43 404 44 602 45 514 46 871 47 708 48 727 49 585 50 727 51 595 52 539 53 541 54 696 55 619 56 922 57 612 58 591 59 584 60 322 61 362 62 322 63 677 64 568 65 340 66 532 67 612 68 475 69 608 70 543 71 332 72 603 73 601 74 265 75 276 76 524 77 264 78 901 79 601 80 590 81 612 82 607 83 367 84 433 85 369 86 597 87 527 88 800 89 511 90 518 91 468 92 321 93 273 94 321 95 677 96 769 97 683 98 1136 13648 500 13649 500 13650 500 13651 500 13652 500 13653 500 13654 500 13655 500 13656 500 13657 500 13658 500 13659 500 13660 500 13661 500 13662 500 13663 500 13664 500 13665 500 13666 500 13667 500 13668 500 13669 500 13670 500 13671 500 13672 500 13673 500 13674 500 13675 500 13676 500 13677 500 13678 500 13679 500 13680 500 13681 500 13682 500 13683 500 13684 500 13685 500 13686 500 13687 500 13688 500 13689 500 13690 500 13691 500 13692 500 13693 500 13694 500 13695 500 13696 500 13697 500 13698 500 13699 500 13700 500 13701 500 13702 500 13703 500 13704 500 13705 500 13706 500 13707 500 13708 500 13709 500 13710 500 13711 500 13712 500 13713 500 13714 500 13715 500 13716 500 13717 500 13718 500 13719 500 13720 500 13721 500 13722 500 13723 500 13724 500 13725 500 13726 500 13727 500 13728 500 13729 500 13730 500 13731 500 13732 500 13733 500 13734 500 13735 500 13736 500 13737 500 13738 500 13739 500 13740 500 13741 500 13742 500 17601 562 17603 500
diff --git a/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeGothicStd-Bold.properties b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeGothicStd-Bold.properties
new file mode 100644
index 0000000..86781f8
--- /dev/null
+++ b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeGothicStd-Bold.properties
@@ -0,0 +1,12 @@
+Name=AdobeGothicStd-Bold
+CIDSystemInfo=Adobe-Korea1-2
+Encoding=UniKS-UTF16-H
+ItalicAngle=0
+Flags=4
+StemV=80
+FontBBox=[-165 -285 1092 972]
+Ascent=880
+Descent=-120
+CapHeight=769
+DW=1000
+W=0 0 1 216 2 283 3 414 4 567 5 572 6 901 7 699 8 218 9 331 10 331 11 483 12 680 13 272 14 342 15 271 16 361 17 572 18 572 19 572 20 572 21 572 22 572 23 572 24 572 25 572 26 572 27 271 28 272 29 680 30 680 31 680 32 456 33 813 34 663 35 625 36 599 37 706 38 544 39 537 40 688 41 708 42 298 43 414 44 623 45 522 46 874 47 711 48 720 49 600 50 720 51 614 52 548 53 552 54 698 55 638 56 923 57 612 58 599 59 579 60 331 61 345 62 331 63 680 64 571 65 342 66 548 67 615 68 469 69 613 70 551 71 354 72 606 73 608 74 281 75 294 76 550 77 281 78 902 79 608 80 593 81 615 82 612 83 386 84 443 85 385 86 604 87 540 88 803 89 529 90 532 91 478 92 331 93 288 94 331 95 680 96 923 97 570 98 773 99 690 100 1142 8094 500 8095 500 8096 500 8097 500 8098 500 8099 500 8100 500 8101 500 8102 500 8103 500 8104 500 8105 500 8106 500 8107 500 8108 500 8109 500 8110 500 8111 500 8112 500 8113 500 8114 500 8115 500 8116 500 8117 500 8118 500 8119 500 8120 500 8121 500 8122 500 8123 500 8124 500 8125 500 8126 500 8127 500 8128 500 8129 500 8130 500 8131 500 8132 500 8133 500 8134 500 8135 500 8136 500 8137 500 8138 500 8139 500 8140 500 8141 500 8142 500 8143 500 8144 500 8145 500 8146 500 8147 500 8148 500 8149 500 8150 500 8151 500 8152 500 8153 500 8154 500 8155 500 8156 500 8157 500 8158 500 8159 500 8160 500 8161 500 8162 500 8163 500 8164 500 8165 500 8166 500 8167 500 8168 500 8169 500 8170 500 8171 500 8172 500 8173 500 8174 500 8175 500 8176 500 8177 500 8178 500 8179 500 8180 500 8181 500 8182 500 8183 500 8184 500 8185 500 8186 500 8187 500 8188 500 8189 500 8190 500
diff --git a/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeHeitiStd-Regular.properties b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeHeitiStd-Regular.properties
new file mode 100644
index 0000000..7e3b75f
--- /dev/null
+++ b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeHeitiStd-Regular.properties
@@ -0,0 +1,12 @@
+Name=AdobeHeitiStd-Regular
+CIDSystemInfo=Adobe-GB1-5
+Encoding=UniGB-UTF16-H
+ItalicAngle=0
+Flags=4
+StemV=80
+FontBBox=[-163 -283 1087 967]
+Ascent=880
+Descent=-120
+CapHeight=763
+DW=1000
+W=0 0 1 224 2 266 3 392 4 551 5 562 6 883 7 677 8 241 9 322 10 322 11 470 12 677 13 247 14 343 15 245 16 370 17 562 18 562 19 562 20 562 21 562 22 562 23 562 24 562 25 562 26 562 27 245 28 247 29 677 30 677 31 677 32 447 33 808 34 661 35 602 36 610 37 708 38 535 39 528 40 689 41 703 42 275 43 404 44 602 45 514 46 871 47 708 48 727 49 585 50 727 51 595 52 539 53 541 54 696 55 619 56 922 57 612 58 591 59 584 60 322 61 362 62 322 63 677 64 568 65 241 66 532 67 612 68 475 69 608 70 543 71 332 72 603 73 601 74 265 75 276 76 524 77 264 78 901 79 601 80 590 81 612 82 607 83 367 84 433 85 369 86 597 87 527 88 800 89 511 90 518 91 468 92 321 93 273 94 321 95 677 814 500 815 500 816 500 817 500 818 500 819 500 820 500 821 500 822 500 823 500 824 500 825 500 826 500 827 500 828 500 829 500 830 500 831 500 832 500 833 500 834 500 835 500 836 500 837 500 838 500 839 500 840 500 841 500 842 500 843 500 844 500 845 500 846 500 847 500 848 500 849 500 850 500 851 500 852 500 853 500 854 500 855 500 856 500 857 500 858 500 859 500 860 500 861 500 862 500 863 500 864 500 865 500 866 500 867 500 868 500 869 500 870 500 871 500 872 500 873 500 874 500 875 500 876 500 877 500 878 500 879 500 880 500 881 500 882 500 883 500 884 500 885 500 886 500 887 500 888 500 889 500 890 500 891 500 892 500 893 500 894 500 895 500 896 500 897 500 898 500 899 500 900 500 901 500 902 500 903 500 904 500 905 500 906 500 907 500 908 500 909 500 910 500 911 500 912 500 913 500 914 500 915 500 916 500 917 500 918 500 919 500 920 500 921 500 922 500 923 500 924 500 925 500 926 500 927 500 928 500 929 500 930 500 931 500 932 500 933 500 934 500 935 500 936 500 937 500 938 500 939 500 7712 597 7713 769 7714 683 7715 1136 7716 500 22353 562 22354 562 22355 500 22356 500 22357 500 29064 550
diff --git a/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeMingStd-Light.properties b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeMingStd-Light.properties
new file mode 100644
index 0000000..0f50154
--- /dev/null
+++ b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeMingStd-Light.properties
@@ -0,0 +1,12 @@
+Name=AdobeMingStd-Light
+CIDSystemInfo=Adobe-CNS1-5
+Encoding=UniCNS-UTF16-H
+ItalicAngle=0
+Flags=6
+StemV=80
+FontBBox=[-38 -121 1002 918]
+Ascent=880
+Descent=-120
+CapHeight=731
+DW=1000
+W= 0 0 1 251 2 347 3 405 4 739 5 504 6 758 7 825 8 281 9 293 10 294 11 494 12 620 13 251 14 373 15 252 16 309 17 503 18 503 19 503 20 503 21 504 22 503 23 502 24 503 25 503 26 504 27 251 28 251 29 621 30 621 31 621 32 405 33 1042 34 749 35 673 36 679 37 679 38 685 39 671 40 738 41 736 42 333 43 494 44 729 45 696 46 901 47 720 48 750 49 674 50 746 51 672 52 627 53 769 54 707 55 777 56 887 57 709 58 716 59 616 60 279 61 309 62 277 63 352 64 575 65 294 66 500 67 511 68 502 69 549 70 494 71 356 72 516 73 550 74 321 75 321 76 510 77 317 78 738 79 533 80 535 81 545 82 533 83 376 84 443 85 361 86 529 87 526 88 742 89 534 90 576 91 439 92 447 93 262 94 446 95 472 13648 500 13649 500 13650 500 13651 500 13652 500 13653 500 13654 500 13655 500 13656 500 13657 500 13658 500 13659 500 13660 500 13661 500 13662 500 13663 500 13664 500 13665 500 13666 500 13667 500 13668 500 13669 500 13670 500 13671 500 13672 500 13673 500 13674 500 13675 500 13676 500 13677 500 13678 500 13679 500 13680 500 13681 500 13682 500 13683 500 13684 500 13685 500 13686 500 13687 500 13688 500 13689 500 13690 500 13691 500 13692 500 13693 500 13694 500 13695 500 13696 500 13697 500 13698 500 13699 500 13700 500 13701 500 13702 500 13703 500 13704 500 13705 500 13706 500 13707 500 13708 500 13709 500 13710 500 13711 500 13712 500 13713 500 13714 500 13715 500 13716 500 13717 500 13718 500 13719 500 13720 500 13721 500 13722 500 13723 500 13724 500 13725 500 13726 500 13727 500 13728 500 13729 500 13730 500 13731 500 13732 500 13733 500 13734 500 13735 500 13736 500 13737 500 13738 500 13739 500 13740 500 13741 500 13742 500 17601 639 17603 500
diff --git a/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeMyungjoStd-Medium.properties b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeMyungjoStd-Medium.properties
new file mode 100644
index 0000000..27ecbf3
--- /dev/null
+++ b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeMyungjoStd-Medium.properties
@@ -0,0 +1,12 @@
+Name=AdobeMyungjoStd-Medium
+CIDSystemInfo=Adobe-Korea1-2
+Encoding=UniKS-UTF16-H
+ItalicAngle=0
+Flags=6
+StemV=80
+FontBBox=[-28 -148 1001 883]
+Ascent=880
+Descent=-120
+CapHeight=719
+DW=1000
+W=0 0 1 333 2 416 3 416 4 833 5 625 6 916 7 833 8 250 9 500 10 500 11 500 12 833 13 291 14 833 15 291 16 375 17 625 18 625 19 625 20 625 21 625 22 625 23 625 24 625 25 625 26 625 27 333 28 333 29 833 30 833 31 916 32 500 34 791 35 708 36 708 37 750 38 708 39 666 40 750 41 791 42 375 43 500 44 791 45 666 46 916 47 791 48 750 49 666 50 750 51 708 52 666 53 791 54 791 55 750 57 708 58 708 59 666 60 500 61 375 62 500 63 500 64 500 65 333 66 541 67 583 68 541 69 583 70 583 71 375 72 583 73 583 74 291 75 333 76 583 77 291 78 875 79 583 80 583 81 583 82 583 83 458 84 541 85 375 86 583 87 583 88 833 89 625 90 625 91 500 92 583 93 583 94 583 95 750 97 500 8094 500 8095 500 8096 500 8097 500 8098 500 8099 500 8100 500 8101 500 8102 500 8103 500 8104 500 8105 500 8106 500 8107 500 8108 500 8109 500 8110 500 8111 500 8112 500 8113 500 8114 500 8115 500 8116 500 8117 500 8118 500 8119 500 8120 500 8121 500 8122 500 8123 500 8124 500 8125 500 8126 500 8127 500 8128 500 8129 500 8130 500 8131 500 8132 500 8133 500 8134 500 8135 500 8136 500 8137 500 8138 500 8139 500 8140 500 8141 500 8142 500 8143 500 8144 500 8145 500 8146 500 8147 500 8148 500 8149 500 8150 500 8151 500 8152 500 8153 500 8154 500 8155 500 8156 500 8157 500 8158 500 8159 500 8160 500 8161 500 8162 500 8163 500 8164 500 8165 500 8166 500 8167 500 8168 500 8169 500 8170 500 8171 500 8172 500 8173 500 8174 500 8175 500 8176 500 8177 500 8178 500 8179 500 8180 500 8181 500 8182 500 8183 500 8184 500 8185 500 8186 500 8187 500 8188 500 8189 500 8190 500
diff --git a/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeSongStd-Light.properties b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeSongStd-Light.properties
new file mode 100644
index 0000000..868a1ef
--- /dev/null
+++ b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/AdobeSongStd-Light.properties
@@ -0,0 +1,12 @@
+Name=AdobeSongStd-Light
+CIDSystemInfo=Adobe-GB1-5
+Encoding=UniGB-UTF16-H
+ItalicAngle=0
+Flags=6
+StemV=80
+FontBBox=[-134 -254 1001 905]
+Ascent=880
+Descent=-120
+CapHeight=626
+DW=1000
+W=0 0 1 207 2 270 3 342 4 467 5 462 6 797 7 710 8 239 9 374 10 374 11 423 12 605 13 238 14 375 15 238 16 334 17 462 18 462 19 462 20 462 21 462 22 462 23 462 24 462 25 462 26 462 27 238 28 238 29 605 30 605 31 605 32 344 33 748 34 684 35 560 36 695 37 739 38 563 39 511 40 729 41 793 42 318 43 312 44 666 45 526 46 896 47 758 48 772 49 544 50 772 51 628 52 465 53 607 54 753 55 711 56 972 57 647 58 620 59 607 60 374 61 333 62 374 63 606 64 500 65 239 66 417 67 503 68 427 69 529 70 415 71 264 72 444 73 518 74 241 75 230 76 495 77 228 78 793 79 527 80 524 81 524 82 504 83 338 84 336 85 277 86 517 87 450 88 652 89 466 90 452 91 407 92 370 93 258 94 370 95 605 814 500 815 500 816 500 817 500 818 500 819 500 820 500 821 500 822 500 823 500 824 500 825 500 826 500 827 500 828 500 829 500 830 500 831 500 832 500 833 500 834 500 835 500 836 500 837 500 838 500 839 500 840 500 841 500 842 500 843 500 844 500 845 500 846 500 847 500 848 500 849 500 850 500 851 500 852 500 853 500 854 500 855 500 856 500 857 500 858 500 859 500 860 500 861 500 862 500 863 500 864 500 865 500 866 500 867 500 868 500 869 500 870 500 871 500 872 500 873 500 874 500 875 500 876 500 877 500 878 500 879 500 880 500 881 500 882 500 883 500 884 500 885 500 886 500 887 500 888 500 889 500 890 500 891 500 892 500 893 500 894 500 895 500 896 500 897 500 898 500 899 500 900 500 901 500 902 500 903 500 904 500 905 500 906 500 907 500 908 500 909 500 910 500 911 500 912 500 913 500 914 500 915 500 916 500 917 500 918 500 919 500 920 500 921 500 922 500 923 500 924 500 925 500 926 500 927 500 928 500 929 500 930 500 931 500 932 500 933 500 934 500 935 500 936 500 937 500 938 500 939 500 7712 517 7713 684 7714 723 7716 500 22353 462 22354 462 22355 500 22356 500 22357 500 29064 550
diff --git a/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/KozGoPr6N-Medium.properties b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/KozGoPr6N-Medium.properties
new file mode 100644
index 0000000..bd7d500
--- /dev/null
+++ b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/KozGoPr6N-Medium.properties
@@ -0,0 +1,12 @@
+Name=KozGoPr6N-Medium
+CIDSystemInfo=Adobe-Japan1-6
+Encoding=UniJIS-UTF16-H
+ItalicAngle=0
+Flags=4
+StemV=80
+FontBBox=[-538 -374 1254 1418]
+Ascent=880
+Descent=-120
+CapHeight=763
+DW=1000
+W=0 0 1 224 2 266 3 392 4 551 5 562 6 883 7 677 8 213 9 322 10 322 11 470 12 677 13 247 14 343 15 245 16 370 17 562 18 562 19 562 20 562 21 562 22 562 23 562 24 562 25 562 26 562 27 245 28 247 29 677 30 677 31 677 32 447 33 808 34 661 35 602 36 610 37 708 38 535 39 528 40 689 41 703 42 275 43 404 44 602 45 514 46 871 47 708 48 727 49 585 50 727 51 595 52 539 53 541 54 696 55 619 56 922 57 612 58 591 59 584 60 322 61 562 62 322 63 677 64 568 65 340 66 532 67 612 68 475 69 608 70 543 71 332 72 603 73 601 74 265 75 276 76 524 77 264 78 901 79 601 80 590 81 612 82 607 83 367 84 433 85 369 86 597 87 527 88 800 89 511 90 518 91 468 92 321 93 273 94 321 95 341 96 241 97 362 98 241 99 273 100 677 101 266 102 562 103 562 104 456 105 562 106 571 107 562 108 416 109 472 110 283 111 283 112 587 113 588 114 568 115 545 116 545 117 247 118 561 119 330 120 239 121 418 122 416 123 472 124 1136 125 1288 126 447 127 340 128 340 129 340 130 340 131 340 132 340 133 455 134 340 135 340 136 340 137 340 138 1136 139 857 140 384 141 519 142 727 143 952 144 398 145 834 146 264 147 275 148 590 149 918 150 605 151 677 152 769 153 677 154 473 155 361 156 677 157 347 158 340 159 599 160 284 161 845 162 845 163 845 164 661 165 661 166 661 167 661 168 661 169 661 170 610 171 535 172 535 173 535 174 535 175 275 176 275 177 275 178 275 179 715 180 708 181 727 182 727 183 727 184 727 185 727 186 677 187 696 188 696 189 696 190 696 191 591 192 584 193 532 194 532 195 532 196 532 197 532 198 532 199 475 200 543 201 543 202 543 203 543 204 264 205 264 206 264 207 264 208 584 209 601 210 590 211 590 212 590 213 590 214 590 215 677 216 597 217 597 218 597 219 597 220 518 221 612 222 518 223 539 224 591 225 584 226 446 227 433 228 683 229 468 230 562 231 500 232 500 233 500 234 500 235 500 236 500 237 500 238 500 239 500 240 500 241 500 242 500 243 500 244 500 245 500 246 500 247 500 248 500 249 500 250 500 251 500 252 500 253 500 254 500 255 500 256 500 257 500 258 500 259 500 260 500 261 500 262 500 263 500 264 500 265 500 266 500 267 500 268 500 269 500 270 500 271 500 272 500 273 500 274 500 275 500 276 500 277 500 278 500 279 500 280 500 281 500 282 500 283 500 284 500 285 500 286 500 287 500 288 500 289 500 290 500 291 500 292 500 293 500 294 500 295 500 296 500 297 500 298 500 299 500 300 500 301 500 302 500 303 500 304 500 305 500 306 500 307 500 308 500 309 500 310 500 311 500 312 500 313 500 314 500 315 500 316 500 317 500 318 500 319 500 320 500 321 500 322 500 323 500 324 500 325 500 326 500 327 500 328 500 329 500 330 500 331 500 332 500 333 500 334 500 335 500 336 500 337 500 338 500 339 500 340 500 341 500 342 500 343 500 344 500 345 500 346 500 347 500 348 500 349 500 350 500 351 500 352 500 353 500 354 500 355 500 356 500 357 500 358 500 359 500 360 500 361 500 362 500 363 500 364 500 365 500 366 500 367 500 368 500 369 500 370 500 371 500 372 500 373 500 374 500 375 500 376 500 377 500 378 500 379 500 380 500 381 500 382 500 383 500 384 500 385 500 386 500 387 500 388 500 389 500 390 500 391 500 392 500 393 500 394 500 395 500 396 500 397 500 398 500 399 500 400 500 401 500 402 500 403 500 404 500 405 500 406 500 407 500 408 500 409 500 410 500 411 500 412 500 413 500 414 500 415 500 416 500 417 500 418 500 419 500 420 500 421 500 422 500 423 500 424 500 425 500 426 500 427 500 428 500 429 500 430 500 431 500 432 500 433 500 434 500 435 500 436 500 437 500 438 500 439 500 440 500 441 500 442 500 443 500 444 500 445 500 446 500 447 500 448 500 449 500 450 500 451 500 452 500 453 500 454 500 455 500 456 500 457 500 458 500 459 500 460 500 461 500 462 500 463 500 464 500 465 500 466 500 467 500 468 500 469 500 470 500 471 500 472 500 473 500 474 500 475 500 476 500 477 500 478 500 479 500 480 500 481 500 482 500 483 500 484 500 485 500 486 500 487 500 488 500 489 500 490 500 491 500 492 500 493 500 494 500 495 500 496 500 497 500 498 500 499 500 500 500 501 500 502 500 503 500 504 500 505 500 506 500 507 500 508 500 509 500 510 500 511 500 512 500 513 500 514 500 515 500 516 500 517 500 518 500 519 500 520 500 521 500 522 500 523 500 524 500 525 500 526 500 527 500 528 500 529 500 530 500 531 500 532 500 533 500 534 500 535 500 536 500 537 500 538 500 539 500 540 500 541 500 542 500 543 500 544 500 545 500 546 500 547 500 548 500 549 500 550 500 551 500 552 500 553 500 554 500 555 500 556 500 557 500 558 500 559 500 560 500 561 500 562 500 563 500 564 500 565 500 566 500 567 500 568 500 569 500 570 500 571 500 572 500 573 500 574 500 575 500 576 500 577 500 578 500 579 500 580 500 581 500 582 500 583 500 584 500 585 500 586 500 587 500 588 500 589 500 590 500 591 500 592 500 593 500 594 500 595 500 596 500 597 500 598 500 599 500 600 500 601 500 602 500 603 500 604 500 605 500 606 500 607 500 608 500 609 500 610 500 611 500 612 500 613 500 614 500 615 500 616 500 617 500 618 500 619 500 620 500 621 500 622 500 623 500 624 500 625 500 626 500 627 500 628 500 629 500 630 500 631 500 632 500 8718 500 8719 500 9354 562 9355 753 9356 245 9357 436 9358 650 9359 909 9360 909 9361 532 9362 264 9363 597 9364 543 9365 590 9366 661 9367 275 9368 696 9369 535 9370 727 9371 845 9372 845 9373 845 9374 845 9375 845 9376 845 9377 375 9378 387 9379 345 9380 369 9381 328 9382 366 9383 364 9384 375 9385 284 9386 347 9387 340 9388 387 9389 345 9390 369 9391 328 9392 366 9393 364 9394 661 9395 535 9396 535 9397 535 9398 275 9399 275 9400 275 9401 727 9402 727 9403 696 9404 696 9405 696 9406 532 9407 543 9408 543 9409 543 9410 264 9411 264 9412 264 9413 590 9414 590 9415 597 9416 597 9417 597 9418 596 9419 596 9420 596 9421 834 9422 834 9423 475 9424 475 9425 475 9426 543 9427 543 9428 543 9429 759 9430 759 9431 759 9432 478 9433 478 9434 478 9435 276 9436 602 9437 589 9438 527 9439 527 9440 527 9441 509 9442 465 9443 280 9444 197 9445 270 9446 359 9447 545 9448 546 9449 869 9450 664 9451 188 9452 322 9453 322 9454 469 9455 676 9456 249 9457 343 9458 249 9459 359 9460 545 9461 546 9462 546 9463 546 9464 546 9465 546 9466 546 9467 546 9468 546 9469 546 9470 249 9471 249 9472 676 9473 676 9474 676 9475 429 9476 791 9477 620 9478 573 9479 581 9480 688 9481 511 9482 504 9483 665 9484 681 9485 269 9486 395 9487 572 9488 477 9489 844 9490 677 9491 709 9492 555 9493 709 9494 573 9495 509 9496 515 9497 663 9498 593 9499 898 9500 565 9501 562 9502 557 9503 322 9504 546 9505 322 9506 676 9507 567 9508 427 9509 566 9510 571 9511 447 9512 570 9513 498 9514 320 9515 567 9516 577 9517 258 9518 254 9519 507 9520 257 9521 870 9522 577 9523 564 9524 572 9525 568 9526 359 9527 409 9528 343 9529 572 9530 500 9531 767 9532 486 9533 487 9534 448 9535 322 9536 245 9537 322 9538 427 9539 228 9540 363 9541 228 9542 245 9543 676 9544 269 9545 546 9546 546 9547 442 9548 546 9549 559 9550 546 9551 404 9552 465 9553 275 9554 275 9555 562 9556 562 9557 568 9558 533 9559 534 9560 249 9561 550 9562 326 9563 228 9564 404 9565 404 9566 464 9567 1136 9568 1250 9569 429 9570 427 9571 427 9572 427 9573 427 9574 427 9575 427 9576 423 9577 427 9578 427 9579 427 9580 427 9581 1136 9582 835 9583 396 9584 492 9585 709 9586 923 9587 388 9588 781 9589 258 9590 270 9591 567 9592 858 9593 592 9594 677 9595 765 9596 677 9597 443 9598 361 9599 677 9600 358 9601 354 9602 573 9603 343 9604 840 9605 840 9606 840 9607 620 9608 620 9609 620 9610 620 9611 620 9612 620 9613 581 9614 511 9615 511 9616 511 9617 511 9618 269 9619 269 9620 269 9621 269 9622 700 9623 677 9624 709 9625 709 9626 709 9627 709 9628 709 9629 677 9630 663 9631 663 9632 663 9633 663 9634 562 9635 555 9636 566 9637 566 9638 566 9639 566 9640 566 9641 566 9642 447 9643 498 9644 498 9645 498 9646 498 9647 258 9648 258 9649 258 9650 258 9651 562 9652 577 9653 564 9654 564 9655 564 9656 564 9657 564 9658 677 9659 572 9660 572 9661 572 9662 572 9663 487 9664 573 9665 487 9666 509 9667 562 9668 557 9669 446 9670 409 9671 735 9672 448 9673 546 9674 546 9675 726 9676 241 9677 432 9678 629 9679 868 9680 868 9681 566 9682 258 9683 572 9684 498 9685 564 9686 620 9687 269 9688 663 9689 511 9690 709 9691 840 9692 840 9693 840 9694 840 9695 840 9696 840 9697 362 9698 361 9699 355 9700 361 9701 354 9702 363 9703 360 9704 362 9705 343 9706 358 9707 354 9708 361 9709 355 9710 362 9711 354 9712 363 9713 360 9714 620 9715 511 9716 511 9717 511 9718 269 9719 269 9720 269 9721 709 9722 709 9723 663 9724 663 9725 663 9726 566 9727 498 9728 498 9729 498 9730 258 9731 258 9732 258 9733 564 9734 564 9735 572 9736 572 9737 572 9738 250 9739 250 9740 250 9741 250 9742 250 9743 250 9744 250 9745 250 9746 250 9747 250 9748 250 9749 250 9750 250 9751 250 9752 250 9753 250 9754 250 9755 250 9756 250 9757 250 9758 333 9759 333 9760 333 9761 333 9762 333 9763 333 9764 333 9765 333 9766 333 9767 333 9768 333 9769 333 9770 333 9771 333 9772 333 9773 333 9774 333 9775 333 9776 333 9777 333 9778 333 12063 500 12064 500 12065 500 12066 500 12067 500 12068 500 12069 500 12070 500 12071 500 12072 500 12073 500 12074 500 12075 500 12076 500 12077 500 12078 500 12079 500 12080 500 12081 500 12082 500 12083 500 12084 500 12085 500 12086 500 12087 500 15455 980 15456 676 15457 676 15458 676 15459 750 15460 676 15461 865 15464 676 15465 676 15466 676 15467 676 15468 676 15469 676 15470 677 15471 677 15472 676 15473 676 15474 676 15475 676 15476 676 15477 677 15478 676 15479 676 15480 649 15481 652 15482 840 15483 890 15484 675 15485 540 15486 677 15487 677 15488 677 15489 608 15490 608 15491 659 15492 675 15493 579 15494 623 15495 676 15496 676 15497 737 15498 737 15499 658 15500 750 15501 725 15502 676 15503 372 15504 609 15505 676 15506 676 15507 676 15508 676 15509 676 15510 676 15511 810 15512 676 15513 722 15514 619 15515 753 15516 343 15517 810 15518 940 15519 880 15520 990 15521 690 15522 810 15523 750 15524 870 15525 880 15526 990 15529 910 15530 940 15531 750 15532 870 15533 960 15534 980 15535 810 15536 910 15537 890 15538 950 15539 880 15540 880 15541 970 15542 970 15543 980 15544 990 15545 960 15546 980 15547 960 15548 970 15549 910 15550 940 15551 860 15552 990 15553 990 15554 920 15555 940 15556 840 15557 870 15558 970 15559 960 15560 980 15561 990 15562 980 15563 980 15564 980 15565 980 15566 980 15567 980 15568 980 15569 980 15570 980 15571 980 15575 980 15576 990 15577 990 15578 880 15579 990 15580 990 15581 980 15582 880 15583 880 15584 980 15585 890 15586 990 15587 790 15588 870 15589 850 15590 790 15591 880 15592 990 15593 870 15594 870 15595 980 15596 980 15597 980 15598 960 15599 970 15601 910 15602 850 15604 980 15605 950 15607 960 15608 780 15609 930 15610 760 15611 920 15612 800 15613 910 15614 850 15615 980 15616 820 15617 950 15618 920 15619 950 15620 970 15621 970 15622 840 15623 910 15624 930 15625 950 15626 930 15627 950 15628 980 15629 980 15630 950 15631 960 15632 940 15633 970 15634 980 15635 990 15636 920 15637 950 15638 890 15639 940 15640 980 15641 990 15642 820 15643 940 15644 960 15645 960 15646 980 15647 780 15648 810 15649 940 15650 980 15651 840 15652 970 15653 850 15654 990 15655 990 15656 990 15657 870 15658 910 15659 900 15660 920 15661 950 15662 950 15663 980 15664 980 15665 980 15666 980 15667 980 15668 980 15669 980 15670 820 15671 950 15672 840 15673 980 15674 830 15675 970 15676 850 15677 990 15678 750 15679 840 15680 900 15681 790 15682 990 15683 920 15684 940 15685 780 15686 910 15687 980 15688 980 15689 850 15690 920 15691 960 15692 830 15693 840 15694 980 15696 960 15697 990 15698 960 15699 990 15700 990 15701 880 15702 710 15703 760 15704 750 15705 620 15706 720 15707 820 15708 730 15709 680 15710 790 15711 750 15712 760 15713 760 15714 700 15715 680 15716 750 15717 680 15718 740 15725 676 15726 676 15727 826 15728 816 15729 871 15730 901 15731 707 15732 601 15733 597 15734 597 15735 597 15736 597 15737 660 15738 340 15739 514 15740 539 15741 538 15742 541 15743 584 15744 584 15745 532 15746 340 15747 276 15748 433 15749 340 15750 433 15751 377 15752 468 15753 340 15754 468 15755 595 15756 660 15757 514 15758 609 15759 609 15760 535 15761 708 15762 707 15763 707 15764 727 15765 595 15766 695 15767 541 15768 367 15769 532 15770 264 15771 472 15772 472 15773 543 15774 619 15775 607 15776 601 15777 601 15778 589 15779 366 15780 597 15781 369 15782 340 15783 609 15784 689 15785 703 15786 405 15787 538 15788 695 15789 472 15790 602 15791 601 15792 276 15793 433 15794 597 15795 901 15796 548 15797 358 15798 371 15799 606 15800 366 15801 369 15802 607 15803 601 15804 390 15805 433 15806 468 15807 366 15808 268 15809 416 15810 601 15811 299 15812 518 15813 602 15814 901 15815 551 15816 601 15817 435 15818 418 15819 601 15820 591 15821 535 15822 612 15823 607 15824 274 15825 602 15826 559 15827 265 15828 593 15829 543 15830 479 15831 587 15832 532 15833 901 15834 568 15835 515 15836 591 15837 800 15838 601 15839 416 15840 422 15841 521 15842 567 15843 366 15844 601 15845 0 15846 340 15847 340 15848 336 15849 567 15850 340 15851 524 15852 524 15853 524 15854 524 15855 524 15856 478 15857 478 15858 0 15859 0 15860 0 15861 0 15862 0 15863 0 15864 0 15865 0 15866 0 15867 446 15868 0 15869 0 15870 0 15871 0 15872 0 15873 0 15874 0 15875 0 15876 0 15877 0 15878 0 15879 0 15880 372 15881 695 15882 645 15883 547 15884 511 15885 265 15886 604 15887 750 15888 712 15889 551 15890 575 15891 557 15892 594 15893 428 15894 401 15895 214 15896 578 15897 325 15898 371 15899 189 15900 574 15901 588 15902 846 15903 676 15904 676 15905 677 15906 677 15907 677 15908 401 15909 604 15910 579 15911 503 15912 724 15913 373 15914 803 15915 846 15916 870 15917 683 15918 578 15919 574 15920 574 15921 574 15922 574 15923 620 15924 483 15925 509 15926 509 15927 518 15928 556 15929 556 15930 566 15931 264 15932 411 15933 411 15934 346 15935 449 15936 449 15937 580 15938 620 15939 483 15940 586 15941 586 15942 516 15943 690 15944 683 15945 683 15946 709 15947 580 15948 669 15949 518 15950 359 15951 566 15952 258 15953 449 15954 449 15955 499 15956 579 15957 570 15958 578 15959 578 15960 565 15961 359 15962 574 15963 346 15964 586 15965 671 15966 679 15967 395 15968 509 15969 669 15970 449 15971 567 15972 578 15973 264 15974 411 15975 574 20317 344 20318 422 20319 397 20320 383 20322 715 20323 709 20324 680 20325 514 20326 707 20327 541 20328 540 20329 524 20330 325 20331 601 20332 369 20333 609 20334 535 20335 689 20336 689 20337 689 20338 276 20339 276 20340 600 20341 514 20342 514 20343 707 20344 595 20345 695 20346 695 20347 695 20348 695 20349 695 20350 921 20351 591 20352 472 20353 543 20354 602 20355 602 20356 602 20357 265 20358 524 20359 268 20360 264 20361 601 20362 367 20363 597 20364 800 20365 518 20366 927 20367 623 20368 669 20369 676 20370 676 20371 594 20372 398 20373 422 20374 390 20375 396 20376 964 20377 699 20378 679 20379 663 20380 486 20381 682 20382 518 20383 517 20384 509 20385 319 20386 578 20387 346 20388 586 20389 516 20390 671 20391 671 20392 671 20393 270 20394 270 20395 574 20396 483 20397 483 20398 683 20399 580 20400 669 20401 669 20402 669 20403 669 20404 669 20405 901 20406 566 20407 449 20408 499 20409 567 20410 567 20411 567 20412 258 20413 508 20414 258 20415 258 20416 578 20417 359 20418 574 20419 770 20420 489 20421 927 20422 644 20423 669 20424 676 20425 676 20426 594
diff --git a/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/KozMinPr6N-Regular.properties b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/KozMinPr6N-Regular.properties
new file mode 100644
index 0000000..e9ec36e
--- /dev/null
+++ b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/KozMinPr6N-Regular.properties
@@ -0,0 +1,12 @@
+Name=KozMinPr6N-Regular
+CIDSystemInfo=Adobe-Japan1-6
+Encoding=UniJIS-UTF16-H
+ItalicAngle=0
+Flags=6
+StemV=80
+FontBBox=[-437 -340 1147 1317]
+Ascent=880
+Descent=-120
+CapHeight=742
+DW=1000
+W=0 0 1 278 2 299 3 353 4 614 5 614 6 721 7 735 8 216 9 323 10 323 11 449 12 529 13 219 14 306 15 219 16 453 17 614 18 614 19 614 20 614 21 614 22 614 23 614 24 614 25 614 26 614 27 219 28 219 29 529 30 529 31 529 32 486 33 744 34 646 35 604 36 617 37 681 38 567 39 537 40 647 41 738 42 320 43 433 44 637 45 566 46 904 47 710 48 716 49 605 50 716 51 623 52 517 53 601 54 690 55 668 56 990 57 681 58 634 59 578 60 316 61 614 62 316 63 529 64 500 65 387 66 509 67 566 68 478 69 565 70 503 71 337 72 549 73 580 74 275 75 266 76 544 77 276 78 854 79 579 80 550 81 578 82 566 83 410 84 444 85 340 86 575 87 512 88 760 89 503 90 529 91 453 92 326 93 380 94 326 95 387 96 216 97 453 98 216 99 380 100 529 101 299 102 614 103 614 104 265 105 614 106 475 107 614 108 353 109 451 110 291 111 291 112 588 113 589 114 500 115 476 116 476 117 219 118 494 119 452 120 216 121 353 122 353 123 451 125 1075 126 486 127 387 128 387 129 387 130 387 131 387 132 387 133 387 134 387 135 387 136 387 137 387 139 880 140 448 141 566 142 716 143 903 144 460 145 805 146 275 147 276 148 550 149 886 150 582 151 529 152 738 153 529 154 738 155 357 156 529 157 406 158 406 159 575 160 406 161 934 162 934 163 934 164 646 165 646 166 646 167 646 168 646 169 646 170 617 171 567 172 567 173 567 174 567 175 320 176 320 177 320 178 320 179 681 180 710 181 716 182 716 183 716 184 716 185 716 186 529 187 690 188 690 189 690 190 690 191 634 192 605 193 509 194 509 195 509 196 509 197 509 198 509 199 478 200 503 201 503 202 503 203 503 204 275 205 275 206 275 207 275 208 550 209 579 210 550 211 550 212 550 213 550 214 550 215 529 216 575 217 575 218 575 219 575 220 529 221 578 222 529 223 517 224 634 225 578 226 445 227 444 228 842 229 453 230 614 231 500 232 500 233 500 234 500 235 500 236 500 237 500 238 500 239 500 240 500 241 500 242 500 243 500 244 500 245 500 246 500 247 500 248 500 249 500 250 500 251 500 252 500 253 500 254 500 255 500 256 500 257 500 258 500 259 500 260 500 261 500 262 500 263 500 264 500 265 500 266 500 267 500 268 500 269 500 270 500 271 500 272 500 273 500 274 500 275 500 276 500 277 500 278 500 279 500 280 500 281 500 282 500 283 500 284 500 285 500 286 500 287 500 288 500 289 500 290 500 291 500 292 500 293 500 294 500 295 500 296 500 297 500 298 500 299 500 300 500 301 500 302 500 303 500 304 500 305 500 306 500 307 500 308 500 309 500 310 500 311 500 312 500 313 500 314 500 315 500 316 500 317 500 318 500 319 500 320 500 321 500 322 500 323 500 324 500 325 500 326 500 327 500 328 500 329 500 330 500 331 500 332 500 333 500 334 500 335 500 336 500 337 500 338 500 339 500 340 500 341 500 342 500 343 500 344 500 345 500 346 500 347 500 348 500 349 500 350 500 351 500 352 500 353 500 354 500 355 500 356 500 357 500 358 500 359 500 360 500 361 500 362 500 363 500 364 500 365 500 366 500 367 500 368 500 369 500 370 500 371 500 372 500 373 500 374 500 375 500 376 500 377 500 378 500 379 500 380 500 381 500 382 500 383 500 384 500 385 500 386 500 387 500 388 500 389 500 390 500 391 500 392 500 393 500 394 500 395 500 396 500 397 500 398 500 399 500 400 500 401 500 402 500 403 500 404 500 405 500 406 500 407 500 408 500 409 500 410 500 411 500 412 500 413 500 414 500 415 500 416 500 417 500 418 500 419 500 420 500 421 500 422 500 423 500 424 500 425 500 426 500 427 500 428 500 429 500 430 500 431 500 432 500 433 500 434 500 435 500 436 500 437 500 438 500 439 500 440 500 441 500 442 500 443 500 444 500 445 500 446 500 447 500 448 500 449 500 450 500 451 500 452 500 453 500 454 500 455 500 456 500 457 500 458 500 459 500 460 500 461 500 462 500 463 500 464 500 465 500 466 500 467 500 468 500 469 500 470 500 471 500 472 500 473 500 474 500 475 500 476 500 477 500 478 500 479 500 480 500 481 500 482 500 483 500 484 500 485 500 486 500 487 500 488 500 489 500 490 500 491 500 492 500 493 500 494 500 495 500 496 500 497 500 498 500 499 500 500 500 501 500 502 500 503 500 504 500 505 500 506 500 507 500 508 500 509 500 510 500 511 500 512 500 513 500 514 500 515 500 516 500 517 500 518 500 519 500 520 500 521 500 522 500 523 500 524 500 525 500 526 500 527 500 528 500 529 500 530 500 531 500 532 500 533 500 534 500 535 500 536 500 537 500 538 500 539 500 540 500 541 500 542 500 543 500 544 500 545 500 546 500 547 500 548 500 549 500 550 500 551 500 552 500 553 500 554 500 555 500 556 500 557 500 558 500 559 500 560 500 561 500 562 500 563 500 564 500 565 500 566 500 567 500 568 500 569 500 570 500 571 500 572 500 573 500 574 500 575 500 576 500 577 500 578 500 579 500 580 500 581 500 582 500 583 500 584 500 585 500 586 500 587 500 588 500 589 500 590 500 591 500 592 500 593 500 594 500 595 500 596 500 597 500 598 500 599 500 600 500 601 500 602 500 603 500 604 500 605 500 606 500 607 500 608 500 609 500 610 500 611 500 612 500 613 500 614 500 615 500 616 500 617 500 618 500 619 500 620 500 621 500 622 500 623 500 624 500 625 500 626 500 627 500 628 500 629 500 630 500 631 500 632 500 8718 500 8719 500 9354 614 9355 684 9356 216 9357 353 9358 648 9359 899 9360 903 9361 509 9362 275 9363 575 9364 503 9365 550 9366 646 9367 320 9368 690 9369 567 9370 716 9371 934 9372 934 9373 934 9374 934 9375 934 9376 934 9377 426 9378 426 9379 426 9380 426 9381 426 9382 426 9383 426 9384 426 9385 425 9386 425 9387 425 9388 439 9389 426 9390 426 9391 426 9392 426 9393 426 9394 646 9395 567 9396 567 9397 567 9398 320 9399 320 9400 320 9401 716 9402 716 9403 690 9404 690 9405 690 9406 509 9407 503 9408 503 9409 503 9410 275 9411 275 9412 275 9413 550 9414 550 9415 575 9416 575 9417 575 9418 513 9419 513 9420 513 9421 805 9422 805 9423 478 9424 478 9425 478 9426 503 9427 503 9428 503 9429 735 9430 735 9431 735 9432 426 9433 426 9434 426 9435 266 9436 578 9437 550 9438 512 9439 512 9440 512 9441 640 9442 594 9443 284 9444 257 9445 281 9446 288 9447 546 9448 546 9449 703 9450 705 9451 160 9452 312 9453 305 9454 389 9455 545 9456 200 9457 309 9458 200 9459 438 9460 546 9461 546 9462 546 9463 546 9464 546 9465 546 9466 546 9467 546 9468 546 9469 546 9470 200 9471 200 9472 545 9473 545 9474 545 9475 471 9476 744 9477 607 9478 572 9479 563 9480 650 9481 550 9482 516 9483 622 9484 696 9485 312 9486 314 9487 603 9488 524 9489 848 9490 665 9491 644 9492 561 9493 645 9494 583 9495 491 9496 566 9497 643 9498 581 9499 872 9500 616 9501 537 9502 516 9503 312 9504 546 9505 312 9506 472 9507 464 9508 400 9509 548 9510 530 9511 447 9512 558 9513 460 9514 301 9515 486 9516 564 9517 283 9518 258 9519 509 9520 265 9521 834 9522 578 9523 521 9524 554 9525 551 9526 390 9527 410 9528 335 9529 565 9530 476 9531 717 9532 525 9533 464 9534 456 9535 312 9536 339 9537 312 9538 400 9539 179 9540 422 9541 177 9542 339 9543 545 9544 281 9545 546 9546 546 9547 248 9548 546 9549 491 9550 570 9551 310 9552 440 9553 278 9554 279 9555 556 9556 563 9557 586 9558 403 9559 403 9560 207 9561 500 9562 440 9563 170 9564 307 9565 310 9566 440 9567 786 9568 1009 9569 471 9570 367 9571 400 9572 400 9573 400 9574 400 9575 400 9576 400 9577 364 9578 400 9579 365 9580 400 9581 1012 9582 849 9583 394 9584 544 9585 644 9586 889 9587 377 9588 744 9589 283 9590 285 9591 521 9592 808 9593 545 9594 504 9595 703 9596 545 9597 703 9598 324 9599 504 9600 397 9601 397 9602 557 9603 397 9604 859 9605 859 9606 859 9607 607 9608 607 9609 607 9610 607 9611 607 9612 607 9613 562 9614 550 9615 550 9616 550 9617 550 9618 312 9619 312 9620 312 9621 312 9622 662 9623 665 9624 644 9625 644 9626 644 9627 644 9628 644 9629 497 9630 643 9631 643 9632 643 9633 643 9634 537 9635 576 9636 548 9637 548 9638 548 9639 548 9640 548 9641 548 9642 446 9643 460 9644 460 9645 460 9646 460 9647 283 9648 283 9649 283 9650 283 9651 522 9652 578 9653 521 9654 521 9655 521 9656 521 9657 521 9658 545 9659 565 9660 565 9661 565 9662 565 9663 464 9664 540 9665 464 9666 491 9667 537 9668 516 9669 418 9670 410 9671 842 9672 456 9673 546 9674 563 9675 627 9676 196 9677 289 9678 560 9679 828 9680 835 9681 548 9682 283 9683 565 9684 460 9685 521 9686 607 9687 312 9688 643 9689 550 9690 644 9691 859 9692 859 9693 859 9694 859 9695 859 9696 859 9697 397 9698 397 9699 397 9700 397 9701 397 9702 397 9703 397 9704 397 9705 397 9706 397 9707 397 9708 397 9709 397 9710 397 9711 397 9712 397 9713 397 9714 607 9715 550 9716 550 9717 550 9718 312 9719 312 9720 312 9721 644 9722 644 9723 643 9724 643 9725 643 9726 548 9727 460 9728 460 9729 460 9730 283 9731 283 9732 283 9733 521 9734 521 9735 565 9736 565 9737 565 9738 250 9739 250 9740 250 9741 250 9742 250 9743 250 9744 250 9745 250 9746 250 9747 250 9748 250 9749 250 9750 250 9751 250 9752 250 9753 250 9754 250 9755 250 9756 250 9757 250 9758 333 9759 333 9760 333 9761 333 9762 333 9763 333 9764 333 9765 333 9766 333 9767 333 9768 333 9769 333 9770 333 9771 333 9772 333 9773 333 9774 333 9775 333 9776 333 9777 333 9778 333 12063 500 12064 500 12065 500 12066 500 12067 500 12068 500 12069 500 12070 500 12071 500 12072 500 12073 500 12074 500 12075 500 12076 500 12077 500 12078 500 12079 500 12080 500 12081 500 12082 500 12083 500 12084 500 12085 500 12086 500 12087 500 15449 670 15450 810 15451 640 15452 760 15455 980 15456 529 15457 529 15458 529 15459 619 15460 529 15461 891 15464 529 15465 529 15466 529 15467 529 15468 534 15469 534 15470 566 15471 566 15472 530 15473 529 15474 529 15475 529 15476 529 15477 581 15478 529 15479 529 15480 533 15481 533 15482 738 15483 853 15484 676 15485 533 15486 882 15487 882 15488 882 15489 716 15490 716 15491 600 15492 529 15493 589 15494 688 15495 529 15496 529 15497 559 15498 559 15499 594 15500 619 15501 522 15502 529 15503 468 15504 721 15505 529 15506 529 15507 529 15508 525 15509 529 15510 529 15511 661 15512 529 15513 660 15514 564 15515 684 15516 500 15517 790 15518 940 15519 870 15521 630 15522 740 15523 740 15524 900 15525 840 15526 980 15529 900 15530 940 15531 710 15532 870 15533 970 15535 820 15536 930 15537 840 15538 940 15539 850 15540 850 15541 960 15542 960 15545 960 15546 980 15547 940 15548 970 15549 910 15550 950 15551 870 15552 980 15553 980 15554 910 15555 930 15556 820 15557 850 15558 980 15559 950 15562 970 15563 980 15564 980 15565 980 15575 980 15576 990 15577 990 15578 880 15581 960 15582 850 15583 860 15585 840 15586 950 15587 740 15588 870 15589 830 15590 760 15591 890 15592 990 15593 900 15594 870 15595 990 15596 970 15597 980 15598 950 15599 960 15601 850 15602 830 15603 950 15604 930 15605 810 15606 980 15607 910 15608 780 15609 890 15610 760 15611 880 15612 790 15613 870 15614 830 15615 980 15616 830 15617 900 15618 900 15619 950 15620 940 15621 950 15622 820 15623 910 15624 930 15625 960 15626 880 15627 930 15628 960 15629 980 15630 920 15631 940 15632 920 15633 950 15634 970 15635 980 15636 890 15637 930 15638 860 15639 930 15640 960 15641 990 15642 820 15643 920 15644 960 15645 930 15646 970 15647 760 15648 780 15649 920 15650 970 15651 830 15652 950 15653 830 15654 990 15655 990 15656 990 15657 840 15658 890 15659 890 15660 900 15661 940 15662 940 15663 980 15664 980 15665 980 15666 970 15667 970 15668 970 15669 960 15670 800 15671 950 15672 820 15673 960 15674 810 15675 950 15676 810 15677 990 15678 730 15679 850 15680 880 15681 760 15682 990 15683 910 15684 920 15685 770 15686 870 15687 970 15688 980 15689 840 15690 920 15691 950 15692 810 15693 800 15694 940 15695 950 15696 900 15697 960 15698 910 15699 960 15700 960 15701 750 15702 740 15703 860 15704 850 15705 640 15706 690 15707 900 15708 750 15709 740 15710 840 15711 770 15712 800 15713 790 15714 730 15715 640 15716 860 15717 760 15718 790 15723 770 15724 780 15725 529 15726 529 15727 934 15728 841 15729 904 15730 854 15731 710 15732 579 15733 575 15734 575 15735 575 15736 575 15737 646 15738 387 15739 566 15740 517 15741 517 15742 601 15743 578 15744 578 15745 509 15746 387 15747 313 15748 444 15749 387 15750 444 15751 340 15752 453 15753 387 15754 453 15755 623 15756 646 15757 566 15758 617 15759 617 15760 567 15761 681 15762 710 15763 710 15764 716 15765 623 15766 690 15767 601 15768 410 15769 509 15770 276 15771 478 15772 478 15773 503 15774 605 15775 565 15776 579 15777 579 15778 550 15779 410 15780 575 15781 340 15782 387 15783 617 15784 647 15785 738 15786 433 15787 517 15788 690 15789 478 15790 549 15791 580 15792 266 15793 444 15794 575 15795 846 15796 524 15797 396 15798 341 15799 565 15800 408 15801 291 15802 560 15803 574 15804 410 15805 444 15806 453 15807 383 15808 262 15809 266 15810 579 15811 261 15812 519 15813 563 15814 854 15815 555 15816 580 15817 370 15818 370 15819 580 15820 716 15821 405 15822 566 15823 565 15824 280 15825 566 15826 650 15827 275 15828 575 15829 503 15830 426 15831 505 15832 509 15833 854 15834 551 15835 546 15836 534 15837 760 15838 576 15839 370 15840 370 15841 494 15842 506 15843 389 15844 578 15845 0 15846 234 15847 234 15848 282 15849 523 15850 387 15851 405 15852 405 15853 405 15854 405 15855 405 15856 405 15857 405 15858 0 15859 0 15860 0 15861 0 15862 0 15863 0 15864 0 15865 0 15866 0 15867 373 15868 0 15869 0 15870 0 15871 0 15872 0 15873 0 15874 0 15875 0 15876 0 15877 0 15878 0 15879 0 15880 468 15881 624 15882 624 15883 541 15884 484 15885 367 15886 580 15887 738 15888 635 15889 555 15890 505 15891 546 15892 598 15893 500 15894 447 15895 290 15896 474 15897 310 15898 331 15899 220 15900 466 15901 632 15902 976 15903 529 15904 529 15905 882 15906 882 15907 882 15908 446 15909 526 15910 544 15911 431 15912 627 15913 500 15914 859 15915 848 15916 834 15917 665 15918 578 15919 565 15920 565 15921 565 15922 565 15923 607 15924 524 15925 491 15926 491 15927 566 15928 516 15929 516 15930 548 15931 265 15932 410 15933 410 15934 335 15935 456 15936 456 15937 583 15938 607 15939 524 15940 563 15941 563 15942 550 15943 650 15944 665 15945 665 15946 644 15947 583 15948 643 15949 566 15950 390 15951 548 15952 265 15953 447 15954 447 15955 460 15956 558 15957 558 15958 578 15959 578 15960 521 15961 390 15962 565 15963 335 15964 563 15965 622 15966 696 15967 314 15968 491 15969 643 15970 447 15971 486 15972 564 15973 258 15974 410 15975 565 20317 387 20318 387 20319 460 20320 448 20321 814 20322 681 20323 738 20324 748 20325 566 20326 694 20327 601 20328 523 20329 544 20330 310 20331 579 20332 340 20333 617 20334 567 20335 647 20336 647 20337 647 20338 320 20339 320 20340 637 20341 566 20342 566 20343 710 20344 623 20345 690 20346 690 20347 690 20348 690 20349 690 20350 990 20351 634 20352 478 20353 503 20354 549 20355 549 20356 549 20357 275 20358 544 20359 276 20360 276 20361 579 20362 410 20363 575 20364 760 20365 529 20366 905 20367 670 20368 730 20369 588 20370 588 20371 588 20372 400 20373 400 20374 377 20375 394 20376 739 20377 662 20378 696 20379 626 20380 524 20381 632 20382 566 20383 541 20384 509 20385 281 20386 578 20387 335 20388 563 20389 550 20390 622 20391 622 20392 622 20393 312 20394 312 20395 603 20396 524 20397 524 20398 665 20399 583 20400 643 20401 643 20402 643 20403 643 20404 643 20405 872 20406 537 20407 447 20408 460 20409 486 20410 486 20411 486 20412 283 20413 509 20414 265 20415 265 20416 578 20417 390 20418 565 20419 717 20420 464 20421 1010 20422 602 20423 744 20424 545 20425 545 20426 643
diff --git a/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/supported_fonts.properties b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/supported_fonts.properties
new file mode 100644
index 0000000..aace66b
--- /dev/null
+++ b/pdfbox/src/main/resources/org/apache/pdfbox/resources/cjk/supported_fonts.properties
@@ -0,0 +1,8 @@
+KozGoPr6N-Medium=gothic
+KozMinPr6N-Regular=mincho
+AdobeHeitiStd-Regular=gothic
+AdobeSongStd-Light=mincho
+AdobeFanHeitiStd-Bold=gothic
+AdobeMingStd-Light=mincho
+AdobeGothicStd-Bold=gothic
+AdobeMyungjoStd-Medium=mincho
diff --git a/pdfbox/src/test/java/org/apache/pdfbox/util/TestDateUtil.java b/pdfbox/src/test/java/org/apache/pdfbox/util/TestDateUtil.java
index 591c5e6..ce64ef8 100644
--- a/pdfbox/src/test/java/org/apache/pdfbox/util/TestDateUtil.java
+++ b/pdfbox/src/test/java/org/apache/pdfbox/util/TestDateUtil.java
@@ -371,7 +371,7 @@ public class TestDateUtil extends TestCase
         checkParseTZ(-(3*HRS+0*MINS), "GMT-0300");
         checkParseTZ(+(11*HRS+0*MINS), "GMT+11:00");
         checkParseTZ(-(6*HRS+0*MINS), "America/Chicago");
-        checkParseTZ(+(4*HRS+0*MINS), "Europe/Moscow");
+        checkParseTZ(+(3*HRS+0*MINS), "Europe/Moscow");
         checkParseTZ((5*HRS+0*MINS), "0500");
         checkParseTZ((5*HRS+0*MINS), "+0500");
         checkParseTZ((11*HRS+0*MINS), "+11'00'");
