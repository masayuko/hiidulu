diff --git a/src/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpServletRequest.java b/src/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpServletRequest.java
index 77e3ff9..508e062 100755
--- a/src/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpServletRequest.java
+++ b/src/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockHttpServletRequest.java
@@ -38,6 +38,7 @@ import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Locale;
+import java.util.Collection;
 import java.util.Map;
 
 import javax.servlet.RequestDispatcher;
@@ -46,6 +47,13 @@ import javax.servlet.ServletInputStream;
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpSession;
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.Part;
+import javax.servlet.AsyncContext;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.DispatcherType;
+import javax.servlet.ServletException;
 
 import org.apache.wicket.Application;
 import org.apache.wicket.WicketRuntimeException;
@@ -63,7 +71,6 @@ import org.apache.wicket.util.value.ValueMap;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-
 /**
  * Mock servlet request. Implements all of the methods from the standard HttpServletRequest class
  * plus helper methods to aid setting up a request.
@@ -1740,8 +1747,7 @@ public class MockHttpServletRequest implements HttpServletRequest
 	// @formatter:off
 	/* TODO JAVA6,SERVLET3.0
 	 * servlet 3.0 stuff
-	 * 
-	
+	 */
 	public AsyncContext startAsync() throws IllegalStateException
 	{
 		return null;
@@ -1795,6 +1801,5 @@ public class MockHttpServletRequest implements HttpServletRequest
 	{
 		return null;
 	}
-	*/
 	// @formatter:on
 }
diff --git a/src/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockServletContext.java b/src/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockServletContext.java
index 392e921..dfd1bf7 100755
--- a/src/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockServletContext.java
+++ b/src/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/MockServletContext.java
@@ -27,6 +27,8 @@ import java.util.Collections;
 import java.util.Enumeration;
 import java.util.HashSet;
 import java.util.Set;
+import java.util.Map;
+import java.util.EventListener;
 
 import javax.servlet.RequestDispatcher;
 import javax.servlet.Servlet;
@@ -34,6 +36,13 @@ import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
 import javax.servlet.ServletRequest;
 import javax.servlet.ServletResponse;
+import javax.servlet.ServletRegistration;
+import javax.servlet.ServletRegistration.Dynamic;
+import javax.servlet.Filter;
+import javax.servlet.FilterRegistration;
+import javax.servlet.SessionCookieConfig;
+import javax.servlet.SessionTrackingMode;
+import javax.servlet.descriptor.JspConfigDescriptor;
 
 import org.apache.wicket.Application;
 import org.apache.wicket.util.value.ValueMap;
@@ -567,7 +576,7 @@ public class MockServletContext implements ServletContext
 	// @formatter:off
 	/* TODO JAVA6,SERVLET3.0
 	 * servlet 3.0 stuff
-	 * 
+	 */
 	public int getEffectiveMajorVersion()
 	{
 		return 0;
@@ -693,6 +702,5 @@ public class MockServletContext implements ServletContext
 	public void declareRoles(String... roleNames)
 	{
 	}
-	*/
 	// @formatter:on
 }
diff --git a/src/wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/XForwardedRequestWrapper.java b/src/wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/XForwardedRequestWrapper.java
index ee23c1f..c0a4d2b 100644
--- a/src/wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/XForwardedRequestWrapper.java
+++ b/src/wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/XForwardedRequestWrapper.java
@@ -153,7 +153,7 @@ public class XForwardedRequestWrapper extends HttpServletRequestWrapper
 	 * @see javax.servlet.http.HttpServletRequestWrapper#getHeaderNames()
 	 */
 	@Override
-	public Enumeration<?> getHeaderNames()
+	public Enumeration<String> getHeaderNames()
 	{
 		return Collections.enumeration(headers.keySet());
 	}
@@ -162,12 +162,12 @@ public class XForwardedRequestWrapper extends HttpServletRequestWrapper
 	 * @see javax.servlet.http.HttpServletRequestWrapper#getHeaders(java.lang.String)
 	 */
 	@Override
-	public Enumeration<?> getHeaders(final String name)
+	public Enumeration<String> getHeaders(final String name)
 	{
 		Map.Entry<String, List<String>> header = getHeaderEntry(name);
 		if (header == null || header.getValue() == null)
 		{
-			return Collections.enumeration(Collections.emptyList());
+			return Collections.enumeration(Collections.<String>emptyList());
 		}
 		else
 		{
