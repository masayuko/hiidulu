diff -uNr javacc/src/org/javacc/jjdoc/JJDocMain.java javacc-cvs/src/org/javacc/jjdoc/JJDocMain.java
--- javacc/src/org/javacc/jjdoc/JJDocMain.java	2008-02-05 01:25:42.000000000 +0900
+++ javacc-cvs/src/org/javacc/jjdoc/JJDocMain.java	2009-02-18 04:53:07.000000000 +0900
@@ -144,7 +144,7 @@
            return 1;
         }
         JJDocGlobals.input_file = fp.getName();
-        parser = new JavaCCParser(new java.io.FileReader(args[args.length-1]));
+        parser = new JavaCCParser(new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(args[args.length-1]), JJDocOptions.getGrammarEncoding())));
       } catch (SecurityException se) {
         error("Security violation while trying to open " + args[args.length-1]);
         return 1;
diff -uNr javacc/src/org/javacc/jjtree/IO.java javacc-cvs/src/org/javacc/jjtree/IO.java
--- javacc/src/org/javacc/jjtree/IO.java	2007-03-12 23:45:17.000000000 +0900
+++ javacc-cvs/src/org/javacc/jjtree/IO.java	2009-02-18 04:53:07.000000000 +0900
@@ -30,6 +30,9 @@
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileReader;
+import java.io.InputStreamReader;
+import java.io.BufferedReader;
+import java.io.FileInputStream;
 import java.io.FileWriter;
 import java.io.IOException;
 import java.io.PrintStream;
@@ -150,7 +153,7 @@
       }
       ifn = fp.getPath();
 
-      in = new FileReader(ifn);
+      in = new BufferedReader(new InputStreamReader(new FileInputStream(ifn), JJTreeOptions.getGrammarEncoding()));
 
     } catch (NullPointerException ne) { // Should never happen
       throw new JJTreeIOException(ne.toString());
diff -uNr javacc/src/org/javacc/jjtree/JJTree.jjt javacc-cvs/src/org/javacc/jjtree/JJTree.jjt
--- javacc/src/org/javacc/jjtree/JJTree.jjt	2008-08-19 09:10:29.000000000 +0900
+++ javacc-cvs/src/org/javacc/jjtree/JJTree.jjt	2009-01-19 08:25:54.000000000 +0900
@@ -380,6 +380,9 @@
 	}
 {
   [ LOOKAHEAD( { getToken(1).image.equals("options") }) ( <IDENTIFIER> "{" ( option_binding() )* "}" ) #Options ]
+	{
+	  JJTreeOptions.normalize();
+	}
 }
 
 void option_binding() #OptionBinding :
diff -uNr javacc/src/org/javacc/parser/Main.java javacc-cvs/src/org/javacc/parser/Main.java
--- javacc/src/org/javacc/parser/Main.java	2008-10-07 02:17:33.000000000 +0900
+++ javacc-cvs/src/org/javacc/parser/Main.java	2009-02-18 04:53:08.000000000 +0900
@@ -83,6 +83,7 @@
     System.out.println("    TOKEN_EXTENDS          (default java.lang.Object)");
     System.out.println("    TOKEN_FACTORY          (default none)");
     System.out.println("    JDK_VERSION            (default 1.5)");
+    System.out.println("    GRAMMAR_ENCODING       (defaults to platform file encoding)");
     System.out.println("");
     System.out.println("EXAMPLE:");
     System.out.println("    javacc -STATIC=false -LOOKAHEAD:2 -debug_parser mygrammar.jj");
@@ -140,7 +141,7 @@
          System.out.println(args[args.length-1] + " is a directory. Please use a valid file name.");
          return 1;
       }
-      parser = new JavaCCParser(new java.io.FileReader(args[args.length-1]));
+      parser = new JavaCCParser(new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(args[args.length-1]), Options.getGrammarEncoding())));
     } catch (SecurityException se) {
       System.out.println("Security violation while trying to open " + args[args.length-1]);
       return 1;
diff -uNr javacc/src/org/javacc/parser/Options.java javacc-cvs/src/org/javacc/parser/Options.java
--- javacc/src/org/javacc/parser/Options.java	2008-10-01 06:19:32.000000000 +0900
+++ javacc-cvs/src/org/javacc/parser/Options.java	2009-02-18 04:53:08.000000000 +0900
@@ -135,6 +135,7 @@
     optionValues.put("JDK_VERSION", "1.4");
     optionValues.put("TOKEN_EXTENDS", "");
     optionValues.put("TOKEN_FACTORY", "");
+    optionValues.put("GRAMMAR_ENCODING", "");
   }
 
   /**
@@ -334,7 +335,7 @@
     cmdLineSetting.add(name);
   }
 
-  static void normalize() {
+  public static void normalize() {
     if (getDebugLookahead() && !getDebugParser()) {
       if (cmdLineSetting.contains("DEBUG_PARSER")
           || inputFileSetting.contains("DEBUG_PARSER")) {
@@ -626,6 +627,20 @@
   }
 
   /**
+   * Return the file encoding; this will return the file.encoding system property if no value was explicitly set
+   *
+   * @return The file encoding (e.g., UTF-8, ISO_8859-1, MacRoman)
+   */
+  public static String getGrammarEncoding()
+  {
+	if (stringValue("GRAMMAR_ENCODING").equals("")) {
+	    return System.getProperties().getProperty("file.encoding");
+	} else {
+	    return stringValue("GRAMMAR_ENCODING");
+	}
+  }
+
+  /**
    * Find the output directory.
    *
    * @return The requested output directory.
diff -uNr javacc/src/org/javacc/parser/OptionsTest.java javacc-cvs/src/org/javacc/parser/OptionsTest.java
--- javacc/src/org/javacc/parser/OptionsTest.java	2008-09-28 21:27:18.000000000 +0900
+++ javacc-cvs/src/org/javacc/parser/OptionsTest.java	2009-02-18 04:53:10.000000000 +0900
@@ -14,7 +14,7 @@
         Options.init();
         JavaCCErrors.reInit();
 
-        assertEquals(30, Options.optionValues.size());
+        assertEquals(31, Options.optionValues.size());
 
         assertEquals(true, Options.getBuildParser());
         assertEquals(true, Options.getBuildTokenManager());
@@ -43,6 +43,7 @@
         assertEquals(new File("."), Options.getOutputDirectory());
         assertEquals("", Options.getTokenExtends());
         assertEquals("", Options.getTokenFactory());
+		assertEquals(System.getProperties().get("file.encoding"), Options.getGrammarEncoding());
 
         assertEquals(0, JavaCCErrors.get_warning_count());
         assertEquals(0, JavaCCErrors.get_error_count());
diff -uNr javacc/src/org/javacc/parser/ParseGen.java javacc-cvs/src/org/javacc/parser/ParseGen.java
--- javacc/src/org/javacc/parser/ParseGen.java	2008-09-29 20:45:42.000000000 +0900
+++ javacc-cvs/src/org/javacc/parser/ParseGen.java	2009-01-19 08:25:54.000000000 +0900
@@ -570,7 +570,10 @@
           ostr.println("      for (int i = 0; i < jj_endpos; i++) {");
           ostr.println("        jj_expentry[i] = jj_lasttokens[i];");
           ostr.println("      }");
+        if (!Options.getGenerateGenerics())
           ostr.println("      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {");
+        else
+          ostr.println("      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {");
           ostr.println("        int[] oldentry = (int[])(it.next());");
           ostr.println("        if (oldentry.length == jj_expentry.length) {");
           ostr.println("          for (int i = 0; i < jj_expentry.length; i++) {");
diff -uNr javacc/src/org/javacc/parser/test/NfaStateTest.java javacc-cvs/src/org/javacc/parser/test/NfaStateTest.java
--- javacc/src/org/javacc/parser/test/NfaStateTest.java	2008-08-19 09:01:59.000000000 +0900
+++ javacc-cvs/src/org/javacc/parser/test/NfaStateTest.java	2009-02-18 04:53:11.000000000 +0900
@@ -49,7 +49,7 @@
   }
 
   protected void setupState() throws Exception {
-    JavaCCParser parser = new JavaCCParser(new java.io.FileReader(parserInput));
+	JavaCCParser parser = new JavaCCParser(new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(parserInput), Options.getGrammarEncoding())));
     parser.javacc_input();
     JavaCCGlobals.fileName = JavaCCGlobals.origFileName = parserInput;
     JavaCCGlobals.jjtreeGenerated = JavaCCGlobals.isGeneratedBy("JJTree", parserInput);
diff -uNr javacc/www/doc/commandline.html javacc-cvs/www/doc/commandline.html
--- javacc/www/doc/commandline.html	2008-10-07 02:17:33.000000000 +0900
+++ javacc-cvs/www/doc/commandline.html	2009-02-18 04:53:06.000000000 +0900
@@ -94,6 +94,7 @@
     TOKEN_EXTENDS          (java.lang.Object)
     TOKEN_FACTORY          (java.lang.Object)
     JDK_VERSION            (1.4)
+    GRAMMAR_ENCODING       (default file.encoding)
 
 EXAMPLE:
     javacc -STATIC=false -LOOKAHEAD:2 -debug_parser mygrammar.jj
