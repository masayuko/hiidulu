--- xml-commons-resolver-1.2.orig/src/org/apache/xml/resolver/tools/CatalogResolver.java	2009-02-15 10:50:42.000000000 +0900
+++ xml-commons-resolver-1.2/src/org/apache/xml/resolver/tools/CatalogResolver.java	2009-02-15 10:59:23.000000000 +0900
@@ -191,33 +191,9 @@
     String resolved = getResolvedEntity(publicId, systemId);
 
     if (resolved != null) {
-      try {
 	InputSource iSource = new InputSource(resolved);
 	iSource.setPublicId(publicId);
-
-	// Ideally this method would not attempt to open the
-	// InputStream, but there is a bug (in Xerces, at least)
-	// that causes the parser to mistakenly open the wrong
-	// system identifier if the returned InputSource does
-	// not have a byteStream.
-	//
-	// It could be argued that we still shouldn't do this here,
-	// but since the purpose of calling the entityResolver is
-	// almost certainly to open the input stream, it seems to
-	// do little harm.
-	//
-	URL url = new URL(resolved);
-	InputStream iStream = url.openStream();
-	iSource.setByteStream(iStream);
-
 	return iSource;
-      } catch (Exception e) {
-	catalogManager.debug.message(1,
-				     "Failed to create InputSource ("
-				     + e.toString()
-				     + ")", resolved);
-	return null;
-      }
     }
 
     return null;
