diff -uNr jython-2.1.orig/com/ziclix/python/sql/pipe/Pipe.java jython-2.1/com/ziclix/python/sql/pipe/Pipe.java
--- jython-2.1.orig/com/ziclix/python/sql/pipe/Pipe.java	2005-07-02 07:26:15.000000000 +0900
+++ jython-2.1/com/ziclix/python/sql/pipe/Pipe.java	2006-05-30 17:39:41.000000000 +0900
@@ -93,7 +93,7 @@
 													 new Integer(sinkRunner.getCount()) };
 			String msg = zxJDBC.getString("inconsistentRowCount", counts);
 
-			Py.assert(Py.Zero, Py.newString(msg));
+			Py.assert_(Py.Zero, Py.newString(msg));
 		}
 
 		return Py.newInteger(sinkRunner.getCount());
diff -uNr jython-2.1.orig/org/python/compiler/CodeCompiler.java jython-2.1/org/python/compiler/CodeCompiler.java
--- jython-2.1.orig/org/python/compiler/CodeCompiler.java	2005-07-02 07:26:15.000000000 +0900
+++ jython-2.1/org/python/compiler/CodeCompiler.java	2006-05-30 17:38:50.000000000 +0900
@@ -817,14 +817,14 @@
             node.getChild(1).visit(this);
             if (mrefs.assert2 == 0) {
                 mrefs.assert2 = code.pool.Methodref(
-                    "org/python/core/Py", "assert",
+                    "org/python/core/Py", "assert_",
                     "(" + $pyObj + $pyObj + ")V");
             }
             code.invokestatic(mrefs.assert2);
         } else {
             if (mrefs.assert1 == 0) {
                 mrefs.assert1 = code.pool.Methodref(
-                    "org/python/core/Py", "assert",
+                    "org/python/core/Py", "assert_",
                     "(" + $pyObj + ")V");
             }
             code.invokestatic(mrefs.assert1);
diff -uNr jython-2.1.orig/org/python/core/InternalTables1.java jython-2.1/org/python/core/InternalTables1.java
--- jython-2.1.orig/org/python/core/InternalTables1.java	2005-07-02 07:26:15.000000000 +0900
+++ jython-2.1/org/python/core/InternalTables1.java	2006-05-30 17:42:21.000000000 +0900
@@ -124,38 +124,38 @@
     protected short iterType;
     protected Object cur;
 
-    private Enumeration enum;
+    private Enumeration xenum;
     private Hashtable enumTable;
 
     public void _beginCanonical() {
         beginStable(JCSTABLE);
-        enum = ((TableProvid1)classes).keys();
+        xenum = ((TableProvid1)classes).keys();
         enumTable = (TableProvid1)classes;
         iterType = JCLASS;
     }
 
     public void _beginLazyCanonical() {
-        enum = ((TableProvid1)lazyClasses).keys();
+        xenum = ((TableProvid1)lazyClasses).keys();
         enumTable = (TableProvid1)lazyClasses;
         iterType = LAZY_JCLASS;
     }
 
     public void _beginOverAdapterClasses() {
-        enum = ((TableProvid1)adapterClasses).keys();
+        xenum = ((TableProvid1)adapterClasses).keys();
         enumTable = (TableProvid1)adapterClasses;
         iterType = ADAPTER_CLASS;
 
     }
 
     public void _beginOverAdapters() {
-        enum = adapters.keys();
+        xenum = adapters.keys();
         enumTable = adapters;
         iterType = ADAPTER;
     }
 
     public Object _next() {
-        if(enum.hasMoreElements()) {
-            cur = enum.nextElement();
+        if(xenum.hasMoreElements()) {
+            cur = xenum.nextElement();
             switch(iterType) {
             case JCLASS:
                 return (PyJavaClass)classes.get(cur);
@@ -169,7 +169,7 @@
             }
         }
         cur = null;
-        enum = null;
+        xenum = null;
         endStable();
         return null;
     }
diff -uNr jython-2.1.orig/org/python/core/Py.java jython-2.1/org/python/core/Py.java
--- jython-2.1.orig/org/python/core/Py.java	2005-07-02 07:26:15.000000000 +0900
+++ jython-2.1/org/python/core/Py.java	2006-05-30 17:37:54.000000000 +0900
@@ -986,14 +986,14 @@
 
 
     /* Equivalent to Python's assert statement */
-    public static void assert(PyObject test, PyObject message) {
+    public static void assert_(PyObject test, PyObject message) {
         if (!test.__nonzero__()) {
             throw new PyException(Py.AssertionError, message);
         }
     }
 
-    public static void assert(PyObject test) {
-        assert(test, Py.None);
+    public static void assert_(PyObject test) {
+        assert_(test, Py.None);
     }
 
     /* Helpers to implement finally clauses */
diff -uNr jython-2.1.orig/org/python/parser/PythonGrammar.java jython-2.1/org/python/parser/PythonGrammar.java
--- jython-2.1.orig/org/python/parser/PythonGrammar.java	2005-07-02 07:26:16.000000000 +0900
+++ jython-2.1/org/python/parser/PythonGrammar.java	2006-05-30 17:43:05.000000000 +0900
@@ -6736,8 +6736,8 @@
         jj_expentry[i] = jj_lasttokens[i];
       }
       boolean exists = false;
-      for (java.util.Enumeration enum = jj_expentries.elements(); enum.hasMoreElements();) {
-        int[] oldentry = (int[])(enum.nextElement());
+      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
+        int[] oldentry = (int[])(e.nextElement());
         if (oldentry.length == jj_expentry.length) {
           exists = true;
           for (int i = 0; i < jj_expentry.length; i++) {
