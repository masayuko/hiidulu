diff --git a/pgjdbc/src/main/java/org/postgresql/sspi/SSPIClient.java b/pgjdbc/src/main/java/org/postgresql/sspi/SSPIClient.java
index a2b32d0..86ea540 100644
--- a/pgjdbc/src/main/java/org/postgresql/sspi/SSPIClient.java
+++ b/pgjdbc/src/main/java/org/postgresql/sspi/SSPIClient.java
@@ -6,15 +6,6 @@ import org.postgresql.util.HostSpec;
 import org.postgresql.util.PSQLException;
 import org.postgresql.util.PSQLState;
 
-import com.sun.jna.LastErrorException;
-import com.sun.jna.Platform;
-import com.sun.jna.platform.win32.Sspi;
-import com.sun.jna.platform.win32.Sspi.SecBufferDesc;
-import com.sun.jna.platform.win32.Win32Exception;
-import waffle.windows.auth.IWindowsCredentialsHandle;
-import waffle.windows.auth.impl.WindowsCredentialsHandleImpl;
-import waffle.windows.auth.impl.WindowsSecurityContextImpl;
-
 import java.io.IOException;
 import java.sql.SQLException;
 
@@ -35,8 +26,6 @@ public class SSPIClient {
   private final String spnServiceClass;
   private final boolean enableNegotiate;
 
-  private IWindowsCredentialsHandle clientCredentials;
-  private WindowsSecurityContextImpl sspiContext;
   private String targetName;
 
 
@@ -79,44 +68,14 @@ public class SSPIClient {
    * @return true if it's safe to attempt SSPI authentication
    */
   public boolean isSSPISupported() {
-    try {
-      /*
-       * SSPI is windows-only. Attempt to use JNA to identify the platform. If Waffle is missing we
-       * won't have JNA and this will throw a NoClassDefFoundError.
-       */
-      if (!Platform.isWindows()) {
-        logger.debug("SSPI not supported: non-Windows host");
-        return false;
-      }
-      /* Waffle must be on the CLASSPATH */
-      Class.forName("waffle.windows.auth.impl.WindowsSecurityContextImpl");
-      return true;
-    } catch (NoClassDefFoundError ex) {
-      if (logger.logDebug()) {
-        logger.debug("SSPI unavailable (no Waffle/JNA libraries?)", ex);
-      }
-      return false;
-    } catch (ClassNotFoundException ex) {
-      if (logger.logDebug()) {
-        logger.debug("SSPI unavailable (no Waffle/JNA libraries?)", ex);
-      }
-      return false;
-    }
-  }
-
-  private String makeSPN() throws PSQLException {
-    final HostSpec hs = pgStream.getHostSpec();
-
-    try {
-      return NTDSAPIWrapper.instance.DsMakeSpn(spnServiceClass, hs.getHost(), null,
-          (short) hs.getPort(), null);
-    } catch (LastErrorException ex) {
-      throw new PSQLException("SSPI setup failed to determine SPN",
-          PSQLState.CONNECTION_UNABLE_TO_CONNECT, ex);
-    }
+    /*
+     * SSPI is windows-only. Attempt to use JNA to identify the platform. If Waffle is missing we
+     * won't have JNA and this will throw a NoClassDefFoundError.
+     */
+    logger.debug("SSPI not supported: non-Windows host");
+    return false;
   }
 
-
   /**
    * Respond to an authentication request from the back-end for SSPI authentication (AUTH_REQ_SSPI).
    *
@@ -124,58 +83,6 @@ public class SSPIClient {
    * @throws IOException on network I/O issues
    */
   public void startSSPI() throws SQLException, IOException {
-
-    /*
-     * We usually use SSPI negotiation (spnego), but it's disabled if the client asked for GSSPI and
-     * usespngo isn't explicitly turned on.
-     */
-    final String securityPackage = enableNegotiate ? "negotiate" : "kerberos";
-
-    if (logger.logDebug()) {
-      logger.debug("Beginning SSPI/Kerberos negotiation with SSPI package: " + securityPackage);
-    }
-
-    try {
-      /*
-       * Acquire a handle for the local Windows login credentials for the current user
-       *
-       * See AcquireCredentialsHandle
-       * (http://msdn.microsoft.com/en-us/library/windows/desktop/aa374712%28v=vs.85%29.aspx)
-       *
-       * This corresponds to pg_SSPI_startup in libpq/fe-auth.c .
-       */
-      try {
-        clientCredentials = WindowsCredentialsHandleImpl.getCurrent(securityPackage);
-        clientCredentials.initialize();
-      } catch (Win32Exception ex) {
-        throw new PSQLException("Could not obtain local Windows credentials for SSPI",
-            PSQLState.CONNECTION_UNABLE_TO_CONNECT /* TODO: Should be authentication error */, ex);
-      }
-
-      try {
-        targetName = makeSPN();
-
-        if (logger.logDebug()) {
-          logger.debug("SSPI target name: " + targetName);
-        }
-
-        sspiContext = new WindowsSecurityContextImpl();
-        sspiContext.setPrincipalName(targetName);
-        sspiContext.setCredentialsHandle(clientCredentials.getHandle());
-        sspiContext.setSecurityPackage(securityPackage);
-        sspiContext.initialize(null, null, targetName);
-      } catch (Win32Exception ex) {
-        throw new PSQLException("Could not initialize SSPI security context",
-            PSQLState.CONNECTION_UNABLE_TO_CONNECT /* TODO: Should be auth error */, ex);
-      }
-
-      sendSSPIResponse(sspiContext.getToken());
-      logger.debug("Sent first SSPI negotiation message");
-    } catch (NoClassDefFoundError ex) {
-      throw new PSQLException(
-          "SSPI cannot be used, Waffle or its dependencies are missing from the classpath",
-          PSQLState.NOT_IMPLEMENTED, ex);
-    }
   }
 
   /**
@@ -187,32 +94,6 @@ public class SSPIClient {
    * @throws IOException if something wrong happens
    */
   public void continueSSPI(int msgLength) throws SQLException, IOException {
-
-    if (sspiContext == null) {
-      throw new IllegalStateException("Cannot continue SSPI authentication that we didn't begin");
-    }
-
-    logger.debug("Continuing SSPI negotiation");
-
-    /* Read the response token from the server */
-    byte[] receivedToken = pgStream.Receive(msgLength);
-
-    SecBufferDesc continueToken = new SecBufferDesc(Sspi.SECBUFFER_TOKEN, receivedToken);
-
-    sspiContext.initialize(sspiContext.getHandle(), continueToken, targetName);
-
-    /*
-     * Now send the response token. If negotiation is complete there may be zero bytes to send, in
-     * which case we shouldn't send a reply as the server is not expecting one; see fe-auth.c in
-     * libpq for details.
-     */
-    byte[] responseToken = sspiContext.getToken();
-    if (responseToken.length > 0) {
-      sendSSPIResponse(responseToken);
-      logger.debug("Sent SSPI negotiation continuation message");
-    } else {
-      logger.debug("SSPI authentication complete, no reply required");
-    }
   }
 
   private void sendSSPIResponse(byte[] outToken) throws IOException {
@@ -232,13 +113,5 @@ public class SSPIClient {
    * SSPIClient instance becomes unusable after disposal.
    */
   public void dispose() {
-    if (sspiContext != null) {
-      sspiContext.dispose();
-      sspiContext = null;
-    }
-    if (clientCredentials != null) {
-      clientCredentials.dispose();
-      clientCredentials = null;
-    }
   }
 }
