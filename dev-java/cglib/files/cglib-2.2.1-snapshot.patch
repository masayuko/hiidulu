diff -uNr cglib-2.2/src/proxy/net/sf/cglib/core/DefaultNamingPolicy.java cglib-2.2.1-snapshot/src/proxy/net/sf/cglib/core/DefaultNamingPolicy.java
--- cglib-2.2/src/proxy/net/sf/cglib/core/DefaultNamingPolicy.java	2007-02-07 15:59:30.000000000 +0900
+++ cglib-2.2.1-snapshot/src/proxy/net/sf/cglib/core/DefaultNamingPolicy.java	2009-01-12 04:47:49.000000000 +0900
@@ -55,4 +55,12 @@
     protected String getTag() {
         return "ByCGLIB";
     }
+
+  public int hashCode() {
+    return getTag().hashCode();
+  }
+
+  public boolean equals(Object o) {
+    return (o instanceof DefaultNamingPolicy) && ((DefaultNamingPolicy) o).getTag().equals(getTag());
+  }
 }
diff -uNr cglib-2.2/src/proxy/net/sf/cglib/core/ReflectUtils.java cglib-2.2.1-snapshot/src/proxy/net/sf/cglib/core/ReflectUtils.java
--- cglib-2.2/src/proxy/net/sf/cglib/core/ReflectUtils.java	2006-12-01 17:20:24.000000000 +0900
+++ cglib-2.2.1-snapshot/src/proxy/net/sf/cglib/core/ReflectUtils.java	2009-01-12 04:47:49.000000000 +0900
@@ -25,7 +25,7 @@
 import org.objectweb.asm.Type;
 
 /**
- * @version $Id: ReflectUtils.java,v 1.29 2006/02/28 00:30:51 herbyderby Exp $
+ * @version $Id: ReflectUtils.java,v 1.30 2009/01/11 19:47:49 herbyderby Exp $
  */
 public class ReflectUtils {
     private ReflectUtils() { }
@@ -381,7 +381,10 @@
         
     public static Class defineClass(String className, byte[] b, ClassLoader loader) throws Exception {
         Object[] args = new Object[]{className, b, new Integer(0), new Integer(b.length), PROTECTION_DOMAIN };
-        return (Class)DEFINE_CLASS.invoke(loader, args);
+        Class c = (Class)DEFINE_CLASS.invoke(loader, args);
+        // Force static initializers to run.
+        Class.forName(className, true, loader);
+        return c;
     }
         
     public static int findPackageProtected(Class[] classes) {
diff -uNr cglib-2.2/src/proxy/net/sf/cglib/proxy/MethodProxy.java cglib-2.2.1-snapshot/src/proxy/net/sf/cglib/proxy/MethodProxy.java
--- cglib-2.2/src/proxy/net/sf/cglib/proxy/MethodProxy.java	2008-05-25 20:05:50.000000000 +0900
+++ cglib-2.2.1-snapshot/src/proxy/net/sf/cglib/proxy/MethodProxy.java	2009-01-12 05:09:48.000000000 +0900
@@ -30,7 +30,7 @@
  * registered {@link MethodInterceptor} objects when an intercepted method is invoked. It can
  * be used to either invoke the original method, or call the same method on a different
  * object of the same type.
- * @version $Id: MethodProxy.java,v 1.14 2008/05/26 04:05:50 herbyderby Exp $
+ * @version $Id: MethodProxy.java,v 1.16 2009/01/11 20:09:48 herbyderby Exp $
  */
 public class MethodProxy {
     private Signature sig1;
@@ -76,6 +76,7 @@
                     fci.i1 = fci.f1.getIndex(sig1);
                     fci.i2 = fci.f2.getIndex(sig2);
                     fastClassInfo = fci;
+                    createInfo = null;
                 }
             }
         }
@@ -152,6 +153,18 @@
         return fastClassInfo.i2;
     }
 
+    // For testing
+    FastClass getFastClass() {
+      init();
+      return fastClassInfo.f1;
+    }
+
+    // For testing
+    FastClass getSuperFastClass() {
+      init();
+      return fastClassInfo.f2;
+    }
+
     /**
      * Return the <code>MethodProxy</code> used when intercepting the method
      * matching the given signature.
diff -uNr cglib-2.2/src/proxy/net/sf/cglib/transform/AbstractTransformTask.java cglib-2.2.1-snapshot/src/proxy/net/sf/cglib/transform/AbstractTransformTask.java
--- cglib-2.2/src/proxy/net/sf/cglib/transform/AbstractTransformTask.java	2008-05-25 20:01:38.000000000 +0900
+++ cglib-2.2.1-snapshot/src/proxy/net/sf/cglib/transform/AbstractTransformTask.java	2009-01-12 05:02:56.000000000 +0900
@@ -137,7 +137,7 @@
             
             ZipInputStream zip = new ZipInputStream(new FileInputStream(file));
             try {
-                FileOutputStream fout = new FileOutputStream(tempFile, false);
+                FileOutputStream fout = new FileOutputStream(tempFile);
                 try{
                  ZipOutputStream out = new ZipOutputStream(fout);
                                 
diff -uNr cglib-2.2/src/test/net/sf/cglib/proxy/TestEnhancer.java cglib-2.2.1-snapshot/src/test/net/sf/cglib/proxy/TestEnhancer.java
--- cglib-2.2/src/test/net/sf/cglib/proxy/TestEnhancer.java	2005-10-24 09:39:16.000000000 +0900
+++ cglib-2.2.1-snapshot/src/test/net/sf/cglib/proxy/TestEnhancer.java	2009-01-12 04:47:50.000000000 +0900
@@ -19,13 +19,14 @@
 import java.lang.reflect.*;
 import junit.framework.*;
 import net.sf.cglib.CodeGenTestCase;
+import net.sf.cglib.core.DefaultNamingPolicy;
 import net.sf.cglib.core.ReflectUtils;
 import net.sf.cglib.reflect.FastClass;
 
 /**
  *@author     Juozas Baliuka <a href="mailto:baliuka@mwm.lt">
  *      baliuka@mwm.lt</a>
- *@version    $Id: TestEnhancer.java,v 1.55 2005/10/11 07:13:32 baliuka Exp $
+ *@version    $Id: TestEnhancer.java,v 1.56 2009/01/11 19:47:50 herbyderby Exp $
  */
 public class TestEnhancer extends CodeGenTestCase {
     private static final MethodInterceptor TEST_INTERCEPTOR = new TestInterceptor();
@@ -443,6 +444,38 @@
         assertTrue("boop".equals(d.herby()));
     }
 
+    static class NamingPolicyDummy {}
+
+    public void testNamingPolicy() throws Throwable {
+      Enhancer e = new Enhancer();
+      e.setSuperclass(NamingPolicyDummy.class);
+      e.setUseCache(false);
+      e.setUseFactory(false);
+      e.setNamingPolicy(new DefaultNamingPolicy() {
+        public String getTag() {
+          return "ByHerby";
+        }
+          public String toString() {
+            return getTag();
+          }
+      });
+      e.setCallbackType(MethodInterceptor.class);
+      Class proxied = e.createClass();
+      final boolean[] ran = new boolean[1];
+      Enhancer.registerStaticCallbacks(proxied, new Callback[]{
+        new MethodInterceptor() {
+          public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {
+            ran[0] = true;
+            assertTrue(proxy.getSuperFastClass().getClass().getName().indexOf("$FastClassByHerby$") >= 0);
+            return proxy.invokeSuper(obj, args);
+          }
+        }
+      });
+      NamingPolicyDummy dummy = (NamingPolicyDummy) proxied.newInstance();
+      dummy.toString();
+      assertTrue(ran[0]);
+    }
+
     public static Object enhance(Class cls, Class interfaces[], Callback callback, ClassLoader loader) {
         Enhancer e = new Enhancer();
         e.setSuperclass(cls);
diff -uNr cglib-2.2/src/test/net/sf/cglib/util/words.txt cglib-2.2.1-snapshot/src/test/net/sf/cglib/util/words.txt
--- cglib-2.2/src/test/net/sf/cglib/util/words.txt	1970-01-01 09:00:00.000000000 +0900
+++ cglib-2.2.1-snapshot/src/test/net/sf/cglib/util/words.txt	2003-09-16 04:31:08.000000000 +0900
@@ -0,0 +1,50 @@
+Casuarinaceae
+hylomorphic
+granitize
+biddably
+repulsive
+amphimictical
+trio
+toxodont
+nonreigning
+dragbar
+Moronidae
+unlanguishing
+metabolizable
+Osmerus
+goran
+spiritfulness
+tetrachloromethane
+baobab
+caroline
+radioconductor
+imband
+crinoline
+circummundane
+incontractile
+forerank
+modernization
+meal
+fishman
+underbuy
+pertain
+equiped
+cockal
+unshrined
+Harb
+heterotaxis
+commensurableness
+baggy
+sarcophilous
+tankard
+acervuline
+unverifiably
+premidnight
+strangles
+vitellus
+Socratean
+flock
+scourage
+feverlike
+citharist
+harn
