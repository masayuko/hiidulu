diff --git a/README.rst b/README.rst
index f31503e..e31e521 100644
--- a/README.rst
+++ b/README.rst
@@ -2,6 +2,8 @@
 chardet
 =======
 
+Python 3 port of chardet.
+
 chardet guesses the encoding of text files.
 
 Detects...
@@ -18,7 +20,7 @@ Detects...
 - ISO-8859-8, windows-1255 (Visual and Logical Hebrew)
 - TIS-620 (Thai)
 
-Requires Python 2.1 or later.
+Requires Python 3.0 or later.
 
 Command-line Tool
 =================
diff --git a/bin/chardetect.py b/bin/chardetect.py
index 0a795c0..019c444 100755
--- a/bin/chardetect.py
+++ b/bin/chardetect.py
@@ -33,10 +33,10 @@ def description_of(file, name='stdin'):
 
 def main():
     if len(argv) <= 1:
-        print description_of(stdin)
+        print(description_of(stdin))
     else:
         for path in argv[1:]:
-            print description_of(open(path, 'rb'), path)
+            print(description_of(open(path, 'rb'), path))
 
 
 if __name__ == '__main__':
diff --git a/chardet/__init__.py b/chardet/__init__.py
index bfb774d..4d64f04 100755
--- a/chardet/__init__.py
+++ b/chardet/__init__.py
@@ -18,7 +18,7 @@
 __version__ = "2.1.1"
 
 def detect(aBuf):
-    import universaldetector
+    from . import universaldetector
     u = universaldetector.UniversalDetector()
     u.reset()
     u.feed(aBuf)
diff --git a/chardet/big5prober.py b/chardet/big5prober.py
index e6b52aa..823dc8d 100755
--- a/chardet/big5prober.py
+++ b/chardet/big5prober.py
@@ -25,10 +25,10 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-from mbcharsetprober import MultiByteCharSetProber
-from codingstatemachine import CodingStateMachine
-from chardistribution import Big5DistributionAnalysis
-from mbcssm import Big5SMModel
+from .mbcharsetprober import MultiByteCharSetProber
+from .codingstatemachine import CodingStateMachine
+from .chardistribution import Big5DistributionAnalysis
+from .mbcssm import Big5SMModel
 
 class Big5Prober(MultiByteCharSetProber):
     def __init__(self):
diff --git a/chardet/chardistribution.py b/chardet/chardistribution.py
index b893341..1d8ab40 100755
--- a/chardet/chardistribution.py
+++ b/chardet/chardistribution.py
@@ -25,12 +25,12 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants
-from euctwfreq import EUCTWCharToFreqOrder, EUCTW_TABLE_SIZE, EUCTW_TYPICAL_DISTRIBUTION_RATIO
-from euckrfreq import EUCKRCharToFreqOrder, EUCKR_TABLE_SIZE, EUCKR_TYPICAL_DISTRIBUTION_RATIO
-from gb2312freq import GB2312CharToFreqOrder, GB2312_TABLE_SIZE, GB2312_TYPICAL_DISTRIBUTION_RATIO
-from big5freq import Big5CharToFreqOrder, BIG5_TABLE_SIZE, BIG5_TYPICAL_DISTRIBUTION_RATIO
-from jisfreq import JISCharToFreqOrder, JIS_TABLE_SIZE, JIS_TYPICAL_DISTRIBUTION_RATIO
+from . import constants
+from .euctwfreq import EUCTWCharToFreqOrder, EUCTW_TABLE_SIZE, EUCTW_TYPICAL_DISTRIBUTION_RATIO
+from .euckrfreq import EUCKRCharToFreqOrder, EUCKR_TABLE_SIZE, EUCKR_TYPICAL_DISTRIBUTION_RATIO
+from .gb2312freq import GB2312CharToFreqOrder, GB2312_TABLE_SIZE, GB2312_TYPICAL_DISTRIBUTION_RATIO
+from .big5freq import Big5CharToFreqOrder, BIG5_TABLE_SIZE, BIG5_TYPICAL_DISTRIBUTION_RATIO
+from .jisfreq import JISCharToFreqOrder, JIS_TABLE_SIZE, JIS_TYPICAL_DISTRIBUTION_RATIO
 
 ENOUGH_DATA_THRESHOLD = 1024
 SURE_YES = 0.99
@@ -45,15 +45,15 @@ class CharDistributionAnalysis:
         
     def reset(self):
         """reset analyser, clear any state"""
-        self._mDone = constants.False # If this flag is set to constants.True, detection is done and conclusion has been made
+        self._mDone = False # If this flag is set to True, detection is done and conclusion has been made
         self._mTotalChars = 0 # Total characters encountered
         self._mFreqChars = 0 # The number of characters whose frequency order is less than 512
 
-    def feed(self, aStr, aCharLen):
+    def feed(self, aBuf, aCharLen):
         """feed a character with known length"""
         if aCharLen == 2:
             # we only care about 2-bytes character in our distribution analysis
-            order = self.get_order(aStr)
+            order = self.get_order(aBuf)
         else:
             order = -1
         if order >= 0:
@@ -82,7 +82,7 @@ class CharDistributionAnalysis:
         # certain amount of data is enough
         return self._mTotalChars > ENOUGH_DATA_THRESHOLD
 
-    def get_order(self, aStr):
+    def get_order(self, aBuf):
         # We do not handle characters based on the original encoding string, but 
         # convert this encoding string to a number, here called order.
         # This allows multiple encodings of a language to share one frequency table.
@@ -95,13 +95,13 @@ class EUCTWDistributionAnalysis(CharDistributionAnalysis):
         self._mTableSize = EUCTW_TABLE_SIZE
         self._mTypicalDistributionRatio = EUCTW_TYPICAL_DISTRIBUTION_RATIO
 
-    def get_order(self, aStr):
+    def get_order(self, aBuf):
         # for euc-TW encoding, we are interested 
         #   first  byte range: 0xc4 -- 0xfe
         #   second byte range: 0xa1 -- 0xfe
         # no validation needed here. State machine has done that
-        if aStr[0] >= '\xC4':
-            return 94 * (ord(aStr[0]) - 0xC4) + ord(aStr[1]) - 0xA1
+        if aBuf[0] >= 0xC4:
+            return 94 * (aBuf[0] - 0xC4) + aBuf[1] - 0xA1
         else:
             return -1
 
@@ -112,13 +112,13 @@ class EUCKRDistributionAnalysis(CharDistributionAnalysis):
         self._mTableSize = EUCKR_TABLE_SIZE
         self._mTypicalDistributionRatio = EUCKR_TYPICAL_DISTRIBUTION_RATIO
 
-    def get_order(self, aStr):
+    def get_order(self, aBuf):
         # for euc-KR encoding, we are interested 
         #   first  byte range: 0xb0 -- 0xfe
         #   second byte range: 0xa1 -- 0xfe
         # no validation needed here. State machine has done that
-        if aStr[0] >= '\xB0':
-            return 94 * (ord(aStr[0]) - 0xB0) + ord(aStr[1]) - 0xA1
+        if aBuf[0] >= 0xB0:
+            return 94 * (aBuf[0] - 0xB0) + aBuf[1] - 0xA1
         else:
             return -1;
 
@@ -129,13 +129,13 @@ class GB2312DistributionAnalysis(CharDistributionAnalysis):
         self._mTableSize = GB2312_TABLE_SIZE
         self._mTypicalDistributionRatio = GB2312_TYPICAL_DISTRIBUTION_RATIO
 
-    def get_order(self, aStr):
+    def get_order(self, aBuf):
         # for GB2312 encoding, we are interested 
         #  first  byte range: 0xb0 -- 0xfe
         #  second byte range: 0xa1 -- 0xfe
         # no validation needed here. State machine has done that
-        if (aStr[0] >= '\xB0') and (aStr[1] >= '\xA1'):
-            return 94 * (ord(aStr[0]) - 0xB0) + ord(aStr[1]) - 0xA1
+        if (aBuf[0] >= 0xB0) and (aBuf[1] >= 0xA1):
+            return 94 * (aBuf[0] - 0xB0) + aBuf[1] - 0xA1
         else:
             return -1;
 
@@ -146,16 +146,16 @@ class Big5DistributionAnalysis(CharDistributionAnalysis):
         self._mTableSize = BIG5_TABLE_SIZE
         self._mTypicalDistributionRatio = BIG5_TYPICAL_DISTRIBUTION_RATIO
 
-    def get_order(self, aStr):
+    def get_order(self, aBuf):
         # for big5 encoding, we are interested 
         #   first  byte range: 0xa4 -- 0xfe
         #   second byte range: 0x40 -- 0x7e , 0xa1 -- 0xfe
         # no validation needed here. State machine has done that
-        if aStr[0] >= '\xA4':
-            if aStr[1] >= '\xA1':
-                return 157 * (ord(aStr[0]) - 0xA4) + ord(aStr[1]) - 0xA1 + 63
+        if aBuf[0] >= 0xA4:
+            if aBuf[1] >= 0xA1:
+                return 157 * (aBuf[0] - 0xA4) + aBuf[1] - 0xA1 + 63
             else:
-                return 157 * (ord(aStr[0]) - 0xA4) + ord(aStr[1]) - 0x40
+                return 157 * (aBuf[0] - 0xA4) + aBuf[1] - 0x40
         else:
             return -1
 
@@ -166,19 +166,19 @@ class SJISDistributionAnalysis(CharDistributionAnalysis):
         self._mTableSize = JIS_TABLE_SIZE
         self._mTypicalDistributionRatio = JIS_TYPICAL_DISTRIBUTION_RATIO
 
-    def get_order(self, aStr):
+    def get_order(self, aBuf):
         # for sjis encoding, we are interested 
         #   first  byte range: 0x81 -- 0x9f , 0xe0 -- 0xfe
         #   second byte range: 0x40 -- 0x7e,  0x81 -- oxfe
         # no validation needed here. State machine has done that
-        if (aStr[0] >= '\x81') and (aStr[0] <= '\x9F'):
-            order = 188 * (ord(aStr[0]) - 0x81)
-        elif (aStr[0] >= '\xE0') and (aStr[0] <= '\xEF'):
-            order = 188 * (ord(aStr[0]) - 0xE0 + 31)
+        if (aBuf[0] >= 0x81) and (aBuf[0] <= 0x9F):
+            order = 188 * (aBuf[0] - 0x81)
+        elif (aBuf[0] >= 0xE0) and (aBuf[0] <= 0xEF):
+            order = 188 * (aBuf[0] - 0xE0 + 31)
         else:
             return -1;
-        order = order + ord(aStr[1]) - 0x40
-        if aStr[1] > '\x7F':
+        order = order + aBuf[1] - 0x40
+        if aBuf[1] > 0x7F:
             order =- 1
         return order
 
@@ -189,12 +189,12 @@ class EUCJPDistributionAnalysis(CharDistributionAnalysis):
         self._mTableSize = JIS_TABLE_SIZE
         self._mTypicalDistributionRatio = JIS_TYPICAL_DISTRIBUTION_RATIO
 
-    def get_order(self, aStr):
+    def get_order(self, aBuf):
         # for euc-JP encoding, we are interested 
         #   first  byte range: 0xa0 -- 0xfe
         #   second byte range: 0xa1 -- 0xfe
         # no validation needed here. State machine has done that
-        if aStr[0] >= '\xA0':
-            return 94 * (ord(aStr[0]) - 0xA1) + ord(aStr[1]) - 0xa1
+        if aBuf[0] >= 0xA0:
+            return 94 * (aBuf[0] - 0xA1) + aBuf[1] - 0xa1
         else:
             return -1
diff --git a/chardet/charsetgroupprober.py b/chardet/charsetgroupprober.py
index 5188069..3514ae4 100755
--- a/chardet/charsetgroupprober.py
+++ b/chardet/charsetgroupprober.py
@@ -25,8 +25,9 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants, sys
-from charsetprober import CharSetProber
+from . import constants
+import sys
+from .charsetprober import CharSetProber
 
 class CharSetGroupProber(CharSetProber):
     def __init__(self):
@@ -41,7 +42,7 @@ class CharSetGroupProber(CharSetProber):
         for prober in self._mProbers:
             if prober:
                 prober.reset()
-                prober.active = constants.True
+                prober.active = True
                 self._mActiveNum += 1
         self._mBestGuessProber = None
 
@@ -62,7 +63,7 @@ class CharSetGroupProber(CharSetProber):
                 self._mBestGuessProber = prober
                 return self.get_state()
             elif st == constants.eNotMe:
-                prober.active = constants.False
+                prober.active = False
                 self._mActiveNum -= 1
                 if self._mActiveNum <= 0:
                     self._mState = constants.eNotMe
diff --git a/chardet/charsetprober.py b/chardet/charsetprober.py
index 3ac1683..bb0efe6 100755
--- a/chardet/charsetprober.py
+++ b/chardet/charsetprober.py
@@ -26,7 +26,9 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants, re
+import re
+
+from . import constants
 
 class CharSetProber:
     def __init__(self):
@@ -48,11 +50,11 @@ class CharSetProber:
         return 0.0
 
     def filter_high_bit_only(self, aBuf):
-        aBuf = re.sub(r'([\x00-\x7F])+', ' ', aBuf)
+        aBuf = re.sub(b'([\x00-\x7F])+', b' ', aBuf)
         return aBuf
     
     def filter_without_english_letters(self, aBuf):
-        aBuf = re.sub(r'([A-Za-z])+', ' ', aBuf)
+        aBuf = re.sub(b'([A-Za-z])+', b' ', aBuf)
         return aBuf
         
     def filter_with_english_letters(self, aBuf):
diff --git a/chardet/codingstatemachine.py b/chardet/codingstatemachine.py
index 92d595f..f18f08b 100755
--- a/chardet/codingstatemachine.py
+++ b/chardet/codingstatemachine.py
@@ -25,7 +25,7 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-from constants import eStart, eError, eItsMe
+from .constants import eStart, eError, eItsMe
 
 class CodingStateMachine:
     def __init__(self, sm):
@@ -41,7 +41,7 @@ class CodingStateMachine:
         # for each byte we get its class
         # if it is first byte, we also get byte length
         try:
-            byteCls = self._mModel['classTable'][ord(c)]
+            byteCls = self._mModel['classTable'][c]
         except IndexError:
             return eError
         if self._mCurrentState == eStart:
diff --git a/chardet/constants.py b/chardet/constants.py
index e94e226..e4d148b 100755
--- a/chardet/constants.py
+++ b/chardet/constants.py
@@ -37,11 +37,3 @@ eError = 1
 eItsMe = 2
 
 SHORTCUT_THRESHOLD = 0.95
-
-import __builtin__
-if not hasattr(__builtin__, 'False'):
-    False = 0
-    True = 1
-else:
-    False = __builtin__.False
-    True = __builtin__.True
diff --git a/chardet/escprober.py b/chardet/escprober.py
index 572ed7b..98cb350 100755
--- a/chardet/escprober.py
+++ b/chardet/escprober.py
@@ -25,10 +25,11 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants, sys
-from escsm import HZSMModel, ISO2022CNSMModel, ISO2022JPSMModel, ISO2022KRSMModel
-from charsetprober import CharSetProber
-from codingstatemachine import CodingStateMachine
+import sys
+from . import constants
+from .escsm import HZSMModel, ISO2022CNSMModel, ISO2022JPSMModel, ISO2022KRSMModel
+from .charsetprober import CharSetProber
+from .codingstatemachine import CodingStateMachine
 
 class EscCharSetProber(CharSetProber):
     def __init__(self):
@@ -45,7 +46,7 @@ class EscCharSetProber(CharSetProber):
         CharSetProber.reset(self)
         for codingSM in self._mCodingSM:
             if not codingSM: continue
-            codingSM.active = constants.True
+            codingSM.active = True
             codingSM.reset()
         self._mActiveSM = len(self._mCodingSM)
         self._mDetectedCharset = None
@@ -66,7 +67,7 @@ class EscCharSetProber(CharSetProber):
                 if not codingSM.active: continue
                 codingState = codingSM.next_state(c)
                 if codingState == constants.eError:
-                    codingSM.active = constants.False
+                    codingSM.active = False
                     self._mActiveSM -= 1
                     if self._mActiveSM <= 0:
                         self._mState = constants.eNotMe
diff --git a/chardet/escsm.py b/chardet/escsm.py
index 9fa2295..b05fefa 100755
--- a/chardet/escsm.py
+++ b/chardet/escsm.py
@@ -25,7 +25,7 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-from constants import eStart, eError, eItsMe
+from .constants import eStart, eError, eItsMe
 
 HZ_cls = ( \
 1,0,0,0,0,0,0,0,  # 00 - 07 
diff --git a/chardet/eucjpprober.py b/chardet/eucjpprober.py
index 46a8b38..00e3239 100755
--- a/chardet/eucjpprober.py
+++ b/chardet/eucjpprober.py
@@ -25,13 +25,14 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants, sys
-from constants import eStart, eError, eItsMe
-from mbcharsetprober import MultiByteCharSetProber
-from codingstatemachine import CodingStateMachine
-from chardistribution import EUCJPDistributionAnalysis
-from jpcntx import EUCJPContextAnalysis
-from mbcssm import EUCJPSMModel
+import sys
+from . import constants
+from .constants import eStart, eError, eItsMe
+from .mbcharsetprober import MultiByteCharSetProber
+from .codingstatemachine import CodingStateMachine
+from .chardistribution import EUCJPDistributionAnalysis
+from .jpcntx import EUCJPContextAnalysis
+from .mbcssm import EUCJPSMModel
 
 class EUCJPProber(MultiByteCharSetProber):
     def __init__(self):
diff --git a/chardet/euckrprober.py b/chardet/euckrprober.py
index bd697eb..c82c4ff 100755
--- a/chardet/euckrprober.py
+++ b/chardet/euckrprober.py
@@ -25,10 +25,10 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-from mbcharsetprober import MultiByteCharSetProber
-from codingstatemachine import CodingStateMachine
-from chardistribution import EUCKRDistributionAnalysis
-from mbcssm import EUCKRSMModel
+from .mbcharsetprober import MultiByteCharSetProber
+from .codingstatemachine import CodingStateMachine
+from .chardistribution import EUCKRDistributionAnalysis
+from .mbcssm import EUCKRSMModel
 
 class EUCKRProber(MultiByteCharSetProber):
     def __init__(self):
diff --git a/chardet/euctwprober.py b/chardet/euctwprober.py
index b073f13..fe652fe 100755
--- a/chardet/euctwprober.py
+++ b/chardet/euctwprober.py
@@ -25,10 +25,10 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-from mbcharsetprober import MultiByteCharSetProber
-from codingstatemachine import CodingStateMachine
-from chardistribution import EUCTWDistributionAnalysis
-from mbcssm import EUCTWSMModel
+from .mbcharsetprober import MultiByteCharSetProber
+from .codingstatemachine import CodingStateMachine
+from .chardistribution import EUCTWDistributionAnalysis
+from .mbcssm import EUCTWSMModel
 
 class EUCTWProber(MultiByteCharSetProber):
     def __init__(self):
diff --git a/chardet/gb2312prober.py b/chardet/gb2312prober.py
index 91eb392..0325a2d 100755
--- a/chardet/gb2312prober.py
+++ b/chardet/gb2312prober.py
@@ -25,10 +25,10 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-from mbcharsetprober import MultiByteCharSetProber
-from codingstatemachine import CodingStateMachine
-from chardistribution import GB2312DistributionAnalysis
-from mbcssm import GB2312SMModel
+from .mbcharsetprober import MultiByteCharSetProber
+from .codingstatemachine import CodingStateMachine
+from .chardistribution import GB2312DistributionAnalysis
+from .mbcssm import GB2312SMModel
 
 class GB2312Prober(MultiByteCharSetProber):
     def __init__(self):
diff --git a/chardet/hebrewprober.py b/chardet/hebrewprober.py
index a2b1eaa..6727d76 100755
--- a/chardet/hebrewprober.py
+++ b/chardet/hebrewprober.py
@@ -25,8 +25,8 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-from charsetprober import CharSetProber
-import constants
+from .charsetprober import CharSetProber
+from . import constants
 
 # This prober doesn't actually recognize a language or a charset.
 # It is a helper prober for the use of the Hebrew model probers
diff --git a/chardet/jpcntx.py b/chardet/jpcntx.py
index b02a34d..f0e0b7d 100755
--- a/chardet/jpcntx.py
+++ b/chardet/jpcntx.py
@@ -25,7 +25,7 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants
+from . import constants
 
 NUM_OF_CATEGORY = 6
 DONT_KNOW = -1
@@ -129,7 +129,7 @@ class JapaneseContextAnalysis:
         self._mRelSample = [0] * NUM_OF_CATEGORY # category counters, each interger counts sequence in its category
         self._mNeedToSkipCharNum = 0 # if last byte in current buffer is not the last byte of a character, we need to know how many bytes to skip in next buffer
         self._mLastCharOrder = -1 # The order of previous char
-        self._mDone = constants.False # If this flag is set to constants.True, detection is done and conclusion has been made
+        self._mDone = False # If this flag is set to True, detection is done and conclusion has been made
 
     def feed(self, aBuf, aLen):
         if self._mDone: return
@@ -151,7 +151,7 @@ class JapaneseContextAnalysis:
                 if (order != -1) and (self._mLastCharOrder != -1):
                     self._mTotalRel += 1
                     if self._mTotalRel > MAX_REL_THRESHOLD:
-                        self._mDone = constants.True
+                        self._mDone = True
                         break
                     self._mRelSample[jp2CharContext[self._mLastCharOrder][order]] += 1
                 self._mLastCharOrder = order
@@ -166,16 +166,16 @@ class JapaneseContextAnalysis:
         else:
             return DONT_KNOW
 
-    def get_order(self, aStr):
+    def get_order(self, aBuf):
         return -1, 1
 
 class SJISContextAnalysis(JapaneseContextAnalysis):
-    def get_order(self, aStr):
-        if not aStr: return -1, 1
+    def get_order(self, aBuf):
+        if not aBuf: return -1, 1
         # find out current char's byte length
         try:
-            if ((aStr[0] >= '\x81') and (aStr[0] <= '\x9F')) or \
-               ((aStr[0] >= '\xE0') and (aStr[0] <= '\xFC')):
+            if ((aBuf[0] >= 0x81) and (aBuf[0] <= 0x9F)) or \
+               ((aBuf[0] >= 0xE0) and (aBuf[0] <= 0xFC)):
                 charLen = 2
             else:
                 charLen = 1
@@ -183,23 +183,23 @@ class SJISContextAnalysis(JapaneseContextAnalysis):
             return -1, 1
 
         # return its order if it is hiragana
-        if len(aStr) > 1:
-            if (aStr[0] == '\202') and \
-               (aStr[1] >= '\x9F') and \
-               (aStr[1] <= '\xF1'):
-                return ord(aStr[1]) - 0x9F, charLen
+        if len(aBuf) > 1:
+            if (aBuf[0] == 202) and \
+               (aBuf[1] >= 0x9F) and \
+               (aBuf[1] <= 0xF1):
+                return aBuf[1] - 0x9F, charLen
 
         return -1, charLen
 
 class EUCJPContextAnalysis(JapaneseContextAnalysis):
-    def get_order(self, aStr):
-        if not aStr: return -1, 1
+    def get_order(self, aBuf):
+        if not aBuf: return -1, 1
         # find out current char's byte length
         try:
-            if (aStr[0] == '\x8E') or \
-               ((aStr[0] >= '\xA1') and (aStr[0] <= '\xFE')):
+            if (aBuf[0] == 0x8E) or \
+               ((aBuf[0] >= 0xA1) and (aBuf[0] <= 0xFE)):
                 charLen = 2
-            elif aStr[0] == '\x8F':
+            elif aBuf[0] == 0x8F:
                 charLen = 3
             else:
                 charLen = 1
@@ -207,10 +207,10 @@ class EUCJPContextAnalysis(JapaneseContextAnalysis):
             return -1, 1
 
         # return its order if it is hiragana
-        if len(aStr) > 1:
-            if (aStr[0] == '\xA4') and \
-               (aStr[1] >= '\xA1') and \
-               (aStr[1] <= '\xF3'):
-                return ord(aStr[1]) - 0xA1, charLen
+        if len(aBuf) > 1:
+            if (aBuf[0] == 0xA4) and \
+               (aBuf[1] >= 0xA1) and \
+               (aBuf[1] <= 0xF3):
+                return aBuf[1] - 0xA1, charLen
 
         return -1, charLen
diff --git a/chardet/langbulgarianmodel.py b/chardet/langbulgarianmodel.py
index bf5641e..bf57925 100755
--- a/chardet/langbulgarianmodel.py
+++ b/chardet/langbulgarianmodel.py
@@ -25,7 +25,7 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants
+from . import constants
 
 # 255: Control characters that usually does not exist in any text
 # 254: Carriage/Return
@@ -215,7 +215,7 @@ Latin5BulgarianModel = { \
   'charToOrderMap': Latin5_BulgarianCharToOrderMap,
   'precedenceMatrix': BulgarianLangModel,
   'mTypicalPositiveRatio': 0.969392,
-  'keepEnglishLetter': constants.False,
+  'keepEnglishLetter': False,
   'charsetName': "ISO-8859-5"
 }
 
@@ -223,6 +223,6 @@ Win1251BulgarianModel = { \
   'charToOrderMap': win1251BulgarianCharToOrderMap,
   'precedenceMatrix': BulgarianLangModel,
   'mTypicalPositiveRatio': 0.969392,
-  'keepEnglishLetter': constants.False,
+  'keepEnglishLetter': False,
   'charsetName': "windows-1251"
 }
diff --git a/chardet/langcyrillicmodel.py b/chardet/langcyrillicmodel.py
index e604cc7..7b73f74 100755
--- a/chardet/langcyrillicmodel.py
+++ b/chardet/langcyrillicmodel.py
@@ -25,7 +25,7 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants
+from . import constants
 
 # KOI8-R language model
 # Character Mapping Table:
@@ -284,7 +284,7 @@ Koi8rModel = { \
   'charToOrderMap': KOI8R_CharToOrderMap,
   'precedenceMatrix': RussianLangModel,
   'mTypicalPositiveRatio': 0.976601,
-  'keepEnglishLetter': constants.False,
+  'keepEnglishLetter': False,
   'charsetName': "KOI8-R"
 }
 
@@ -292,7 +292,7 @@ Win1251CyrillicModel = { \
   'charToOrderMap': win1251_CharToOrderMap,
   'precedenceMatrix': RussianLangModel,
   'mTypicalPositiveRatio': 0.976601,
-  'keepEnglishLetter': constants.False,
+  'keepEnglishLetter': False,
   'charsetName': "windows-1251"
 }
 
@@ -300,7 +300,7 @@ Latin5CyrillicModel = { \
   'charToOrderMap': latin5_CharToOrderMap,
   'precedenceMatrix': RussianLangModel,
   'mTypicalPositiveRatio': 0.976601,
-  'keepEnglishLetter': constants.False,
+  'keepEnglishLetter': False,
   'charsetName': "ISO-8859-5"
 }
 
@@ -308,7 +308,7 @@ MacCyrillicModel = { \
   'charToOrderMap': macCyrillic_CharToOrderMap,
   'precedenceMatrix': RussianLangModel,
   'mTypicalPositiveRatio': 0.976601,
-  'keepEnglishLetter': constants.False,
+  'keepEnglishLetter': False,
   'charsetName': "MacCyrillic"
 };
 
@@ -316,7 +316,7 @@ Ibm866Model = { \
   'charToOrderMap': IBM866_CharToOrderMap,
   'precedenceMatrix': RussianLangModel,
   'mTypicalPositiveRatio': 0.976601,
-  'keepEnglishLetter': constants.False,
+  'keepEnglishLetter': False,
   'charsetName': "IBM866"
 }
 
@@ -324,6 +324,6 @@ Ibm855Model = { \
   'charToOrderMap': IBM855_CharToOrderMap,
   'precedenceMatrix': RussianLangModel,
   'mTypicalPositiveRatio': 0.976601,
-  'keepEnglishLetter': constants.False,
+  'keepEnglishLetter': False,
   'charsetName': "IBM855"
 }
diff --git a/chardet/langgreekmodel.py b/chardet/langgreekmodel.py
index ec6d49e..506451d 100755
--- a/chardet/langgreekmodel.py
+++ b/chardet/langgreekmodel.py
@@ -25,7 +25,7 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants
+from . import constants
 
 # 255: Control characters that usually does not exist in any text
 # 254: Carriage/Return
@@ -212,7 +212,7 @@ Latin7GreekModel = { \
   'charToOrderMap': Latin7_CharToOrderMap,
   'precedenceMatrix': GreekLangModel,
   'mTypicalPositiveRatio': 0.982851,
-  'keepEnglishLetter': constants.False,
+  'keepEnglishLetter': False,
   'charsetName': "ISO-8859-7"
 }
 
@@ -220,6 +220,6 @@ Win1253GreekModel = { \
   'charToOrderMap': win1253_CharToOrderMap,
   'precedenceMatrix': GreekLangModel,
   'mTypicalPositiveRatio': 0.982851,
-  'keepEnglishLetter': constants.False,
+  'keepEnglishLetter': False,
   'charsetName': "windows-1253"
 }
diff --git a/chardet/langhebrewmodel.py b/chardet/langhebrewmodel.py
index a8bcc65..126cf07 100755
--- a/chardet/langhebrewmodel.py
+++ b/chardet/langhebrewmodel.py
@@ -27,7 +27,7 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants
+from . import constants
 
 # 255: Control characters that usually does not exist in any text
 # 254: Carriage/Return
@@ -196,6 +196,6 @@ Win1255HebrewModel = { \
   'charToOrderMap': win1255_CharToOrderMap,
   'precedenceMatrix': HebrewLangModel,
   'mTypicalPositiveRatio': 0.984004,
-  'keepEnglishLetter': constants.False,
+  'keepEnglishLetter': False,
   'charsetName': "windows-1255"
 }
diff --git a/chardet/langhungarianmodel.py b/chardet/langhungarianmodel.py
index d635f03..76c2140 100755
--- a/chardet/langhungarianmodel.py
+++ b/chardet/langhungarianmodel.py
@@ -25,7 +25,7 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants
+from . import constants
 
 # 255: Control characters that usually does not exist in any text
 # 254: Carriage/Return
@@ -212,7 +212,7 @@ Latin2HungarianModel = { \
   'charToOrderMap': Latin2_HungarianCharToOrderMap,
   'precedenceMatrix': HungarianLangModel,
   'mTypicalPositiveRatio': 0.947368,
-  'keepEnglishLetter': constants.True,
+  'keepEnglishLetter': True,
   'charsetName': "ISO-8859-2"
 }
 
@@ -220,6 +220,6 @@ Win1250HungarianModel = { \
   'charToOrderMap': win1250HungarianCharToOrderMap,
   'precedenceMatrix': HungarianLangModel,
   'mTypicalPositiveRatio': 0.947368,
-  'keepEnglishLetter': constants.True,
+  'keepEnglishLetter': True,
   'charsetName': "windows-1250"
 }
diff --git a/chardet/langthaimodel.py b/chardet/langthaimodel.py
index 96ec054..cfa8ca1 100755
--- a/chardet/langthaimodel.py
+++ b/chardet/langthaimodel.py
@@ -25,7 +25,7 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants
+from . import constants
 
 # 255: Control characters that usually does not exist in any text
 # 254: Carriage/Return
@@ -195,6 +195,6 @@ TIS620ThaiModel = { \
   'charToOrderMap': TIS620CharToOrderMap,
   'precedenceMatrix': ThaiLangModel,
   'mTypicalPositiveRatio': 0.926386,
-  'keepEnglishLetter': constants.False,
+  'keepEnglishLetter': False,
   'charsetName': "TIS-620"
 }
diff --git a/chardet/latin1prober.py b/chardet/latin1prober.py
index abaaf98..d033211 100755
--- a/chardet/latin1prober.py
+++ b/chardet/latin1prober.py
@@ -26,9 +26,8 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-from charsetprober import CharSetProber
-import constants
-import operator
+from .charsetprober import CharSetProber
+from . import constants
 
 FREQ_CAT_NUM = 4
 
@@ -110,7 +109,7 @@ class Latin1Prober(CharSetProber):
         aBuf = self.filter_with_english_letters(aBuf)
         for c in aBuf:
             try:
-                charClass = Latin1_CharToClass[ord(c)]
+                charClass = Latin1_CharToClass[c]
             except IndexError:
                 return constants.eError
             freq = Latin1ClassModel[(self._mLastCharClass * CLASS_NUM) + charClass]
@@ -126,7 +125,7 @@ class Latin1Prober(CharSetProber):
         if self.get_state() == constants.eNotMe:
             return 0.01
 
-        total = reduce(operator.add, self._mFreqCounter)
+        total = sum(self._mFreqCounter)
         if total < 0.01:
             confidence = 0.0
         else:
diff --git a/chardet/mbcharsetprober.py b/chardet/mbcharsetprober.py
index a813144..2eaad81 100755
--- a/chardet/mbcharsetprober.py
+++ b/chardet/mbcharsetprober.py
@@ -27,16 +27,17 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants, sys
-from constants import eStart, eError, eItsMe
-from charsetprober import CharSetProber
+import sys
+from . import constants
+from .constants import eStart, eError, eItsMe
+from .charsetprober import CharSetProber
 
 class MultiByteCharSetProber(CharSetProber):
     def __init__(self):
         CharSetProber.__init__(self)
         self._mDistributionAnalyzer = None
         self._mCodingSM = None
-        self._mLastChar = ['\x00', '\x00']
+        self._mLastChar = [0, 0]
 
     def reset(self):
         CharSetProber.reset(self)
@@ -44,7 +45,7 @@ class MultiByteCharSetProber(CharSetProber):
             self._mCodingSM.reset()
         if self._mDistributionAnalyzer:
             self._mDistributionAnalyzer.reset()
-        self._mLastChar = ['\x00', '\x00']
+        self._mLastChar = [0, 0]
 
     def get_charset_name(self):
         pass
diff --git a/chardet/mbcsgroupprober.py b/chardet/mbcsgroupprober.py
index 941cc3e..92ca642 100755
--- a/chardet/mbcsgroupprober.py
+++ b/chardet/mbcsgroupprober.py
@@ -27,14 +27,14 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-from charsetgroupprober import CharSetGroupProber
-from utf8prober import UTF8Prober
-from sjisprober import SJISProber
-from eucjpprober import EUCJPProber
-from gb2312prober import GB2312Prober
-from euckrprober import EUCKRProber
-from big5prober import Big5Prober
-from euctwprober import EUCTWProber
+from .charsetgroupprober import CharSetGroupProber
+from .utf8prober import UTF8Prober
+from .sjisprober import SJISProber
+from .eucjpprober import EUCJPProber
+from .gb2312prober import GB2312Prober
+from .euckrprober import EUCKRProber
+from .big5prober import Big5Prober
+from .euctwprober import EUCTWProber
 
 class MBCSGroupProber(CharSetGroupProber):
     def __init__(self):
diff --git a/chardet/mbcssm.py b/chardet/mbcssm.py
index e46c1ff..c36813e 100755
--- a/chardet/mbcssm.py
+++ b/chardet/mbcssm.py
@@ -25,7 +25,7 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-from constants import eStart, eError, eItsMe
+from .constants import eStart, eError, eItsMe
 
 # BIG5 
 
diff --git a/chardet/sbcharsetprober.py b/chardet/sbcharsetprober.py
index 6a585f7..c8fec42 100755
--- a/chardet/sbcharsetprober.py
+++ b/chardet/sbcharsetprober.py
@@ -26,8 +26,9 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants, sys
-from charsetprober import CharSetProber
+import sys
+from . import constants
+from .charsetprober import CharSetProber
 
 SAMPLE_SIZE = 64
 SB_ENOUGH_REL_THRESHOLD = 1024
@@ -39,7 +40,7 @@ POSITIVE_CAT = NUMBER_OF_SEQ_CAT - 1
 #NEGATIVE_CAT = 0
 
 class SingleByteCharSetProber(CharSetProber):
-    def __init__(self, model, reversed=constants.False, nameProber=None):
+    def __init__(self, model, reversed=False, nameProber=None):
         CharSetProber.__init__(self)
         self._mModel = model
         self._mReversed = reversed # TRUE if we need to reverse every pair in the model lookup
@@ -68,7 +69,7 @@ class SingleByteCharSetProber(CharSetProber):
             return self.get_state()
         for c in aBuf:
             try:
-                order = self._mModel['charToOrderMap'][ord(c)]
+                order = self._mModel['charToOrderMap'][c]
             except IndexError:
                 return constants.eError
             if order < SYMBOL_CAT_ORDER:
diff --git a/chardet/sbcsgroupprober.py b/chardet/sbcsgroupprober.py
index d19160c..a387e10 100755
--- a/chardet/sbcsgroupprober.py
+++ b/chardet/sbcsgroupprober.py
@@ -26,16 +26,17 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants, sys
-from charsetgroupprober import CharSetGroupProber
-from sbcharsetprober import SingleByteCharSetProber
-from langcyrillicmodel import Win1251CyrillicModel, Koi8rModel, Latin5CyrillicModel, MacCyrillicModel, Ibm866Model, Ibm855Model
-from langgreekmodel import Latin7GreekModel, Win1253GreekModel
-from langbulgarianmodel import Latin5BulgarianModel, Win1251BulgarianModel
-from langhungarianmodel import Latin2HungarianModel, Win1250HungarianModel
-from langthaimodel import TIS620ThaiModel
-from langhebrewmodel import Win1255HebrewModel
-from hebrewprober import HebrewProber
+import sys
+from . import constants
+from .charsetgroupprober import CharSetGroupProber
+from .sbcharsetprober import SingleByteCharSetProber
+from .langcyrillicmodel import Win1251CyrillicModel, Koi8rModel, Latin5CyrillicModel, MacCyrillicModel, Ibm866Model, Ibm855Model
+from .langgreekmodel import Latin7GreekModel, Win1253GreekModel
+from .langbulgarianmodel import Latin5BulgarianModel, Win1251BulgarianModel
+from .langhungarianmodel import Latin2HungarianModel, Win1250HungarianModel
+from .langthaimodel import TIS620ThaiModel
+from .langhebrewmodel import Win1255HebrewModel
+from .hebrewprober import HebrewProber
 
 class SBCSGroupProber(CharSetGroupProber):
     def __init__(self):
@@ -56,8 +57,8 @@ class SBCSGroupProber(CharSetGroupProber):
             SingleByteCharSetProber(TIS620ThaiModel),
             ]
         hebrewProber = HebrewProber()
-        logicalHebrewProber = SingleByteCharSetProber(Win1255HebrewModel, constants.False, hebrewProber)
-        visualHebrewProber = SingleByteCharSetProber(Win1255HebrewModel, constants.True, hebrewProber)
+        logicalHebrewProber = SingleByteCharSetProber(Win1255HebrewModel, False, hebrewProber)
+        visualHebrewProber = SingleByteCharSetProber(Win1255HebrewModel, True, hebrewProber)
         hebrewProber.set_model_probers(logicalHebrewProber, visualHebrewProber)
         self._mProbers.extend([hebrewProber, logicalHebrewProber, visualHebrewProber])
 
diff --git a/chardet/sjisprober.py b/chardet/sjisprober.py
index 2e7a234..900e630 100755
--- a/chardet/sjisprober.py
+++ b/chardet/sjisprober.py
@@ -25,13 +25,14 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-from mbcharsetprober import MultiByteCharSetProber
-from codingstatemachine import CodingStateMachine
-from chardistribution import SJISDistributionAnalysis
-from jpcntx import SJISContextAnalysis
-from mbcssm import SJISSMModel
-import constants, sys
-from constants import eStart, eError, eItsMe
+from .mbcharsetprober import MultiByteCharSetProber
+from .codingstatemachine import CodingStateMachine
+from .chardistribution import SJISDistributionAnalysis
+from .jpcntx import SJISContextAnalysis
+from .mbcssm import SJISSMModel
+import sys
+from . import constants
+from .constants import eStart, eError, eItsMe
 
 class SJISProber(MultiByteCharSetProber):
     def __init__(self):
diff --git a/chardet/universaldetector.py b/chardet/universaldetector.py
index 1aa9873..e815a7d 100755
--- a/chardet/universaldetector.py
+++ b/chardet/universaldetector.py
@@ -26,11 +26,12 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants, sys
-from latin1prober import Latin1Prober # windows-1252
-from mbcsgroupprober import MBCSGroupProber # multi-byte character sets
-from sbcsgroupprober import SBCSGroupProber # single-byte character sets
-from escprober import EscCharSetProber # ISO-2122, etc.
+from . import constants
+import sys
+from .latin1prober import Latin1Prober # windows-1252
+from .mbcsgroupprober import MBCSGroupProber # multi-byte character sets
+from .sbcsgroupprober import SBCSGroupProber # single-byte character sets
+from .escprober import EscCharSetProber # ISO-2122, etc.
 import re
 import logging
 
@@ -43,19 +44,19 @@ eHighbyte = 2
 
 class UniversalDetector:
     def __init__(self):
-        self._highBitDetector = re.compile(r'[\x80-\xFF]')
-        self._escDetector = re.compile(r'(\033|~{)')
+        self._highBitDetector = re.compile(b'[\x80-\xFF]')
+        self._escDetector = re.compile(b'(\033|~{)')
         self._mEscCharSetProber = None
         self._mCharSetProbers = []
         self.reset()
 
     def reset(self):
         self.result = {'encoding': None, 'confidence': 0.0}
-        self.done = constants.False
-        self._mStart = constants.True
-        self._mGotData = constants.False
+        self.done = False
+        self._mStart = True
+        self._mGotData = False
         self._mInputState = ePureAscii
-        self._mLastChar = ''
+        self._mLastChar = b''
         if self._mEscCharSetProber:
             self._mEscCharSetProber.reset()
         for prober in self._mCharSetProbers:
@@ -91,9 +92,9 @@ class UniversalDetector:
                     self.result = result
                     break
 
-        self._mGotData = constants.True
+        self._mGotData = True
         if self.result['encoding'] and (self.result['confidence'] > 0.0):
-            self.done = constants.True
+            self.done = True
             return
 
         if self._mInputState == ePureAscii:
@@ -102,7 +103,7 @@ class UniversalDetector:
             elif (self._mInputState == ePureAscii) and self._escDetector.search(self._mLastChar + aBuf):
                 self._mInputState = eEscAscii
 
-        self._mLastChar = aBuf[-1]
+        self._mLastChar = aBuf[-1:]
 
         if self._mInputState == eEscAscii:
             if not self._mEscCharSetProber:
@@ -110,7 +111,7 @@ class UniversalDetector:
             if self._mEscCharSetProber.feed(aBuf) == constants.eFoundIt:
                 self.result = {'encoding': self._mEscCharSetProber.get_charset_name(),
                                'confidence': self._mEscCharSetProber.get_confidence()}
-                self.done = constants.True
+                self.done = True
         elif self._mInputState == eHighbyte:
             if not self._mCharSetProbers:
                 self._mCharSetProbers = [MBCSGroupProber(), SBCSGroupProber(), Latin1Prober()]
@@ -119,9 +120,9 @@ class UniversalDetector:
                     if prober.feed(aBuf) == constants.eFoundIt:
                         self.result = {'encoding': prober.get_charset_name(),
                                        'confidence': prober.get_confidence()}
-                        self.done = constants.True
+                        self.done = True
                         break
-                except (UnicodeDecodeError, UnicodeEncodeError), e:
+                except (UnicodeDecodeError, UnicodeEncodeError) as e:
                     logger.exception(e)
 
     def close(self):
@@ -130,7 +131,7 @@ class UniversalDetector:
             if constants._debug:
                 sys.stderr.write('no data received!\n')
             return
-        self.done = constants.True
+        self.done = True
 
         if self._mInputState == ePureAscii:
             self.result = {'encoding': 'ascii', 'confidence': 1.0}
diff --git a/chardet/utf8prober.py b/chardet/utf8prober.py
index c1792bb..3f1d4db 100755
--- a/chardet/utf8prober.py
+++ b/chardet/utf8prober.py
@@ -25,11 +25,12 @@
 # 02110-1301  USA
 ######################### END LICENSE BLOCK #########################
 
-import constants, sys
-from constants import eStart, eError, eItsMe
-from charsetprober import CharSetProber
-from codingstatemachine import CodingStateMachine
-from mbcssm import UTF8SMModel
+import sys
+from . import constants
+from .constants import eStart, eError, eItsMe
+from .charsetprober import CharSetProber
+from .codingstatemachine import CodingStateMachine
+from .mbcssm import UTF8SMModel
 
 ONE_CHAR_PROB = 0.5
 
