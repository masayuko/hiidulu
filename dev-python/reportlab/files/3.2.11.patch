diff --git a/CHANGES.md b/CHANGES.txt
rename from CHANGES.md
rename to CHANGES.txt
--- a/CHANGES.md
+++ b/CHANGES.txt
@@ -1,68 +1,17 @@
-CHANGES
-=======
-
 This is a summary of changes made to the reportlab source code for each release.
 Please refer to subversion backlogs (using the release dates) for more details
 or for releases which we have not provide a higher level changes list for.
-E.g. to retrieve the changes made between release 3.1 and release 3.2, type::
+E.g. to retrieve the changes made between release 1.19 and release 1.20, type:
 
-  $ hg log -r adb3f0d
+  svn log -r {2004-11-25T18:00}:{2004-01-21T18:00}
 
 The contributors lists are in no order and apologies to those accidentally not
 mentioned. If we missed you, please let us know!
 
 
-RELEASE 3.2  01/06/2015
------------------------
-
-   * Added proportional underlining specific to font sizes, set via the `underlineProportion` attribute of ParagraphStyles. 
-   * TrueType fonts: added support for cmaps 10 & 13
-   * DocTemplate class now supports a boolean `displayDocTitle` argument.
-   * TableofContents now supports a formatter argument to allow formatting of the displayed page numbers (eg for appendices etc).
-   * Table `repeatRows` can now be a tuple of row numbers to allow incomplete ranges of rows to be repeated. 
-   * Tables now do pass instance.`spaceBefore` & `spaceAfter` to their split children when split 
-   * Several strangenesses were fixed in the pdfbase.pdfform module; Multiple usage is now allowed.
-   * Error message fixes
-   * Various environment fixes for Google Application Environment
-   * Resource fixes
-   * PDFDoc can now set the `Lang` attribute
-   * canvas.drawString and similar now allow the character spacing to be set 
-   * Index of accented stuff has been improved
-   * RTL code was improved
-   * fix Propertyset.clone
-   * `flowables.py`: fix ImageAndFlowables so it avoids testing negative availableWidth 
-
-### Contributors:
-   * Steven Jacobs
-   * Philip Semanchuk
-   * Marius Gedminas
-   * masklinn
-   * Kale Franz
-   * Albertas Agejavas
-   â€¢ Anders Hammarquist
-   * jvanzuela @ bitbucket
-   * Glen Lindermann
-   * Greg Jones
-   * James Bynd
-   * fcoelho @ bitbucket
-
-
-RELEASE 3.1  22/04/2014
------------------------
-
-If you are running ReportLab 3.0.x, the changes are minor.
-   * support for emoji - characters outside the Unicode basic multilingual plane
-   * improved pip-based installers will pull in all the needed dependencies; Pillow 2.4 appears to deal with all our issues.
-
-### Contributors
-   * Ivan Tchomgue
-   * Waldemar Osuch
-   * masayuku
-   * alexandrel_sgi
-
-
-RELEASE 3.0  14/02/2014
------------------------
+#################################################################################
+#################### RELEASE 3.0  14/02/2014                    #################
+#################################################################################
 
 ReportLab 3.0 now supports Python 2.7, 3.3 and higher.  
 
@@ -77,79 +26,89 @@
   * __init__.py restricts to 2.7 or >=3.3
   * __init__.py allow the import of on optional reportlab.local_rl_mods to allow monkey patching etc.
   * rl_config now imports rl_settings & optionally local_rl_settings
-  * ReportLab C extensions now live inside reportlab; _rl_accel is no longer required; All _rl_accel imports now 
-	pass through reportlab.lib.rl_accel
+  * ReportLab C extensions now live inside reportlab; _rl_accel is no longer required. All _rl_accel imports now pass through reportlab.lib.rl_accel
   * xmllib is gone, alongside the paraparser stuff that caused issues in favour of HTMLParser.
   * some obsolete C extensions (sgmlop and pyHnj) are gone
   * Improved support for multi-threaded systems to the _rl_accel extension module.
-  * Removed reportlab/lib/ para.py & pycanvas.py;  these would better belong in third party packages, 
-	which can make use of the monkeypatching feature above.
+  * Removed reportlab/lib/ para.py & pycanvas.py.  These would better belong in third party packages, which can make use of the monkeypatching feature above.
 
 
 ### New features
-  * Add ability to output greyscale and 1-bit PIL images without conversion to RGB. (contributed by Matthew Duggan)
+  *  Add ability to output greyscale and 1-bit PIL images without conversion to RGB. (contributed by Matthew Duggan)
+  
   * highlight annotation (contributed by Ben Echols)
 
+
 ### Other
   * numerous very minor fixes, visible through BitBucket.
 
 
-RELEASE 2.7  04/04/2013
------------------------
 
-#### Charts / graphics enhancements
+
+
+#################################################################################
+#################### RELEASE 2.7  04/04/2013                    #################
+#################################################################################
+
+###Charts / graphics enhancements
   * Added SimpleTimeSeriesPlot
   * added _computeMaxSpace
   * added in lineStyle (for bars)
   * improved SVG rendering
-  * Pie Chart now has an `innerRadiusFraction` to allow doughnut-like appearance for 2d charts  (it has no effect with 3d charts). 
-	 The separate 'doughnut' chart lacks many pie chart features and should only be used if you wanted multiple nested doughnuts. 
+  * Pie Chart now has an 'innerRadiusFraction' to allow doughnut-like appearance for 2d charts  (it has no effect with 3d charts).  The separate 'doughnut' chart lacks many pie chart features and should only be used if you wanted multiple nested doughnuts. 
 
-#### Charts/graphics bug fixes
+###Charts/graphics bug fixes:
   * piecharts.py: fix Pie3d __init__ to call its superclass
   * linecharts.py: fix swatch creation
-  * fixed `y` axis in the simple time series plot
+  * fixed y axis in the simple time series plot
 
-#### PDF
+###PDF
+
   * Fixes to testshapes & pdfform resetting
   * colors.py
   * various minor fixes
 
-#### Platypus
+###Platypus
+
   * Defined a small bullet rather than a big circle as the default for unordered lists
   * fixed attribute spelling bug
   * fixed CJK + endDots
 
-### Acknowledgements
-  Many thanks to Andrew Cutler, Dinu Gherman, Matthias Kirst and Stephan Richter for their contributions to this release.
+###Acknowledgements
 
+Many thanks to Andrew Cutler, Dinu Gherman, Matthias Kirst and Stephan Richter for their contributions to this release.
 
-RELEASE 2.6  27/09/2012
------------------------
+
+#################################################################################
+#################### RELEASE 2.6  27/09/2012                    #################
+#################################################################################
 
 This is a minor release focusing mainly on improved documentation.  There are a 
 number of minor enhancements, and a larger number of previous-undocumented
 enhancements which we have documented better.
 
-#### General changes
+
+###General changes
    * Manuals have been reformatted with more pleasing code snippets and tables of 
      contents, and reviewed and expanded
 
-#### Flowing documents (Platypus)
+###Flowing documents (Platypus):
    * Added support for HTML-style list objects
    * Added flexible mechanism for drawing bullets
    * Allowed XPreformatted objects to use Asian line wrapping
-   * Added an `autoNextPageTemplate` attribute to PageTemplates.  For example you 
+   * Added an 'autoNextPageTemplate' attribute to PageTemplates.  For example you 
      can now set up a 'chapter first page template' which will always be followed
      by a 'continuation template' on the next page break, saving the programmer from
      having to issue control flow commands in the story.
    * added a TopPadder flowable, which will 'wrap' another Flowable and move it 
      to the bottom of the current page.  
    * More helpful error messages when large tables cannot be rendered
-   * Documentation for images within text (`test_032_images`)
+   * Documentation for images within text (test_032_images)
    * Trailing dots for use on contents pages
+     
+   
 
-#### Charts and graphics
+###Charts and graphics:
    * Support for UPCA bar codes
    * We now have a semi-intelligent system for labelling pie charts with 
      callout lines.  Thanks to James Martin-Collar, a maths student at Warwick 
@@ -161,16 +120,18 @@
    * Pie charts - fixed bugs in 3d appearance
    * SVG output back end has seen some bugs fixed and now outputs resizeable SVG
    
-### Contributors
+###Contributors:
    * Alex Buck
    * Felix Labrecque <felixl@densi.com>
    * Peter Johnson <johnson.peter@gmail.com>
    * James Martin-Collar
    * Guillaume Francois
    
+   
 
-RELEASE 2.5  at 18:00 GMT  01/Oct/2010
---------------------------------------
+#################################################################################
+#################### RELEASE 2.5  at 18:00 GMT  01/Oct/2010     #################
+#################################################################################
 
 Many new features have been added and numerous bugs have been fixed.
 
@@ -192,11 +153,11 @@
      so we are turning this behaviour on.
    * New support for QR barcodes - [try our demo!](https://www.reportlab.com/demos/qr/)
 
-#### PDF
+###PDF
    * Colour separation and other enhancements for high-end print
    * Python 2.7 support
 
-#### Charts
+###Charts
    * reportlab.graphics.charts.axes
        * ValueAxis
            * avoidBoundSpace - Space to allow above and below
@@ -225,182 +186,197 @@
    * reportlab.graphics.charts.utils
        * DrawTimeCollector - generic mechanism for collecting information about nodes at the time they are about to be drawn
 
+#################################################################################
+#################### RELEASE 2.4  at 18:00 GMT  20/Jan/2010     #################
+#################################################################################
 
-RELEASE 2.4  at 18:00 GMT  20/Jan/2010
---------------------------------------
+PDF
+    lots of improvements and verbosity to error messages and the way they are handled.
+    font size can now be specified in pixels
+    unicode file names are now accepted
 
-#### PDF
-   * lots of improvements and verbosity to error messages and the way they are handled.
-   * font size can now be specified in pixels
-   * unicode file names are now accepted
+Platypus
+    canvas auto cropmarks
+    added support for styles h4-h6
+    Improved support for onDraw and SimpleIndex
+    Add support for index tableStyle
+    Added an alphabetic grouping indexing class
+    Added support for multi-level and alphabetical indexes
+    Added support for an unlimited number of TOC levels with default styles
+    Index entries can now be clickable.
 
-#### Platypus
-   * canvas auto cropmarks
-   * added support for styles h4-h6
-   * Improved support for onDraw and SimpleIndex
-   * Add support for index tableStyle
-   * Added an alphabetic grouping indexing class
-   * Added support for multi-level and alphabetical indexes
-   * Added support for an unlimited number of TOC levels with default styles
-   * Index entries can now be clickable.
+Graphics:
+    Axes values can be reversible.
+    Labels on the axes can now be drawn above or below the axes (hi or low).
+    A per swatch callout is now allowed in the legend.
+    A new anchroing mode for string 'numeric' that align numerical strings by their decimal place.
+    Shapes have new attributes to specify if the shape should grow to take all canvas area (vertically or horizontally) or if the canvas should shrink to fit the shape size.
+    color objects now have a clone method.
+    colors module has a fade function that returns a list of different shades made up of one base colour.
+    added in support for Overprint/Opacity & Separated colours
 
-#### Graphics
-   * Axes values can be reversible.
-   * Labels on the axes can now be drawn above or below the axes (hi or low).
-   * A per swatch callout is now allowed in the legend.
-   * A new anchroing mode for string 'numeric' that align numerical strings by their decimal place.
-   * Shapes have new attributes to specify if the shape should grow to take all canvas area (vertically or horizontally) or if the canvas should shrink to fit the shape size.
-   * color objects now have a clone method.
-   * colors module has a fade function that returns a list of different shades made up of one base colour.
-   * added in support for Overprint/Opacity & Separated colours
+Bugs fixes
+    word counting in complex paragraphs has been fixed.
+    SimpleIndex and TableOfContents bugs have been fixed.
+    Fix for position of hyperlinks when crop marks are added.
+    flowables.py: fix special case of doctemplate with no frames
+    PDFFormXObject.format missing Resources bug patch from Scott Meyer
+    KeepInFrame justification bug has been fixed.
+    paragraph.py: fix linebreaking bug thanks to Roberto Alsina
+    fix unicode/str issue bug found by Michael Egorov <michwill@gmail.com>
+    YCategoryAxis makeTickLabels fix contributed by Mike Folwell <mjf@pearson.co.uk>
+    pdfdoc.py: fix ro PDFDate contributed by Robert Alsina
+    and others ..
 
-#### Bugs fixes
-   * word counting in complex paragraphs has been fixed.
-   * SimpleIndex and TableOfContents bugs have been fixed.
-   * Fix for position of hyperlinks when crop marks are added.
-   * flowables.py: fix special case of doctemplate with no frames
-   * PDFFormXObject.format missing Resources bug patch from Scott Meyer
-   * KeepInFrame justification bug has been fixed.
-   * paragraph.py: fix linebreaking bug thanks to Roberto Alsina
-   * fix unicode/str issue bug found by Michael Egorov <michwill@gmail.com>
-   * YCategoryAxis makeTickLabels fix contributed by Mike Folwell <mjf@pearson.co.uk>
-   * pdfdoc.py: fix ro PDFDate contributed by Robert Alsina
-   * and others ..
+contributers
+------------
+    PJACock's (<peter@maubp.freeserve.co.uk>)
+    Hans Brand
+    Ian Stevens
+    Yoann Roman <yroman-reportlab@altalang.com>
+    Randolph Bentson
+    Volker Haas
+    Simon King
+    Henning Vonbargen
+    Michael Egorov <michwill@gmail.com>
+    Mike Folwell <mjf@pearson.co.uk>
+    Robert Alsina
+    and more ...
+#################################################################################
+#################### RELEASE 2.3  at 18:00 GMT  04/Feb/2009     #################
+#################################################################################
 
-### Contributors
-   * PJACock's (<peter@maubp.freeserve.co.uk>)
-   * Hans Brand
-   * Ian Stevens
-   * Yoann Roman <yroman-reportlab@altalang.com>
-   * Randolph Bentson
-   * Volker Haas
-   * Simon King
-   * Henning Vonbargen
-   * Michael Egorov <michwill@gmail.com>
-   * Mike Folwell <mjf@pearson.co.uk>
-   * Robert Alsina
-   * and more ...
+PDF
 
+  Encryption support (see encrypt parameter on Canvas and BaseDocTemplate constructor)
 
-RELEASE 2.3  at 18:00 GMT  04/Feb/2009
---------------------------------------
+Platypus
 
-#### PDF
-   * Encryption support (see encrypt parameter on Canvas and BaseDocTemplate constructor)
+  TableOfContents - Creates clickable tables of contents
+  Variable border padding for paragraphs (using the borderPadding style attribute)
+  New programming Flowable, docAssert, used to assert expressions on wrap time.
 
-#### Platypus
-   * TableOfContents - Creates clickable tables of contents
-   * Variable border padding for paragraphs (using the borderPadding style attribute)
-   * New programming Flowable, docAssert, used to assert expressions on wrap time.
+Bug fixes
 
-#### Bug fixes
-   * Fixed old documentation and installation issues
-   * 610 - Fixed Image anchoring code to match documentation
-   * 704 - renderSVG groups problem
-   * 706 - rl_codecs.py now compatible with WordAxe
-   * and others...
+   Fixed old documentation and installation issues
+   610 - Fixed Image anchoring code to match documentation
+   704 - renderSVG groups problem
+   706 - rl_codecs.py now compatible with WordAxe
+   and others...
 
-### Contributors 
-   * Yoann Roman
-   * Dinu Gherman
-   * Dirk Holtwick
-   * Marcel Tromp
-   * Henning von Bargen
-   * Paul Barrass
-   * Adrian Klaver
-   * Hans Brand
-   * Ian Stevens
+Contributors 
+------------
 
+Yoann Roman
+Dinu Gherman
+Dirk Holtwick
+Marcel Tromp
+Henning von Bargen
+Paul Barrass
+Adrian Klaver
+Hans Brand
+Ian Stevens
 
-RELEASE 2.2  at 18:00 GMT  10/Sep/2008
---------------------------------------
+#################################################################################
+#################### RELEASE 2.2  at 18:00 GMT  10/Sep/2008     #################
+#################################################################################
 
-#### PDF
-   * pdfmetrics: Added registerFontFamily function
-   * Basic support for pdf document viewer preferences (e.g.: fullscreen).
+PDF
 
-#### Platypus
-   * Paragraph <img> tag support for inline images.
-   * Paragraph autoleading support (helps with <img> tags).
-   * Platypus doctemplate programming support.
-   * Support for tables with non-uniform row length.
+  pdfmetrics: Added registerFontFamily function
+  Basic support for pdf document viewer preferences (e.g.: fullscreen).
 
-#### Graphics
-   * RGBA image support for suitable bitmap types.
-   * LTO labelling barcode.
+Platypus
+
+  Paragraph <img> tag support for inline images.
+  Paragraph autoleading support (helps with <img> tags).
+  Platypus doctemplate programming support.
+  Support for tables with non-uniform row length.
+
+Graphics
+
+  RGBA image support for suitable bitmap types.
+  LTO labelling barcode.
 
 And many bugfixes...
 
-### Contributors 
-   * Matt Folwell
-   * Jerome Alet
-   * Harald Armin Massa
-   * kevin@booksys.com
-   * Sebastian Ware
-   * Martin Tate
-   * Wietse Jacobs
-   * Christian Jacobs
-   * Volker Haas
-   * Dinu Gherman
-   * Dirk Datzert
-   * Yuan Hong
-   * Ilpo Nyyssï¿½nen
-   * Thomas Heller
-   * Gael Chardon
-   * Alex Smishlajev
-   * Martin Loewis
-   * Dirk Holtwick
-   * Philippe Makowskic
-   * Ian Sparks
-   * Albertas Agejevas
-   * Gary Poster
-   * Martin Zohlhuber
-   * Francesco Pierfederici
-   * michael@stroeder.com
-   * Derik Barclay
-   * Publio da Costa Melo 
-   * Jon Dyte
-   * David Horkoff
-   * picodello@yahoo.it
-   * Rï¿½diger Mï¿½hl
-   * Paul Winkler
-   * Bernhard Herzog
-   * Alex Martelli
-   * Stuart Bishop
-   * Gael Chardon
+Contributors 
+------------
 
+Matt Folwell
+Jerome Alet
+Harald Armin Massa
+kevin@booksys.com
+Sebastian Ware
+Martin Tate
+Wietse Jacobs
+Christian Jacobs
+Volker Haas
+Dinu Gherman
+Dirk Datzert
+Yuan Hong
+Ilpo Nyyssï¿½nen
+Thomas Heller
+Gael Chardon
+Alex Smishlajev
+Martin Loewis
+Dirk Holtwick
+Philippe Makowskic
+Ian Sparks
+Albertas Agejevas
+Gary Poster
+Martin Zohlhuber
+Francesco Pierfederici
+michael@stroeder.com
+Derik Barclay
+Publio da Costa Melo 
+Jon Dyte
+David Horkoff
+picodello@yahoo.it
+Rï¿½diger Mï¿½hl
+Paul Winkler
+Bernhard Herzog
+Alex Martelli
+Stuart Bishop
+Gael Chardon
 
-RELEASE 2.1  at 15:00 GMT  24/May/2007
---------------------------------------
+#################################################################################
+#################### RELEASE 2.1  at 15:00 GMT  24/May/2007     #################
+#################################################################################
 
-### Contributors 
-   * Ilpo Nyyssï¿½nen
-   * Thomas Heller
-   * Gael Chardon
-   * Alex Smishlajev
-   * Martin Loewis       
-   * Dirk Holtwick
-   * Philippe Makowskic
-   * Dinu Gherman
-   * Ian Sparks
+Contributors 
+------------
+
+Ilpo Nyyssï¿½nen
+Thomas Heller
+Gael Chardon
+Alex Smishlajev
+Martin Loewis       
+Dirk Holtwick
+Philippe Makowskic
+Dinu Gherman
+Ian Sparks
  
+#################################################################################
+#################### RELEASE 2.0  at 15:00 GMT  23/May/2006     #################
+#################################################################################
 
-RELEASE 2.0  at 15:00 GMT  23/May/2006
---------------------------------------
+Contributions
+-------------
 
-### Contributions
-   * Andre Reitz
-   * Max M
-   * Albertas Agejevas
-   * T Blatter
-   * Ron Peleg
-   * Gary Poster
-   * Steve Halasz
-   * Andrew Mercer
-   * Paul McNett
-   * Chad Miller
+Andre Reitz
+Max M
+Albertas Agejevas
+T Blatter
+Ron Peleg
+Gary Poster
+Steve Halasz
+Andrew Mercer
+Paul McNett
+Chad Miller
 
-### Unicode support
+Unicode support
+---------------
 
 This is the Big One, and the reason some apps may break. You must now pass in 
 text either in UTF-8 or as unicode string objects. The library will handle 
@@ -421,7 +397,7 @@
 
 Here is what's different now:
 
-#### Input text encoding is UTF-8 or Python Unicode strings
+Input text encoding is UTF-8 or Python Unicode strings
 
   Any text you pass to a canvas API (drawString etc.), Paragraph or other 
   flowable constructor, into a table cell, or as an attribute of a graphic (e.g. 
@@ -429,7 +405,7 @@
   string, it is assumed to be UTF-8. If you pass a Unicode object, we know it's 
   unicode. 
 
-#### Font encodings
+Font encodings
 
   Fonts still work in different ways, and the built-in ones will still use 
   WinAnsi or MacRoman internally while TrueType will use UTF-8. However, the 
@@ -442,7 +418,7 @@
   just the face name. ReportLab knows about the standard fonts in Adobe's Asian 
   Language Packs. 
 
-#### Asian Truetype fonts
+Asian Truetype fonts
 
   The standard Truetype fonts differ slightly for Asian languages (e.g 
   msmincho.ttc). These can now be read and used, albeit somewhat inefficiently. 
@@ -452,7 +428,7 @@
   properly wrap paragraphs as there are no gaps between the words. We now have a 
   basic word wrapping algorithm.
 
-#### unichar tag
+unichar tag
 
   A convenience tag, <unichar/> has also been added. You can now do <unichar 
   code="0xfc"/> or <unichar name='LATIN SMALL LETTER U WITH DIAERESIS'/> and get 
@@ -474,50 +450,46 @@
   will see a black square in place of that character when you view your PDF 
   output in Acrobat Reader.
 
-### Other New Features
+Other New Features
+------------------
 
-#### PDF
+PDF
 
-  * Improved low-level annotation support for PDF "free text annotations"
+  Improved low-level annotation support for PDF "free text annotations"
     FreeTextAnnotation allows showing and hiding of an arbitrary PDF "form" 
     (reusable chunk of PDF content) depending on whether the document is printed or 
     viewed on-screen, or depending on whether the mouse is hovered over the 
     content, etc.
-  * TTC font collection files are now readable:
+  TTC font collection files are now readable
     ReportLab now supports using TTF fonts packaged in .TTC files
-  * East Asian font support (CID and TTF):
+  East Asian font support (CID and TTF)
     You no longer need to specify the encoding for the built-in Asian 
     fonts, just the face name. ReportLab knows about the standard fonts in Adobe's 
     Asian Language Packs. 
-  * Native support for JPEG CMYK images:
+  Native support for JPEG CMYK images
     ReportLab now takes advantage of PDF's native JPEG CMYK image support, 
     so that JPEG CMYK images are no longer (lossily) converted to RGB format before 
     including them in PDF. 
 
-#### Platypus
+Platypus
 
-  * Link support in paragraphs:
+  Link support in paragraphs
     Platypus paragraphs can now contain link elements, which support both 
     internal links to the same PDF document, links to other local PDF documents, 
     and URL links to pages on the web. Some examples:
 
-    Web links::
-
+    Web links:
         <link href="http://www.reportlab.com/">ReportLab<link>
-
-    Internal link to current PDF document::
-
+    Internal link to current PDF document:
         <link href="summary">ReportLab<link>
-
-    External link to a PDF document on the local filesystem::
-
+    External link to a PDF document on the local filesystem:
         <link href="pdf:c:/john/report.pdf">ReportLab<link>
 
-  * Improved wrapping support:
+  Improved wrapping support
     Support for wrapping arbitrary sequence of flowables around an image, 
     using reportlab.platypus.flowables.ImageAndFlowables (similar to 
     ParagraphAndImage).
-  * `KeepInFrame`:
+  KeepInFrame
     Sometimes the length of a piece of text you'd like to include in a 
     fixed piece of page "real estate" is not guaranteed to be constrained to a 
     fixed maximum length. In these cases, KeepInFrame allows you to specify an 
@@ -525,79 +497,81 @@
     for it. In particular, it can shrink the text to fit, mask (truncate) 
     overflowing text, allow the text to overflow into the rest of the document, or 
     raise an error.
-  * Improved convenience features for inserting unicode symbols and other 
-  characters:
-    `<unichar/>` lets you conveniently insert unicode characters using the 
-    standard long name or code point. Characters inserted with the `<greek>` tags 
-    (e.g. `<greek>lambda</greek>`) or corresponding entity references (e.g. &lambda;) 
+  Improved convenience features for inserting unicode symbols and other 
+  characters
+    <unichar/> lets you conveniently insert unicode characters using the 
+    standard long name or code point. Characters inserted with the <greek> tags 
+    (e.g. <greek>lambda</greek>) or corresponding entity references (e.g. &lambda;) 
     support arbitrary fonts (rather than only Zapf Dingbats).
-  * Table spans and splitting improved:
+  Table spans and splitting improved
     Cell spanning in tables used to go wrong sometimes when the table split 
     over a page. We believe this is improved, although there are so many table 
     features that it's hard to define correct behaviour in all cases.
-  * `KeepWithNext` improved:
+  KeepWithNext improved
     Paragraph styles have long had an attribute keepWithNext, but this was 
     buggy when set to True. We believe this is fixed now. keepWithNext is important 
     for widows and orphans control; you typically set it to True on headings, to 
     ensure at least one paragraph appears after the heading and that you don't get 
     headings alone at the bottom of a column. 
 
-#### Graphics
-  * Barcodes:
+Graphics
+
+  Barcodes
     The barcode package has been added to the standard reportlab 
     toolkit distribution (it used to live separately in our contributions area). It 
     has also seen fairly extensive reworking for production use in a recent 
     project. These changes include adding support for the standard European EAN 
     barcodes (EAN 8 and EAN13).
-  * Improvements to Legending:
+  Improvements to Legending
     Instead of manual placement, there is now a attachment point (N, 
     S, E, W, etc.), so that the legend is always automatically positioned correctly 
     relative to the chart. Swatches (the small sample squares of colour / pattern 
     fill sometimes displayed in the legend) can now be automatically created from 
     the graph data. Legends can now have automatically-computed totals (useful for 
     financial applications).
-  * More and better ways to place piechart labels:
+  More and better ways to place piechart labels
     New smart algorithms for automatic pie chart label positioning 
     have been added. You can now produce nice-looking labels without manual 
     positioning even for awkward cases in big runs of charts.
-  * Adjustable piechart slice ordering:
+  Adjustable piechart slice ordering
     For example. pie charts with lots of small slices can be 
     configured to alternate thin and thick slices to help the label placement 
     algorithm work better.
-  * Improved spiderplots
+  Improved spiderplots
 
-#### Noteworthy bug fixes
-  * Fixes to TTF splitting (patch from Albertas Agejevas):
+Noteworthy bug fixes
+
+  Fixes to TTF splitting (patch from Albertas Agejevas)
     This affected some documents using font subsetting
-  * Tables with spans improved splitting:
+  Tables with spans improved splitting
     Splitting of tables across pages did not work correctly when the table had
     row/column spans
-  * Fix runtime error affecting keepWithNext
+  Fix runtime error affecting keepWithNext
 
+#####################################################
+#################### Older releases #################
+#####################################################
 
-Older releases
---------------
+Please refer to subversion backlogs for a low level change list.
 
-Please refer to subversion backlogs for a low level change list
-
-	RELEASE 1.20 at 18:00 GMT  25/Nov/2004
-	RELEASE 1.19 at 18:00 GMT  21/Jan/2004
-	RELEASE 1.18 at 12:00 GMT  9/Jul/2003
-	RELEASE 1.17 at 16:00 GMT  3/Jan/2003
-	RELEASE 1.16 at 16:00 GMT  7/Nov/2002
-	RELEASE 1.15 at 14:00 GMT  9/Aug/2002
-	RELEASE 1.14 at 18:00 GMT 28/May/2002
-	RELEASE 1.13 at 15:00 GMT 27/March/2002
-	RELEASE 1.12 at 17:00 GMT 28/February/2002
-	RELEASE 1.11 at 14:00 GMT 12/December/2001
-	RELEASE 1.10 at 14:00 GMT 06/November/2001
-	RELEASE 1.09 at 14:00 BST 13/August/2001
-	RELEASE 1.08 at 12:00 BST 19/June/2001
-	RELEASE 1.07 at 11:54 BST 2001/05/02
-	RELEASE 1.06 at 14:00 BST 2001/03/30
-	RELEASE 1.03 on 2001/02/09
-	RELEASE 1.02 on 2000/12/11
-	RELEASE 1.01 on 2000/10/10
-	RELEASE 1.00 on 2000/07/20
-	RELEASE 0.95 on 2000/07/14
-	RELEASE 0.94 on 2000/06/20
+RELEASE 1.20 at 18:00 GMT  25/Nov/2004
+RELEASE 1.19 at 18:00 GMT  21/Jan/2004
+RELEASE 1.18 at 12:00 GMT  9/Jul/2003
+RELEASE 1.17 at 16:00 GMT  3/Jan/2003
+RELEASE 1.16 at 16:00 GMT  7/Nov/2002
+RELEASE 1.15 at 14:00 GMT  9/Aug/2002
+RELEASE 1.14 at 18:00 GMT 28/May/2002
+RELEASE 1.13 at 15:00 GMT 27/March/2002
+RELEASE 1.12 at 17:00 GMT 28/February/2002
+RELEASE 1.11 at 14:00 GMT 12/December/2001
+RELEASE 1.10 at 14:00 GMT 06/November/2001
+RELEASE 1.09 at 14:00 BST 13/August/2001
+RELEASE 1.08 at 12:00 BST 19/June/2001
+RELEASE 1.07 at 11:54 BST 2001/05/02
+RELEASE 1.06 at 14:00 BST 2001/03/30
+RELEASE 1.03 on 2001/02/09
+RELEASE 1.02 on 2000/12/11
+RELEASE 1.01 on 2000/10/10
+RELEASE 1.00 on 2000/07/20
+RELEASE 0.95 on 2000/07/14
+RELEASE 0.94 on 2000/06/20
diff --git a/README.txt b/README.txt
--- a/README.txt
+++ b/README.txt
@@ -1,13 +1,13 @@
 =====================================
-README
+README 
 =====================================
 
 (C) Copyright ReportLab Europe Ltd. 2000-2014.
 See ``LICENSE.txt`` for license details.
 
-This is the ReportLab PDF Toolkit. It allows rapid creation
-of rich PDF documents, and also creation of charts in a variety
-of bitmap and vector formats.
+This is the ReportLab PDF Toolkit. It allows rapid creation 
+of rich PDF documents, and also creation of charts in a variety 
+of bitmap and vector formats.  
 
 This library is also the foundation for our commercial product
 Report Markup Language (RML), available in the ReportLab PLUS
@@ -24,13 +24,13 @@
 2. Installation
 
    2.1 Source Distribution or Subversion
-
+   
    2.2 Manual Installation without C Compiler (e.g. Windows)
-
+   
    2.3 easy_install
-
-   2.4 Windows .exe Installer
-
+   
+   2.4 Windows .exe Installer 
+   
    2.5 Ubuntu and other Debian-based Systems
 
 3. Prerequisites / Dependencies
@@ -48,7 +48,7 @@
 2. Installation
 ===============
 
-In most cases, ``easy_install reportlab`` or ``pip install reportlab`` will
+In most cases, ``easy_install reportlab`` or ``pip install reportlab`` will 
 do the job.  Full details follow below for each platform.
 
 
@@ -56,7 +56,7 @@
 --------------------------
 You need to have installed Python (versions 2.7 or >=3.3),
 and ideally PIL or Pillow with Freetype support; more notes on prerequisites
-follow below.
+follow below.  
 
 2.2. Where to get the code
 ------------------------------------------
@@ -85,8 +85,8 @@
 
 2.3 Windows Packages
 --------------------
-We no longer made .exe or .msi files.  We provide ``.whl`` files with compiled
-C extensions for all supported python versions at
+We no longer made .exe or .msi files.  We provide ``.whl`` files with compiled 
+C extensions for all supported python versions at 
 
     http://pypi.python.org/pypi/reportlab/
 
@@ -96,7 +96,7 @@
 
 This will NOT install the tests, examples and documentation.  If you want
 to learn your way around the package or do development with it on Windows,
-we suggest you also obtain source from https://bitbucket.org/rptlab/reportlab
+we suggest you also obtain source from https://bitbucket.org/rptlab/reportlab 
 and work with the examples/tests within that directory.
 
 2.4 Mac OS
@@ -104,25 +104,25 @@
 On Mac OS, you will need XCode with the Command Line Tools option installed
 in order to compile the C extensions.  On Lion
 or later, type ``clang`` at a prompt; if you get ``command not found`` or
-similar, the C compiler is not installed.
+similar, the C compiler is not installed.  
 
-We then recommend the *brew* installation tool to fetch open source packages.
+We then recommend the *brew* installation tool to fetch open source packages. 
 You should run::
 
     brew install freetype
-
-before instaling *reportlab* to ensure that the Python Imaging Library gets
-compiled with JPEG support.
+    
+before instaling *reportlab* to ensure that the Python Imaging Library gets 
+compiled with JPEG support.    
 
 Thereafter, you can install with  ``easy_install reportlab`` or by fetching
 the source and using ``python setup.py install``
-
+    
 
 2.5 Unix / Linux
 -----------------
 
 On Unix and Mac OS we assume a C compiler is available to compile the
-C extensions.
+C extensions.  
 
 On Ubuntu, you will need
 *build-essential*, *libfreetype6-dev*, *python-dev* and *python-imaging*.
@@ -134,14 +134,14 @@
 or fetch the source and use ``python setup.py install``.
 
 From Ubuntu 12.04 desktop onwards, a copy of reportlab is already installed.
-Take care not to confuse it with any releases you download.
+Take care not to confuse it with any releases you download. 
 
 
 
 
 3. Prerequisites / Dependencies
 ===============================
-This works with Python versions 2.7 or >=3.3. Older versions are available
+This works with Python 2.5 - 2.7. Older versions are available 
 going back to Python 1.5 or thereabouts.
 
 There are no absolute prerequisites beyond the Python
@@ -178,9 +178,9 @@
 The tests will simply try to 'import reportlab'.  Be warned that if you already have a copy
 of reportlab installed (which happens by default in Ubuntu 12.04 desktop), it may try to
 run the installed reportlab and cause permission errors as it can't generate PDF files
-without sudo rights.
+without sudo rights.  
 
-If you do not have a copy insralled and run them prior to installation/compilation,
+If you do not have a copy insralled and run them prior to installation/compilation, 
 there may be one or two failures from tests which exercise the C extensions that have not
 been compiled.
 
@@ -189,19 +189,19 @@
 to' information.
 
 If you have no internet connection, one or two tests may fail where we try to load images
-from URLs.  This is normal.  The next release of this package will silently skip
+from URLs.  This is normal.  The next release of this package will silently skip 
 such tests using features only available in Python 2.7.
 
 6. Demos
 ========
 A small number of demo programs are included in ``demos/``, none of which are particularly
-exciting, but which may have some intructional value.  These were the first programs we
-wrote back in 2000.
+exciting, but which may have some intructional value.  These were the first programs we 
+wrote back in 2000.  
 
 The *odyssey* demo serves as our benchmark suite.  If you download the full Odyssey text,
 you can generate a PDF of Homer's Odyssey with either (a) no wrapping, (b) simple paragraphs
 or (c) paragraphs with enough artificial markup (bold/italic on certain words) to exercise
-the parser.
+the parser.  
 
 
 7. Acknowledgements and Thanks
diff --git a/docs/userguide/ch2_graphics.py b/docs/userguide/ch2_graphics.py
--- a/docs/userguide/ch2_graphics.py
+++ b/docs/userguide/ch2_graphics.py
@@ -292,7 +292,7 @@
 pencilnote()
 disc("""
 You need the Python Imaging Library (PIL) to use images with the ReportLab package.
-Examples of the techniques below can be found by running the script $test_pdfgen_general.py$
+Examnples of the techniques below can be found by running the script $test_pdfgen_general.py$
 in our $tests$ subdirectory and looking at page 7 of the output.
 """)
 
diff --git a/docs/userguide/ch5_paragraphs.py b/docs/userguide/ch5_paragraphs.py
--- a/docs/userguide/ch5_paragraphs.py
+++ b/docs/userguide/ch5_paragraphs.py
@@ -64,11 +64,6 @@
         'borderRadius': None,
         'allowWidows': 1,
         'allowOrphans': 0,
-        'textTransform':None,
-        'endDots':None,
-        'splitLongWords':1,
-        'underlineProportion': _baseUnderlineProportion,
-        'bulletAnchor': 'start',
         }
 """)
 
@@ -170,12 +165,6 @@
 colour can be set with $backColor$. The paragraph's border properties may be changed using
 $borderWidth$, $borderPadding$, $borderColor$ and $borderRadius$.""")
 
-disc("""The $textTransform$ attribute can be <b><i>None</i></b>, <i>'upper'</i> or <i>'lower'</i> to get the obvious result.""")
-disc("""Attribute $endDots$ can be <b><i>None</i></b>, a string, or an object with attributes text and optional fontName, fontSize, textColor,  backColor
-and dy(y offset) to specify trailing matter on the last line of left/right justified paragraphs.""")
-disc("""The $splitLongWords$ attribute can be set to a false value to avoid splitting very long words.""")
-disc("""The $underLineProportion$ attribute can be set to a true or false value to control whether underlines are proportional to the font size.""")
-disc("""Attribute $bulletAnchor$ can be <i>'start'</i>, <i>'middle'</i>, <i>'end'</i> or <i>'numeric'</i> to control where the bullet is anchored.""")
 
 heading2("Paragraph XML Markup Tags")
 disc("""XML markup can be used to modify or specify the
diff --git a/docs/userguide/ch6_tables.py b/docs/userguide/ch6_tables.py
--- a/docs/userguide/ch6_tables.py
+++ b/docs/userguide/ch6_tables.py
@@ -87,10 +87,8 @@
 the current drawing area and the caller wants the $Table$ to split.
 Splitting a $Table$ by column is currently not implemented, so setting $splitByRow$ to $False$ will result in a $NotImplementedError$.""")
 
-disc("""The $repeatRows$ argument specifies the number or a tuple of leading rows
-that should be repeated when the $Table$ is asked to split itself. If it is a tuple it should specify which of the leading rows should be repeated; this allows
-for cases where the first appearance of the table hsa more leading rows than later split parts.
-The $repeatCols$ argument is currently ignored as a $Table$ cannot be split by column.""")
+disc("""The $repeatRows$ argument specifies the number of leading rows
+that should be repeated when the $Table$ is asked to split itself. The $repeatCols$ argument is currently ignored as a $Table$ cannot be split by column.""")
 heading4('$Table.setStyle(tblStyle)$')
 disc("""
 This method applies a particular instance of class $TableStyle$ (discussed below)
diff --git a/src/reportlab/__init__.py b/src/reportlab/__init__.py
--- a/src/reportlab/__init__.py
+++ b/src/reportlab/__init__.py
@@ -1,8 +1,9 @@
-#Copyright ReportLab Europe Ltd. 2000-2015
+#Copyright ReportLab Europe Ltd. 2000-2012
 #see license.txt for license details
+#history http://www.reportlab.co.uk/cgi-bin/viewcvs.cgi/public/reportlab/trunk/reportlab/__init__.py
+__version__=''' $Id$ '''
 __doc__="""The Reportlab PDF generation library."""
-Version = "3.2.0"
-__version__=Version
+Version = "3.1.47"
 
 import sys, os, imp
 
@@ -43,5 +44,5 @@
 except ImportError:
     try:
         _fake_import(os.path.expanduser(os.path.join('~','.reportlab_mods')),'reportlab_mods')
-    except (ImportError,KeyError):
+    except ImportError:
         pass
diff --git a/src/reportlab/graphics/charts/axes.py b/src/reportlab/graphics/charts/axes.py
--- a/src/reportlab/graphics/charts/axes.py
+++ b/src/reportlab/graphics/charts/axes.py
@@ -34,7 +34,7 @@
 from reportlab.lib.validators import    isNumber, isNumberOrNone, isListOfStringsOrNone, isListOfNumbers, \
                                         isListOfNumbersOrNone, isColorOrNone, OneOf, isBoolean, SequenceOf, \
                                         isString, EitherOr, Validator, NoneOr, isInstanceOf, \
-                                        isNormalDate, isNoneOrCallable
+                                        isNormalDate
 from reportlab.lib.attrmap import *
 from reportlab.lib import normalDate
 from reportlab.graphics.shapes import Drawing, Line, PolyLine, Rect, Group, STATE_DEFAULTS, _textBoxLimits, _rotatedBoxLimits
@@ -458,7 +458,6 @@
         loLLen = AttrMapValue(isNumber, desc='extra line length before start of the axis'),
         hiLLen = AttrMapValue(isNumber, desc='extra line length after end of the axis'),
         skipGrid = AttrMapValue(OneOf('none','top','both','bottom'),"grid lines to skip top bottom both none"),
-        innerTickDraw = AttrMapValue(isNoneOrCallable, desc="Callable to replace _drawInnerTicks"),
         )
 
     def __init__(self):
@@ -551,10 +550,7 @@
     _tickTweaks = 0 #try 0.25-0.5
 
     def _drawTicksInner(self,tU,tD,g):
-        itd = getattr(self,'innerTickDraw',None)
-        if itd:
-            itd(self,tU,tD,g)
-        elif tU or tD:
+        if tU or tD:
             sW = self.strokeWidth
             tW = self._tickTweaks
             if tW:
@@ -616,10 +612,8 @@
         if getattr(self,'visibleSubTicks',0) and self.subTickNum>0:
             otv = self._calcSubTicks()
             try:
-                self._subTicking = 1
                 self._drawTicksInner(tU,tD,g)
             finally:
-                del self._subTicking
                 self._tickValues = otv
 
     def makeTicks(self):
@@ -965,7 +959,6 @@
         keepTickLabelsInside = AttrMapValue(isBoolean, desc='Ensure tick labels do not project beyond bounds of axis if true'),
         skipGrid = AttrMapValue(OneOf('none','top','both','bottom'),"grid lines to skip top bottom both none"),
         requiredRange = AttrMapValue(isNumberOrNone, desc='Minimum required value range.'),
-        innerTickDraw = AttrMapValue(isNoneOrCallable, desc="Callable to replace _drawInnerTicks"),
         )
 
     def __init__(self,**kw):
diff --git a/src/reportlab/graphics/charts/legends.py b/src/reportlab/graphics/charts/legends.py
--- a/src/reportlab/graphics/charts/legends.py
+++ b/src/reportlab/graphics/charts/legends.py
@@ -334,10 +334,10 @@
         xW = dx+dxTextSpace+self.autoXPadding
         variColumn = self.variColumn
         if variColumn:
-            width = sum([m[-1] for m in maxWidth])+xW*nCols
+            width = reduce(operator.add,[m[-1] for m in maxWidth],0)+xW*nCols
         else:
             deltax = max(maxWidth[-1]+xW,deltax)
-            width = nCols*deltax
+            width = maxWidth[-1]+nCols*deltax
             maxWidth = nCols*[maxWidth]
 
         thisx = self.x
@@ -372,7 +372,7 @@
             dividerOffsX = self.dividerOffsX
             dividerOffsY = self.dividerOffsY
 
-        for i in xrange(n):
+        for i in range(n):
             if autoCP:
                 col = autoCP
                 col.index = i
diff --git a/src/reportlab/lib/fontfinder.py b/src/reportlab/lib/fontfinder.py
--- a/src/reportlab/lib/fontfinder.py
+++ b/src/reportlab/lib/fontfinder.py
@@ -58,8 +58,7 @@
 Future plans might include using this to auto-register fonts; and making it
 update itself smartly on repeated instantiation.
 """
-import sys, time, os, tempfile
-from reportlab.lib.utils import pickle
+import sys, time, os, pickle, tempfile
 from xml.sax.saxutils import quoteattr
 try:
     from hashlib import md5
diff --git a/src/reportlab/lib/utils.py b/src/reportlab/lib/utils.py
--- a/src/reportlab/lib/utils.py
+++ b/src/reportlab/lib/utils.py
@@ -6,16 +6,15 @@
 
 import os, sys, imp, time, types
 from base64 import decodestring as base64_decodestring, encodestring as base64_encodestring
+try:
+    from cPickle import dumps as pickle_dumps, loads as pickle_loads, dump as pickle_dump, load as pickle_load
+except ImportError:
+    from pickle import dumps as pickle_dumps, loads as pickle_loads, dump as pickle_dump, load as pickle_load
 from reportlab import isPy3
 from reportlab.lib.logger import warnOnce
 from reportlab.lib.rltempfile import get_rl_tempfile, get_rl_tempdir, _rl_getuid
 
 try:
-    import cPickle as pickle
-except ImportError:
-    import pickle
-
-try:
     from hashlib import md5
 except ImportError:
     import md5
@@ -115,10 +114,10 @@
             return str(x).encode(enc)
 
     def encode_label(args):
-        return base64_encodestring(pickle.dumps(args)).strip().decode('latin1')
+        return base64_encodestring(pickle_dumps(args)).strip().decode('latin1')
 
     def decode_label(label):
-        return pickle.loads(base64_decodestring(label.encode('latin1')))
+        return pickle_loads(base64_decodestring(label.encode('latin1')))
 
     def rawUnicode(s):
         '''converts first 256 unicodes 1-1'''
@@ -212,10 +211,10 @@
     from string import letters as ascii_letters, uppercase as ascii_uppercase, lowercase as ascii_lowercase
 
     def encode_label(args):
-        return base64_encodestring(pickle.dumps(args)).strip()
+        return base64_encodestring(pickle_dumps(args)).strip()
 
     def decode_label(label):
-        return pickle.loads(base64_decodestring(label))
+        return pickle_loads(base64_decodestring(label))
 
     def rawUnicode(s):
         '''converts first 256 unicodes 1-1'''
@@ -1045,17 +1044,17 @@
     def _dump(self,f):
         try:
             pos=f.tell()
-            pickle.dump(self.store,f)
+            pickle_dump(self.store,f)
         except:
             S=self.store.copy()
             ff=getBytesIO()
             for k,v in S.items():
                 try:
-                    pickle.dump({k:v},ff)
+                    pickle_dump({k:v},ff)
                 except:
                     S[k] = '<unpicklable object %r>' % v
             f.seek(pos,0)
-            pickle.dump(S,f)
+            pickle_dump(S,f)
 
     def dump(self):
         f = open(self.fn,'wb')
@@ -1070,7 +1069,7 @@
         return f.getvalue()
 
     def _load(self,f):
-        self.store = pickle.load(f)
+        self.store = pickle_load(f)
 
     def load(self):
         f = open(self.fn,'rb')
diff --git a/src/reportlab/pdfbase/pdfdoc.py b/src/reportlab/pdfbase/pdfdoc.py
--- a/src/reportlab/pdfbase/pdfdoc.py
+++ b/src/reportlab/pdfbase/pdfdoc.py
@@ -18,7 +18,7 @@
 from collections import OrderedDict
 from reportlab.pdfbase import pdfutils
 from reportlab import rl_config
-from reportlab.lib.utils import import_zlib, open_for_read, makeFileName, isSeq, isBytes, isUnicode, _digester, isStr, bytestr, isPy3, annotateException
+from reportlab.lib.utils import import_zlib, open_for_read, makeFileName, isSeq, isBytes, isUnicode, _digester, isStr, bytestr, isPy3
 from reportlab.lib.rl_accel import escapePDF, fp_str, asciiBase85Encode, asciiBase85Decode
 from reportlab.pdfbase import pdfmetrics
 from hashlib import md5
@@ -997,7 +997,6 @@
     # to override, set as attributes
     __Defaults__ = {"Type": PDFName("Catalog"),
                 "PageMode": PDFName("UseNone"),
-                "Lang": None,
                 }
     __NoDefault__ = """
         Dests Outlines Pages Threads AcroForm Names OpenAction PageMode URI
@@ -1009,14 +1008,20 @@
         defaults = self.__Defaults__
         Refs = self.__Refs__
         D = {}
-        for k,v in defaults.items():
-            v = getattr(self,k,v)
+        for k in defaults.keys():
+            default = defaults[k]
+            v = None
+            if hasattr(self, k) and getattr(self,k) is not None:
+                v = getattr(self, k)
+            elif default is not None:
+                v = default
             if v is not None:
                 D[k] = v
         for k in self.__NoDefault__:
-            v = getattr(self,k,None)
-            if v is not None:
-                D[k] = v
+            if hasattr(self, k):
+                v = getattr(self,k)
+                if v is not None:
+                    D[k] = v
         # force objects to be references where required
         for k in Refs:
             if k in D:
@@ -1154,8 +1159,6 @@
             self.Parent = document.Reference(pages)
 
 #this code contributed by  Christian Jacobs <cljacobsen@gmail.com>
-class DuplicatePageLabelPage(Exception):
-    pass
 class PDFPageLabels(PDFCatalog):
     __comment__ = None
     __RefOnly__ = 0
@@ -1183,11 +1186,7 @@
         self.labels.append((page, label))
 
     def format(self, document):
-        try:
-            self.labels.sort()
-        except DuplicatePageLabelPage:
-            tmp = sorted([x[0] for x in self.labels])
-            annotateException('\n\n!!!!! Duplicate PageLabel seen for pages %r' % list(set([x for x in tmp if tmp.count(x)>1])))
+        self.labels.sort()
         labels = []
         for page, label in self.labels:
             labels.append(page)
@@ -1264,11 +1263,6 @@
             self.S = PDFName(style)
         if start: self.St = PDFnumber(start)
         if prefix: self.P = PDFString(prefix)
-
-    def __lt__(self,oth):
-        if rl_config.errorOnDuplicatePageLabelPage:
-            raise DuplicatePageLabelPage()
-        return False
 #ends code contributed by  Christian Jacobs <cljacobsen@gmail.com>
 
 def testpage(document):
@@ -1779,9 +1773,9 @@
         self.fmt = self.page = None
     def format(self, document):
         f = self.fmt
-        if f is None: raise ValueError("format not resolved, probably missing URL scheme or undefined destination target for '%s'" % self.name)
+        if f is None: raise ValueError("format not resolved %s" % self.name)
         p = self.page
-        if p is None: raise ValueError("Page not bound, probably missing URL scheme or undefined destination target for '%s'" % self.name)
+        if p is None: raise ValueError("Page reference unbound %s" % self.name)
         f.page = p
         return f.format(document)
     def xyz(self, left, top, zoom):  # see pdfspec mar 11 99 pp184+
diff --git a/src/reportlab/pdfbase/pdfform.py b/src/reportlab/pdfbase/pdfform.py
--- a/src/reportlab/pdfbase/pdfform.py
+++ b/src/reportlab/pdfbase/pdfform.py
@@ -58,18 +58,18 @@
     (xA, yA) = canvas.absolutePosition(xR,yR)
     return textFieldAbsolute(canvas, title, xA, yA, width, height, value, maxlen, multiline)
 
-def buttonFieldAbsolute(canvas, title, value, x, y, width=16.7704, height=14.907):
+def buttonFieldAbsolute(canvas, title, value, x, y):
     """Place a check button field on the current page
         with name title and default value value (one of "Yes" or "Off")
         at ABSOLUTE position (x,y).
     """
     theform = getForm(canvas)
-    return theform.buttonField(canvas, title, value, x, y, width=width, height=height)
+    return theform.buttonField(canvas, title, value, x, y)
 
-def buttonFieldRelative(canvas, title, value, xR, yR, width=16.7704, height=14.907):
+def buttonFieldRelative(canvas, title, value, xR, yR):
     "same as buttonFieldAbsolute except the x and y are relative to the canvas coordinate transform"
     (xA, yA) = canvas.absolutePosition(xR,yR)
-    return buttonFieldAbsolute(canvas, title, value, xA, yA, width=width, height=height)
+    return buttonFieldAbsolute(canvas, title, value, xA, yA)
 
 def selectFieldAbsolute(canvas, title, value, options, x, y, width, height):
     """Place a select field (drop down list) on the current page
@@ -85,6 +85,39 @@
     (xA, yA) = canvas.absolutePosition(xR,yR)
     return selectFieldAbsolute(canvas, title, value, options, xA, yA, width, height)
 
+def test1():
+    from reportlab.pdfgen import canvas
+    fn = "formtest1.pdf"
+    c = canvas.Canvas(fn)
+    # first page
+    c.setFont("Courier", 10)
+    c.drawString(100, 500, "hello world")
+    textFieldAbsolute(c, "fieldA", 100, 600, 100, 20, "default value")
+    textFieldAbsolute(c, "fieldB", 100, 300, 100, 50, "another default value", multiline=1)
+    selectFieldAbsolute(c, "fieldC", "France", ["Canada", "France", "China"], 100, 200, 100, 20)
+    c.rect(100, 600, 100, 20)
+    buttonFieldAbsolute(c, "field2", "Yes", 100, 700)
+    c.rect(100, 700, 20, 20)
+    buttonFieldAbsolute(c, "field3", "Off", 100, 800)
+    c.rect(100, 800, 20, 20)
+    # second page
+    c.showPage()
+    c.setFont("Helvetica", 7)
+    c.translate(50, 20)
+    c.drawString(100, 500, "hello world")
+    textFieldRelative(c, "fieldA_1", 100, 600, 100, 20, "default value 2")
+    c.setStrokeColorRGB(1,0,0)
+    c.setFillColorRGB(0,1,0.5)
+    textFieldRelative(c, "fieldB_1", 100, 300, 100, 50, "another default value 2", multiline=1)
+    selectFieldRelative(c, "fieldC_1", "France 1", ["Canada 0", "France 1", "China 2"], 100, 200, 100, 20)
+    c.rect(100, 600, 100, 20)
+    buttonFieldRelative(c, "field2_1", "Yes", 100, 700)
+    c.rect(100, 700, 20, 20)
+    buttonFieldRelative(c, "field3_1", "Off", 100, 800)
+    c.rect(100, 800, 20, 20)
+    c.save()
+    print("wrote", fn)
+
 #==========================end of public interfaces
 
 from reportlab.pdfbase.pdfpattern import PDFPattern, PDFPatternIf
@@ -130,17 +163,16 @@
               font=font, fontsize=fontsize, R=R, G=G, B=B)
         self.fields.append(field)
         canvas._addAnnotation(field)
-    def buttonField(self, canvas, title, value, xmin, ymin, width=16.7704, height=14.907):
+    def buttonField(self, canvas, title, value, xmin, ymin):
         # determine the page ref
         doc = canvas._doc
         page = doc.thisPageRef()
-        field = ButtonField(title, value, xmin, ymin, page, width=width, height=height)
+        field = ButtonField(title, value, xmin, ymin, page)
         self.fields.append(field)
         canvas._addAnnotation(field)
     def format(self, document):
         from reportlab.pdfbase.pdfdoc import PDFArray
-        proxy = PDFPattern(FormPattern,
-                    Resources=getattr(self,'resources',None) or FormResources(),
+        proxy = PDFPattern(FormPattern, Resources=getattr(self,'resources',GLOBALRESOURCES),
                     NeedAppearances=getattr(self,'needAppearances','false'),
                     fields=PDFArray(self.fields), SigFlags=getattr(self,'sigFlags',0))
         return proxy.format(document)
@@ -161,13 +193,12 @@
     fontsdictionary.__RefOnly__ = 1
     for fullname, shortname in FORMFONTNAMES.items():
         fontsdictionary[shortname] = FormFont(fullname, shortname)
-    fontsdictionary["ZaDb"] = PDFPattern(ZaDbPattern)
+    fontsdictionary["ZaDb"] = ZADB.clone()
     return fontsdictionary
 
 def FormResources():
     return PDFPattern(FormResourcesDictionaryPattern,
-                      Encoding=PDFPattern(EncodingPattern,PDFDocEncoding=PDFPattern(PDFDocEncodingPattern)),
-                      Font=FormFontsDictionary())
+                      Encoding=ENCODING.clone(), Font=GLOBALFONTSDICTIONARY)
 
 ZaDbPattern = [
 ' <<'
@@ -364,7 +395,7 @@
 
 def FormFont(BaseFont, Name):
     from reportlab.pdfbase.pdfdoc import PDFName
-    return PDFPattern(FormFontPattern, BaseFont=PDFName(BaseFont), Name=PDFName(Name), Encoding=PDFPattern(PDFDocEncodingPattern))
+    return PDFPattern(FormFontPattern, BaseFont=PDFName(BaseFont), Name=PDFName(Name), Encoding=PDFDOCENC.clone())
 
 FormFontPattern = [
 '<<',
@@ -381,7 +412,12 @@
 '>>' ]
 
 def resetPdfForm():
-    pass
+    global PDFDOCENC,ENCODING,GLOBALFONTSDICTIONARY,GLOBALRESOURCES,ZADB
+    PDFDOCENC = PDFPattern(PDFDocEncodingPattern)
+    ENCODING = PDFPattern(EncodingPattern, PDFDocEncoding=PDFDOCENC.clone())
+    ZADB = PDFPattern(ZaDbPattern)
+    GLOBALFONTSDICTIONARY = FormFontsDictionary()
+    GLOBALRESOURCES = FormResources()
 from reportlab.rl_config import register_reset
 register_reset(resetPdfForm)
 resetPdfForm()
@@ -484,21 +520,17 @@
 ["Selected"],'\r\n',
 '>>']
 
-def ButtonField(title, value, xmin, ymin, page, width=16.7704, height=14.907):
+def ButtonField(title, value, xmin, ymin, page):
     if value not in ("Yes", "Off"):
         raise ValueError("button value must be 'Yes' or 'Off': "+repr(value))
-    fontSize = (11.3086/14.907)*height
-    dx = (3.6017/16.7704)*width
-    dy = (3.3881/14.907)*height
+    (dx, dy) = (16.77036, 14.90698)
     return PDFPattern(ButtonFieldPattern,
                       Name=PDFString(title),
-                      xmin=xmin, ymin=ymin, xmax=xmin+width, ymax=ymin+width,
-                      Hide=PDFPattern(['<< /S  /Hide >>']),
-                      APDOff=ButtonStream('0.749 g 0 0 %(width)s %(height)s re f\r\n' % vars(), width=width, height=height),
-                      APDYes=ButtonStream('0.749 g 0 0 %(width)s %(height)s re f q 1 1 %(width)s %(height)s re W n BT /ZaDb %(fontSize)s Tf 0 g 1 0 0 1 %(dx)s %(dy)s Tm (4) Tj ET\r\n' % vars(),
-                                            width=width, height=height),
-                      APNYes=ButtonStream('q 1 1 %(width)s %(height)s re W n BT /ZaDb %(fontSize)s Tf 0 g   1 0 0 1 %(dx)s %(dy)s Tm (4) Tj ET Q\r\n' % vars(),
-                                            width=width, height=height),
+                      xmin=xmin, ymin=ymin, xmax=xmin+dx, ymax=ymin+dy,
+                      Hide=HIDE,
+                      APDOff=APDOFF,
+                      APDYes=APDYES,
+                      APNYes=APNYES,
                       Value=PDFName(value),
                       Page=page)
 
@@ -563,21 +595,40 @@
 ["Value"], '\r\n',
 ' >>']
 
+HIDE = PDFPattern([
+'<< '
+'/S '
+' /Hide '
+'>>'])
 
-def buttonStreamDictionary(width=16.7704, height=14.907):
+def buttonStreamDictionary():
     "everything except the length for the button appearance streams"
     result = PDFDictionary()
     result["SubType"] = "/Form"
-    result["BBox"] = "[0 0 %(width)s %(height)s]" % vars()
+    result["BBox"] = "[0 0 16.77036 14.90698]"
     font = PDFDictionary()
-    font["ZaDb"] = PDFPattern(ZaDbPattern)
+    font["ZaDb"] = ZADB.clone()
     resources = PDFDictionary()
     resources["ProcSet"] = "[ /PDF /Text ]"
     resources["Font"] = font
     result["Resources"] = resources
     return result
 
-def ButtonStream(content, width=16.7704, height=14.907):
-    result = PDFStream(buttonStreamDictionary(width=width,height=height), content)
+def ButtonStream(content):
+    dict = buttonStreamDictionary()
+    result = PDFStream(dict, content)
     result.filters = []
     return result
+
+APDOFF = ButtonStream('0.749 g 0 0 16.7704 14.907 re f\r\n')
+APDYES = ButtonStream(
+'0.749 g 0 0 16.7704 14.907 re f q 1 1 14.7704 12.907 re W '+
+'n BT /ZaDb 11.3086 Tf 0 g  1 0 0 1 3.6017 3.3881 Tm (4) Tj ET\r\n')
+APNYES = ButtonStream(
+'q 1 1 14.7704 12.907 re W n BT /ZaDb 11.3086 Tf 0 g  1 0 0 1 3.6017 3.3881 Tm (4) Tj ET Q\r\n')
+
+
+#==== script interpretation
+
+if __name__=="__main__":
+    test1()
diff --git a/src/reportlab/pdfgen/canvas.py b/src/reportlab/pdfgen/canvas.py
--- a/src/reportlab/pdfgen/canvas.py
+++ b/src/reportlab/pdfgen/canvas.py
@@ -1497,50 +1497,39 @@
         # use PDFTextObject for multi-line text.
         ##################################################
 
-    def drawString(self, x, y, text, mode=None, charSpace=0):
+    def drawString(self, x, y, text, mode=None):
         """Draws a string in the current text styles."""
         if sys.version_info[0] == 3 and not isinstance(text, str):
             text = text.decode('utf-8')
         #we could inline this for speed if needed
         t = self.beginText(x, y)
         if mode is not None: t.setTextRenderMode(mode)
-        if charSpace: t.setCharSpace(charSpace)
         t.textLine(text)
-        if charSpace: t.setCharSpace(0)
-        if mode is not None: t.setTextRenderMode(0)
         self.drawText(t)
 
-    def drawRightString(self, x, y, text, mode=None, charSpace=0):
+    def drawRightString(self, x, y, text, mode=None):
         """Draws a string right-aligned with the x coordinate"""
         if sys.version_info[0] == 3 and not isinstance(text, str):
             text = text.decode('utf-8')
         width = self.stringWidth(text, self._fontname, self._fontsize)
-        if charSpace: width += (len(text)-1)*charSpace
         t = self.beginText(x - width, y)
         if mode is not None: t.setTextRenderMode(mode)
-        if charSpace: t.setCharSpace(charSpace)
         t.textLine(text)
-        if charSpace: t.setCharSpace(0)
-        if mode is not None: t.setTextRenderMode(0)
         self.drawText(t)
 
-    def drawCentredString(self, x, y, text, mode=None, charSpace=0):
+    def drawCentredString(self, x, y, text,mode=None):
         """Draws a string centred on the x coordinate. 
         
         We're British, dammit, and proud of our spelling!"""
         if sys.version_info[0] == 3 and not isinstance(text, str):
             text = text.decode('utf-8')
         width = self.stringWidth(text, self._fontname, self._fontsize)
-        if charSpace: width += (len(text)-1)*charSpace
         t = self.beginText(x - 0.5*width, y)
         if mode is not None: t.setTextRenderMode(mode)
-        if charSpace: t.setCharSpace(charSpace)
         t.textLine(text)
-        if charSpace: t.setCharSpace(0)
-        if mode is not None: t.setTextRenderMode(0)
         self.drawText(t)
 
-    def drawAlignedString(self, x, y, text, pivotChar=rl_config.decimalSymbol, mode=None, charSpace=0):
+    def drawAlignedString(self, x, y, text, pivotChar=rl_config.decimalSymbol):
         """Draws a string aligned on the first '.' (or other pivot character).
 
         The centre position of the pivot character will be used as x.
@@ -1581,16 +1570,16 @@
                 rightText = leftText[-1] + rightText
                 leftText = leftText[0:-1]
 
-            self.drawRightString(x-0.5*pivW, y, leftText, mode=mode, charSpace=charSpace)
-            self.drawString(x-0.5*pivW, y, rightText, mode=mode, charSpace=charSpace)
+            self.drawRightString(x-0.5*pivW, y, leftText)
+            self.drawString(x-0.5*pivW, y, rightText)
 
         else:
             #normal case
             leftText = parts[0]
-            self.drawRightString(x-0.5*pivW, y, leftText, mode=mode, charSpace=charSpace)
+            self.drawRightString(x-0.5*pivW, y, leftText)
             if len(parts) > 1:
                 rightText = pivotChar + parts[1]
-                self.drawString(x-0.5*pivW, y, rightText, mode=mode, charSpace=charSpace)
+                self.drawString(x-0.5*pivW, y, rightText)
 
     def getAvailableFonts(self):
         """Returns the list of PostScript font names available.
@@ -1833,23 +1822,6 @@
         '''you'll get an error here if none have been set'''
         del self._doc.Catalog.ViewerPreferences[pref]
 
-    def setCatalogEntry(self,key,value):
-        from reportlab.pdfbase.pdfdoc import PDFDictionary, PDFArray, PDFString
-        if isStr(value):
-            value = PDFString(value)
-        elif isinstance(value,(list,tuple)):
-            value = PDFArray(value)
-        elif isinstance(value,dict):
-            value = PDFDictionary(value)
-        setattr(self._doc.Catalog,key,value)
-
-    def getCatalogEntry(self,key):
-        return getattr(self._doc.Catalog,key)
-
-    def delCatalogEntry(self,key):
-        '''you'll get an error here if it's not been set'''
-        delattr(self._doc.Catalog,key)
-
     def addPageLabel(self, pageNum, style=None, start=None, prefix=None):
         '''add a PDFPageLabel for pageNum'''
         catalog = self._doc.Catalog
diff --git a/src/reportlab/pdfgen/textobject.py b/src/reportlab/pdfgen/textobject.py
--- a/src/reportlab/pdfgen/textobject.py
+++ b/src/reportlab/pdfgen/textobject.py
@@ -375,7 +375,7 @@
         "Generates PDF text output operator(s)"
         if log2vis and self.direction in ('LTR','RTL'):
             # Use pyfribidi to write the text in the correct visual order.
-            text = log2vis(text, directionsMap.get(self.direction.upper(),DIR_ON),clean=True)
+            text = log2vis(text, directionsMap.get(self.direction.upper(),DIR_ON))
         canv = self._canvas
         font = pdfmetrics.getFont(self._fontname)
         R = []
@@ -463,16 +463,3 @@
     def __nonzero__(self):
         'PDFTextObject is true if it has something done after the init'
         return self._code != ['BT']
-
-    def _setFillAlpha(self,v):
-        self._canvas._doc.ensureMinPdfVersion('transparency')
-        self._canvas._extgstate.set(self,'ca',v)
-
-    def _setStrokeOverprint(self,v):
-        self._canvas._extgstate.set(self,'OP',v)
-
-    def _setFillOverprint(self,v):
-        self._canvas._extgstate.set(self,'op',v)
-
-    def _setOverprintMask(self,v):
-        self._canvas._extgstate.set(self,'OPM',v and 1 or 0)
diff --git a/src/reportlab/platypus/doctemplate.py b/src/reportlab/platypus/doctemplate.py
--- a/src/reportlab/platypus/doctemplate.py
+++ b/src/reportlab/platypus/doctemplate.py
@@ -36,7 +36,6 @@
 import reportlab.lib.sequencer
 from reportlab.pdfgen import canvas
 from reportlab.lib.utils import isSeq, encode_label, decode_label, annotateException, strTypes
-
 try:
     set
 except NameError:
@@ -451,8 +450,6 @@
                     'encrypt': None,
                     'cropMarks': None,
                     'enforceColorSpace': None,
-                    'displayDocTitle': None,
-                    'lang': None,
                     }
     _invalidInitArgs = ()
     _firstPageTemplateIndex = 0
@@ -867,10 +864,6 @@
         self.canv.setSubject(self.subject)
         self.canv.setCreator(self.creator)
         self.canv.setKeywords(self.keywords)
-        if self.displayDocTitle is not None:
-            self.canv.setViewerPreference('DisplayDocTitle',['false','true'][self.displayDocTitle])
-        if self.lang:
-            self.canv.setCatalogEntry('Lang',self.lang)
 
         if self._onPage:
             self.canv.setPageCallBack(self._onPage)
diff --git a/src/reportlab/platypus/frames.py b/src/reportlab/platypus/frames.py
--- a/src/reportlab/platypus/frames.py
+++ b/src/reportlab/platypus/frames.py
@@ -155,15 +155,14 @@
             p = self._y1p
             s = 0
             aW = self._getAvailableWidth()
-            zeroSize = getattr(flowable,'_ZEROSIZE',False)
             if not self._atTop:
                 s =flowable.getSpaceBefore()
                 if self._oASpace:
-                    if getattr(flowable,'_SPACETRANSFER',False) or zeroSize:
+                    if getattr(flowable,'_SPACETRANSFER',False):
                         s = self._prevASpace
                     s = max(s-self._prevASpace,0)
             h = y - p - s
-            if h>0 or zeroSize:
+            if h>0:
                 w, h = flowable.wrap(aW, h)
             else:
                 return 0
diff --git a/src/reportlab/platypus/paraparser.py b/src/reportlab/platypus/paraparser.py
--- a/src/reportlab/platypus/paraparser.py
+++ b/src/reportlab/platypus/paraparser.py
@@ -10,6 +10,11 @@
 import copy
 import base64
 from pprint import pprint as pp
+
+try:
+    import pickle as pickle
+except:
+    import pickle
 import unicodedata
 import reportlab.lib.sequencer
 
diff --git a/src/reportlab/platypus/tableofcontents.py b/src/reportlab/platypus/tableofcontents.py
--- a/src/reportlab/platypus/tableofcontents.py
+++ b/src/reportlab/platypus/tableofcontents.py
@@ -34,7 +34,7 @@
     self.notify('TOCEntry', (level, text, pageNum, key))
 
 As the table of contents need at least two passes over the Platypus
-story which is why the multiBuild() method must be called.
+story which is why the moultiBuild0() method must be called.
 
 The level<NUMBER>ParaStyle variables are the paragraph styles used
 to format the entries in the table of contents. Their indentation
@@ -46,7 +46,7 @@
 
 from reportlab.lib import enums
 from reportlab.lib.units import cm
-from reportlab.lib.utils import commasplit, escapeOnce, encode_label, decode_label, strTypes, asUnicode
+from reportlab.lib.utils import commasplit, escapeOnce, encode_label, decode_label, strTypes
 from reportlab.lib.styles import ParagraphStyle, _baseFontName
 from reportlab.platypus.paragraph import Paragraph
 from reportlab.platypus.doctemplate import IndexingFlowable
@@ -54,7 +54,6 @@
 from reportlab.platypus.flowables import Spacer, Flowable
 from reportlab.pdfbase.pdfmetrics import stringWidth
 from reportlab.pdfgen import canvas
-import unicodedata
 
 def unquote(txt):
     from xml.sax.saxutils import unescape
@@ -68,7 +67,7 @@
             if x not in self:
                 list.append(self,x)
 
-def drawPageNumbers(canvas, style, pages, availWidth, availHeight, dot=' . ', formatter=None):
+def drawPageNumbers(canvas, style, pages, availWidth, availHeight, dot=' . '):
     '''
     Draws pagestr on the canvas using the given style.
     If dot is None, pagestr is drawn at the current position in the canvas.
@@ -158,13 +157,11 @@
     If dotsMinLevel is set to a negative value, no dotted lines are drawn.
     """
 
-    def __init__(self,**kwds):
-        self.rightColumnWidth = kwds.get('rightColumnWidth',72)
-        self.levelStyles = kwds.get('levelStyles',defaultLevelStyles)
-        self.tableStyle = kwds.get('tableStyle',defaultTableStyle)
-        self.dotsMinLevel = kwds.get('dotsMinLevel',1)
-        self.formatter = kwds.get('formatter',None)
-        if kwds: raise ValueError('unexpected keyword arguments %s' % ', '.join(kwds.keys()))
+    def __init__(self):
+        self.rightColumnWidth = 72
+        self.levelStyles = defaultLevelStyles
+        self.tableStyle = defaultTableStyle
+        self.dotsMinLevel = 1
         self._table = None
         self._entries = []
         self._lastEntries = []
@@ -245,7 +242,6 @@
                 dot = ' . '
             else:
                 dot = ''
-            if self.formatter: page = self.formatter(page)
             drawPageNumbers(canvas, style, [(page, key)], availWidth, availHeight, dot)
         self.canv.drawTOCEntryEnd = drawTOCEntryEnd
 
@@ -424,10 +420,9 @@
         return list(self._lastEntries.items())
 
     def _build(self,availWidth,availHeight):
-        _tempEntries = [(tuple(asUnicode(t) for t in texts),pageNumbers)
-                            for texts, pageNumbers in self._getlastEntries()]
+        _tempEntries = self._getlastEntries()
         def getkey(seq):
-            return [''.join((c for c in unicodedata.normalize('NFD', x.upper()) if unicodedata.category(c) != 'Mn')) for x in seq[0]]
+            return [x.upper() for x in seq[0]]
         _tempEntries.sort(key=getkey)
         leveloffset = self.headers and 1 or 0
 
@@ -447,7 +442,7 @@
             #track when the first character changes; either output some extra
             #space, or the first letter on a row of its own.  We cannot do
             #widow/orphan control, sadly.
-            nalpha = ''.join((c for c in unicodedata.normalize('NFD', texts[0][0].upper()) if unicodedata.category(c) != 'Mn'))
+            nalpha = texts[0][0].upper()
             if alpha != nalpha:
                 alpha = nalpha
                 if self.headers:
diff --git a/src/reportlab/platypus/tables.py b/src/reportlab/platypus/tables.py
--- a/src/reportlab/platypus/tables.py
+++ b/src/reportlab/platypus/tables.py
@@ -203,8 +203,7 @@
 class Table(Flowable):
     def __init__(self, data, colWidths=None, rowHeights=None, style=None,
                 repeatRows=0, repeatCols=0, splitByRow=1, emptyTableAction=None, ident=None,
-                hAlign=None,vAlign=None, normalizedData=0, cellStyles=None, rowSplitRange=None,
-                spaceBefore=None,spaceAfter=None):
+                hAlign=None,vAlign=None, normalizedData=0, cellStyles=None):
         self.ident = ident
         self.hAlign = hAlign or 'CENTER'
         self.vAlign = vAlign or 'MIDDLE'
@@ -279,8 +278,6 @@
         self._linecmds = []
         self._spanCmds = []
         self._nosplitCmds = []
-        # NB repeatRows can be a list or tuple eg (1,) reapesat only the second row of a table
-        # or an integer eg 2 to repeat both rows 0 & 1
         self.repeatRows = repeatRows
         self.repeatCols = repeatCols
         self.splitByRow = splitByRow
@@ -288,12 +285,6 @@
         if style:
             self.setStyle(style)
 
-        self._rowSplitRange = rowSplitRange
-        if spaceBefore is not None:
-            self.spaceBefore = spaceBefore
-        if spaceAfter is not None:
-            self.spaceAfter = spaceAfter
-
     def __repr__(self):
         "incomplete, but better than nothing"
         r = getattr(self,'_rowHeights','[unknown]')
@@ -1210,17 +1201,6 @@
                 if er>=repeatRows and er<n: er=repeatRows
                 elif er>=repeatRows and er>=n: er=er+repeatRows-n
                 self._addCommand((c[0],)+((sc, sr), (ec, er))+c[3:])
-        sr = self._rowSplitRange
-        if sr:
-            sr, er = sr
-            if sr>=0 and sr>=repeatRows and sr<n and er>=0 and er<n:
-                self._rowSplitRange = None
-            else:
-                if sr>=repeatRows and sr<n: sr=repeatRows
-                elif sr>=repeatRows and sr>=n: sr=sr+repeatRows-n
-                if er>=repeatRows and er<n: er=repeatRows
-                elif er>=repeatRows and er>=n: er=er+repeatRows-n
-                self._rowSplitRange = sr,er
 
     def _cr_1_0(self,n,cmds):
         for c in cmds:
@@ -1236,21 +1216,11 @@
 
     def _splitRows(self,availHeight):
         n=self._getFirstPossibleSplitRowPosition(availHeight)
-        repeatRows = self.repeatRows
-        if n<= (repeatRows if isinstance(repeatRows,int) else (max(repeatRows)+1)): return []
+        if n<=self.repeatRows: return []
         lim = len(self._rowHeights)
         if n==lim: return [self]
 
-        lo = self._rowSplitRange
-        if lo:
-            lo, hi = lo
-            if lo<0: lo += lim
-            if hi<0: hi += lim
-            if n>hi:
-                return self._splitRows(availHeight - sum(self._rowHeights[hi:n]))
-            elif n<lo:
-                return []
-
+        repeatRows = self.repeatRows
         repeatCols = self.repeatCols
         splitByRow = self.splitByRow
         data = self._cellvalues
@@ -1261,8 +1231,7 @@
         R0 = self.__class__( data[:n], colWidths=self._colWidths, rowHeights=self._argH[:n],
                 repeatRows=repeatRows, repeatCols=repeatCols,
                 splitByRow=splitByRow, normalizedData=1, cellStyles=self._cellStyles[:n],
-                ident=ident,
-                spaceBefore=getattr(self,'spaceBefore',None))
+                ident=ident)
 
         #copy the commands
 
@@ -1318,37 +1287,24 @@
 
         if ident: ident = IdentStr(ident)
         if repeatRows:
-            if isinstance(repeatRows,int):
-                iRows = data[:repeatRows]
-                nRepeatRows = repeatRows
-                iRowH = self._argH[:repeatRows]
-                iCS = self._cellStyles[:repeatRows]
-            else:
-                #we have a list of repeated rows eg (1,3)
-                repeatRows = list(sorted(repeatRows))
-                iRows = [data[i] for i in repeatRows]
-                nRepeatRows = len(repeatRows)
-                iRowH = [self._argH[i] for i in repeatRows]
-                iCS = [self._cellStyles[i] for i in repeatRows]
-            R1 = self.__class__(iRows+data[n:],colWidths=self._colWidths,
-                    rowHeights=iRowH+self._argH[n:],
-                    repeatRows=nRepeatRows, repeatCols=repeatCols,
+            #R1 = slelf.__class__(data[:repeatRows]+data[n:],self._argW,
+            R1 = self.__class__(data[:repeatRows]+data[n:],colWidths=self._colWidths,
+                    rowHeights=self._argH[:repeatRows]+self._argH[n:],
+                    repeatRows=repeatRows, repeatCols=repeatCols,
                     splitByRow=splitByRow, normalizedData=1,
-                    cellStyles=iCS+self._cellStyles[n:],
+                    cellStyles=self._cellStyles[:repeatRows]+self._cellStyles[n:],
                     ident=ident,
-                    spaceAfter=getattr(self,'spaceAfter',None),
                     )
-            R1._cr_1_1(n,nRepeatRows,A)
-            R1._cr_1_1(n,nRepeatRows,self._bkgrndcmds)
-            R1._cr_1_1(n,nRepeatRows,self._spanCmds)
-            R1._cr_1_1(n,nRepeatRows,self._nosplitCmds)
+            R1._cr_1_1(n,repeatRows,A)
+            R1._cr_1_1(n,repeatRows,self._bkgrndcmds)
+            R1._cr_1_1(n,repeatRows,self._spanCmds)
+            R1._cr_1_1(n,repeatRows,self._nosplitCmds)
         else:
             #R1 = slelf.__class__(data[n:], self._argW, self._argH[n:],
             R1 = self.__class__(data[n:], colWidths=self._colWidths, rowHeights=self._argH[n:],
                     repeatRows=repeatRows, repeatCols=repeatCols,
                     splitByRow=splitByRow, normalizedData=1, cellStyles=self._cellStyles[n:],
                     ident=ident,
-                    spaceAfter=getattr(self,'spaceAfter',None),
                     )
             R1._cr_1_0(n,A)
             R1._cr_1_0(n,self._bkgrndcmds)
diff --git a/src/reportlab/rl_config.py b/src/reportlab/rl_config.py
--- a/src/reportlab/rl_config.py
+++ b/src/reportlab/rl_config.py
@@ -31,8 +31,8 @@
         _overrides=_DEFAULTS.copy()
         try:
             try:
-                fn = os.path.expanduser(os.path.join('~','.reportlab_settings'))    #appengine fails with KeyError/ImportError (dev/live)
-            except (KeyError, ImportError):
+                fn = os.path.expanduser(os.path.join('~','.reportlab_settings'))    #appengine fails with ImportError
+            except ImportError:
                 fn = None
             if fn:
                 with open(fn,'rb') as f:
@@ -96,8 +96,8 @@
                 d = (p % D).replace('/',os.sep)
                 if '~' in d:
                     try:
-                        d = os.path.expanduser(d)   #appengine fails with KeyError/ImportError (dev/live)
-                    except (KeyError, ImportError):
+                        d = os.path.expanduser(d)   #appengine fails with ImportError
+                    except ImportError:
                         continue
                 if rl_isdir(d): P.append(d)
             _setOpt(k,os.pathsep.join(P),lambda x:x.split(os.pathsep))
diff --git a/src/reportlab/rl_settings.py b/src/reportlab/rl_settings.py
--- a/src/reportlab/rl_settings.py
+++ b/src/reportlab/rl_settings.py
@@ -49,8 +49,7 @@
 TTFSearchPath
 CMapSearchPath
 baseUnderlineProportion
-decimalSymbol
-errorOnDuplicatePageLabelPage'''.split())
+decimalSymbol'''.split())
 
 allowTableBoundsErrors =    1 # set to 0 to die on too large elements in tables in debug (recommend 1 for production use)
 shapeChecking =             1
@@ -103,7 +102,6 @@
 baseUnderlineProportion=    0.0                     #non-zero for doing font size proportional lines in Paragraph.py
                                                     #by default typical value 0.05. may be overridden on a parastyle.
 decimalSymbol=              '.'                     #what we use to align floats numerically
-errorOnDuplicatePageLabelPage= 0                    #if True will cause repeated PageLabel page numbers to raise an error.
 
 # places to look for T1Font information
 T1SearchPath =  (
diff --git a/tests/test_pdfbase_pdfform.py b/tests/test_pdfbase_pdfform.py
deleted file mode 100644
--- a/tests/test_pdfbase_pdfform.py
+++ /dev/null
@@ -1,52 +0,0 @@
-from reportlab.lib.testutils import setOutDir,makeSuiteForClasses, outputfile, printLocation, NearTestCase
-setOutDir(__name__)
-import unittest
-from reportlab.pdfgen import canvas
-from reportlab.pdfbase import pdfform
-
-class PdfFormTestCase(NearTestCase):
-    def testMultipleUsage(self):
-        for i in range(2):
-            c = canvas.Canvas(outputfile('test_pdfbase_pdfform_multiple_usage_%s.pdf'%i))
-            c.drawString(100, 100, "Test")
-            pdfform.buttonFieldAbsolute(c, 'button', 'Off', 200, 200)
-            c.save()
-
-    def testAAbsoluteAndRelativeFields(self):
-        #the old test1 in pdfform
-        c = canvas.Canvas(outputfile("test_pdfbase_pdfform_formtest.pdf"))
-        # first page
-        c.setFont("Courier", 10)
-        c.drawString(100, 500, "hello world")
-        pdfform.textFieldAbsolute(c, "fieldA", 100, 600, 100, 20, "default value")
-        pdfform.textFieldAbsolute(c, "fieldB", 100, 300, 100, 50, "another default value", multiline=1)
-        pdfform.selectFieldAbsolute(c, "fieldC", "France", ["Canada", "France", "China"], 100, 200, 100, 20)
-        c.rect(100, 600, 100, 20)
-        pdfform.buttonFieldAbsolute(c, "field2", "Yes", 100, 700, width=20, height=20)
-        c.rect(100, 700, 20, 20)
-        pdfform.buttonFieldAbsolute(c, "field3", "Off", 100, 800, width=20, height=20)
-        c.rect(100, 800, 20, 20)
-        # second page
-        c.showPage()
-        c.setFont("Helvetica", 7)
-        c.translate(50, 20)
-        c.drawString(100, 500, "hello world")
-        pdfform.textFieldRelative(c, "fieldA_1", 100, 600, 100, 20, "default value 2")
-        c.setStrokeColorRGB(1,0,0)
-        c.setFillColorRGB(0,1,0.5)
-        pdfform.textFieldRelative(c, "fieldB_1", 100, 300, 100, 50, "another default value 2", multiline=1)
-        pdfform.selectFieldRelative(c, "fieldC_1", "France 1", ["Canada 0", "France 1", "China 2"], 100, 200, 100, 20)
-        c.rect(100, 600, 100, 20)
-        pdfform.buttonFieldRelative(c, "field2_1", "Yes", 100, 700, width=20, height=20)
-        c.rect(100, 700, 20, 20)
-        pdfform.buttonFieldRelative(c, "field3_1", "Off", 100, 800, width=20, height=20)
-        c.rect(100, 800, 20, 20)
-        c.save()
-
-def makeSuite():
-    return makeSuiteForClasses(PdfFormTestCase)
-
-#noruntests
-if __name__ == "__main__":
-    unittest.TextTestRunner().run(makeSuite())
-    printLocation()
diff --git a/tests/test_pdfgen_general.py b/tests/test_pdfgen_general.py
--- a/tests/test_pdfgen_general.py
+++ b/tests/test_pdfgen_general.py
@@ -188,7 +188,6 @@
     #the extra arg is a hack added later, so other
     #tests can get hold of the canvas just before it is
     #saved
-    from reportlab.lib.colors import red, green, blue
     global titlelist, closeit
     titlelist = []
     closeit = 0
@@ -520,11 +519,11 @@
 
     t = c.beginText(inch, 2.75 * inch)
     t.setFont('Times-Bold',36)
-    t.setFillColor(green)  #green
+    t.setFillColor(colors.green)  #green
     t.textLine('Green fill, no stroke')
 
     #t.setStrokeColorRGB(1,0,0)  #ou can do this in a text object, or the canvas.
-    t.setStrokeColor(red)  #ou can do this in a text object, or the canvas.
+    t.setStrokeColor(colors.red)  #ou can do this in a text object, or the canvas.
     t.setTextRenderMode(2)   # fill and stroke
     t.textLine('Green fill, red stroke - yuk!')
 
@@ -536,59 +535,7 @@
 
 #########################################################################
 #
-#  Page 5 - character spacing
-#
-#########################################################################
-    framePage(c, "Character Spacing")
-
-    c.drawString(inch, 10*inch, 'Listing available fonts...')
-    def drawBox(x,y,width,height,color=green,anchor='start'):
-        if anchor=='end':
-            x -= width
-        elif anchor in ('centre','center'):
-            x = 0.5*width 
-        c.saveState()
-        c.setDash(2,2)
-        c.setStrokeColor(color)
-        c.setLineWidth(0.01)
-        c.rect(x,y,width,height,fill=0,stroke=1)
-        c.restoreState()
-
-    y = 9.5*inch
-    x = 72
-    def drawString(x,y, s,fontName,fontSize,cs=1,anchor='start'):
-        c.setFont(fontName, fontSize)
-        y -= 12
-        w = c.stringWidth(s)
-        func = c.drawString if anchor=='start' else c.drawRightString if anchor=='end' else c.drawCentredString
-        func(x, y, s)
-        drawBox(x,y,w,10,anchor=anchor)
-        y -= 12
-        func(x, y, s,charSpace=cs)
-        n = len(s) - 1
-        drawBox(x,y,w+n,10,anchor=anchor)
-        y -= 12
-        return x,y
-
-    x,y = drawString(x,y,u'Hello World','Helvetica',10)
-    x,y = drawString(x,y,u'M','Helvetica',10)
-    x,y = drawString(x,y,u'MM','Helvetica',10)
-    x,y = drawString(x,y,u'M M','Helvetica',10)
-    x,y = drawString(x,y,u'M    M','Helvetica',10)
-
-    x = 3*72
-    y = 9.5*inch
-    x,y = drawString(x,y,u'Hello World','Helvetica',10,anchor='end')
-    x,y = drawString(x,y,u'M','Helvetica',10,anchor='end')
-    x,y = drawString(x,y,u'MM','Helvetica',10,anchor='end')
-    x,y = drawString(x,y,u'M M','Helvetica',10,anchor='end')
-    x,y = drawString(x,y,u'M    M','Helvetica',10,anchor='end')
-
-    c.showPage()
-
-#########################################################################
-#
-#  Page 6 - coord transforms
+#  Page 5 - coord transforms
 #
 #########################################################################
     framePage(c, "Coordinate Transforms")
@@ -635,7 +582,7 @@
 
 #########################################################################
 #
-#  Page 7 - clipping
+#  Page 6 - clipping
 #
 #########################################################################
     framePage(c, "Clipping")
@@ -705,7 +652,7 @@
 
 #########################################################################
 #
-#  Page 8 - images
+#  Page 7 - images
 #
 #########################################################################
     framePage(c, "Images")
@@ -876,7 +823,7 @@
 
 #########################################################################
 #
-#  Page 9 - Forms and simple links
+#  Page 8 - Forms and simple links
 #
 #########################################################################
     framePage(c, "Forms and Links")
@@ -913,7 +860,7 @@
 
     # test URLs
     r1 = (inch, 3*inch, 5*inch, 3.25*inch) # this is x1,y1,x2,y2
-    c.linkURL('http://www.reportlab.com/', r1, thickness=1, color=green)
+    c.linkURL('http://www.reportlab.com/', r1, thickness=1, color=colors.green)
     c.drawString(inch+3, 3*inch+6, 'Hyperlink to www.reportlab.com, with green border')
 
     r1 = (inch, 2.5*inch, 5*inch, 2.75*inch) # this is x1,y1,x2,y2
@@ -930,7 +877,7 @@
     xpdf = fileName2FSEnc(outputfile('test_hello.pdf').replace('\\','/'))
     link = 'Hard link to %s, with red border' % xpdf
     r1 = (inch, 1.5*inch, inch+2*3+c.stringWidth(link,c._fontname, c._fontsize), 1.75*inch) # this is x1,y1,x2,y2
-    c.linkURL(xpdf, r1, thickness=1, color=red, kind='GoToR')
+    c.linkURL(xpdf, r1, thickness=1, color=colors.red, kind='GoToR')
     c.drawString(inch+3, 1.5*inch+6, link )
     c.showPage()
 
@@ -939,6 +886,7 @@
     c.drawString(1*inch,10.8*inch,title)
     c.addOutlineEntry(title+" section", title, level=0, closed=True)
     c.bookmarkHorizontalAbsolute(title, 10.8*inch)
+    from reportlab.lib.colors import red, green, blue
 
     c.saveState()
     p = c.beginPath()
@@ -1022,15 +970,12 @@
         c.addPageLabel(11, style='ARABIC',start=6)
         c.addPageLabel(17, style='ARABIC', start=14)
         c.addPageLabel(21, style='ARABIC', start=22)
-        #check that duplicate page start will not cause sort error in python 3.x
-        c.addPageLabel(98, style='ROMAN_LOWER', start=99, prefix='r')
-        c.addPageLabel(98, style='ARABIC', start=99, prefix='A')
         c.addPageLabel(99, style='LETTERS_UPPER')
         c.addPageLabel(102, prefix="Back",start=1)
 
         # Make some (mostly) empty pages
         for i in range(113):
-            c.drawString(100, 100, 'This is page '+str(i))
+            c.drawString(100, 100, 'Tis is page '+str(i))
             c.showPage()
 
         # Output the PDF
diff --git a/tests/test_platypus_index.py b/tests/test_platypus_index.py
--- a/tests/test_platypus_index.py
+++ b/tests/test_platypus_index.py
@@ -10,7 +10,7 @@
 from math import sqrt
 import unittest
 from reportlab.lib.units import cm
-from reportlab.lib.utils import commajoin, asUnicode
+from reportlab.lib.utils import commajoin
 from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
 from reportlab.platypus.paragraph import Paragraph
 from reportlab.platypus.xpreformatted import XPreformatted
@@ -95,20 +95,13 @@
             story.append(Paragraph(description, bt))
             index = SimpleIndex(dot=' . ', headers=headers)
 
-            def addParas(words):
-                words = [asUnicode(w) for w in words]
-                txt = u' '.join([(len(w) > 5 and u'<index item=%s/>%s' % (quoteattr(commajoin([w[:2], w[:3], w])), w) or w) for w in words])
+    
+            for i in range(20):
+                words = randomtext.randomText(randomtext.PYTHON, 5).split(' ')
+                txt = ' '.join([(len(w) > 5 and '<index item=%s/>%s' % (quoteattr(commajoin([w[:2], w[:3], w])), w) or w) for w in words])
                 para = Paragraph(txt, makeBodyStyle())
                 story.append(para)
-    
-            for i in xrange(20):
-                addParas(randomtext.randomText(randomtext.PYTHON, 5).split(' '))
-            addParas([u+w for u in u'E\xc8\xc9\xca\xcb' for w in (u'erily',u'asily')])
-            addParas([u+w for u in u'A\xc0\xc4\xc1\xc3\xc2' for w in (u'dvance',u'ttend')])
-            addParas([u+w for u in u'O\xd2\xd6\xd3\xd2' for w in (u'rdinary',u'verflow')])
-            addParas([u+w for u in u'U\xd9\xdc\xdb' for w in (u'ndertow',u'nbeliever')])
-            addParas([u+w for u in u'e\xe8\xea\xeb\xe9' for w in (u'ventide',u'lision')])
-            addParas([u+w for u in u'o\xf2\xf5\xf3\xf4' for w in (u'verture',u'ntology')])
+
 
             #test ampersand in index term
             txt = '\nMarks &amp; Spencer - purveyors of fine groceries, underwear and ampersands - should have their initials displayed however they were input.\n<index item="M&amp;S,groceries"/><index item="M&amp;S,underwear"/><index item="M&amp;S,ampersands"/>'
