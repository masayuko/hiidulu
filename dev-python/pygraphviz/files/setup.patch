diff --git a/pygraphviz/__init__.py b/pygraphviz/__init__.py
index a807801..edd3ea9 100644
--- a/pygraphviz/__init__.py
+++ b/pygraphviz/__init__.py
@@ -25,7 +25,7 @@ See pygraphviz.AGraph for detailed documentation.
 #    All rights reserved, see LICENSE for details.
 
 # Release data
-import release 
+from pygraphviz import release
 
 if release.revision is None:
     # we probably not running in an svn directory   
@@ -51,7 +51,7 @@ __author__   = '%s <%s>\n%s <%s>\n%s <%s>' % \
                 release.authors['Renieris'] )
 __license__  = release.license
 
-from agraph import AGraph, Node, Edge, Attribute, ItemAttribute
+from pygraphviz.agraph import AGraph, Node, Edge, Attribute, ItemAttribute
 
 __all__=[
     'AGraph',
@@ -62,11 +62,11 @@ __all__=[
     ]
 
 def version():
-    from agraph import _get_prog
+    from pygraphviz.agraph import _get_prog
     import os
-    print "pygraphviz-"+__version__
+    print("pygraphviz-"+__version__)
     neato=_get_prog('neato')
     os.system(neato+' -V')
 
 # import tests: run as pygraphviz.test()
-from tests import run as test
+from pygraphviz.tests import run as test
diff --git a/pygraphviz/agraph.py b/pygraphviz/agraph.py
index a9d8252..04bfe79 100644
--- a/pygraphviz/agraph.py
+++ b/pygraphviz/agraph.py
@@ -15,9 +15,18 @@ import subprocess
 import sys
 import threading
 import warnings
-import UserDict
-
-import graphviz as gv
+try:
+    from UserDict import UserDict
+    from UserDict import DictMixin
+except ImportError:
+    from collections import UserDict
+    from collections import MutableMapping as DictMixin
+try:
+    unicode
+except NameError:
+    unicode = str
+
+from pygraphviz import graphviz as gv
 
 _DEFAULT_ENCODING = 'UTF-8'
 
@@ -212,8 +221,8 @@ class AGraph(object):
     def __exit__(self, ext_type, exc_value, traceback):
         self.close()
 
-    def __str__(self):
-        return unicode(self).encode(self.encoding,'replace')
+    #def __str__(self):
+    #    return unicode(self).encode(self.encoding,'replace')
 
     def __unicode__(self):
         return self.string()
@@ -1179,7 +1188,7 @@ class AGraph(object):
                 gv.agclose(self.handle)
             self.handle = gv.agread(fh,None)
         except IOError:
-            print "IO error reading file"
+            print("IO error reading file")
 
     def write(self, path=None):
         """Write graph in dot format to file on path.
@@ -1196,7 +1205,7 @@ class AGraph(object):
         try:
             gv.agwrite(self.handle,fh)
         except IOError:
-            print "IO error writing file"
+            print("IO error writing file")
 
 
     def string_nop(self):
@@ -1491,7 +1500,7 @@ class AGraph(object):
 #                fh = bz2.BZ2File(path,mode=mode) # doesn't return real fh
                  fh=os.popen("bzcat "+path) # probably not portable
             else:
-                fh = file(path,mode=mode)
+                fh = open(path,mode=mode)
         elif hasattr(path, 'write'):
             # Note, mode of file handle is unchanged.
             fh = path
@@ -1650,7 +1659,7 @@ class Edge(tuple):
     key=property(get_name)
 
 
-class Attribute(UserDict.DictMixin):
+class Attribute(DictMixin):
     """Default attributes for graphs.
 
     Assigned on initialization of AGraph class.
@@ -1770,7 +1779,7 @@ class ItemAttribute(Attribute):
         if not is_string_like(value):
             value=str(value)
         if self.type==1 and name=='label':
-            default='\N'
+            default=r'\N'
         else:
             default=''
         gv.agsafeset_label(self.ghandle,self.handle,
@@ -1823,7 +1832,7 @@ if __name__ == "__main__":
     import sys
     import unittest
     if sys.version_info[:2] < (2, 4):
-        print "Python version 2.4 or later required for tests (%d.%d detected)." %  sys.version_info[:2]
+        print("Python version 2.4 or later required for tests (%d.%d detected)." %  sys.version_info[:2])
         sys.exit(-1)
     # directory of package (relative to this)
     nxbase=sys.path[0]+os.sep+os.pardir
diff --git a/pygraphviz/graphviz.i b/pygraphviz/graphviz.i
index fa48dd1..7ec1949 100644
--- a/pygraphviz/graphviz.i
+++ b/pygraphviz/graphviz.i
@@ -13,11 +13,21 @@
 
 
 %typemap(in) FILE* {
-    if (!PyFile_Check($input)) {
+	%#if PY_VERSION_HEX < 0x03000000
+	if (!PyFile_Check($input)) {
         PyErr_SetString(PyExc_TypeError, "not a file handle");
         return NULL;
     }
-    $1 = PyFile_AsFile($input);
+	$1 = PyFile_AsFile($input);
+	%#else
+	extern PyTypeObject PyIOBase_Type;
+    if (!PyObject_IsInstance($input, (PyObject *)&PyIOBase_Type)) { 
+        PyErr_SetString(PyExc_TypeError, "not a file handle");
+        return NULL;
+    }
+	int fd = PyObject_AsFileDescriptor($input);
+	$1 = fdopen(fd, "w");
+    %#endif
 }
 
 
diff --git a/pygraphviz/tests/__init__.py b/pygraphviz/tests/__init__.py
index 460d56b..9d0e222 100644
--- a/pygraphviz/tests/__init__.py
+++ b/pygraphviz/tests/__init__.py
@@ -1 +1 @@
-from test import run
+from pygraphviz.tests.test import run
diff --git a/pygraphviz/tests/test.py b/pygraphviz/tests/test.py
index 77cf565..210c061 100644
--- a/pygraphviz/tests/test.py
+++ b/pygraphviz/tests/test.py
@@ -25,7 +25,7 @@ def test_suite():
 
 def run():
     if sys.version_info[:2] < (2, 4):
-        print "Python version 2.4 or later required for tests (%d.%d detected)." %  sys.version_info[:2]
+        print("Python version 2.4 or later required for tests (%d.%d detected)." %  sys.version_info[:2])
         sys.exit(-1)
     runner = unittest.TextTestRunner()
     runner.run(test_suite())
@@ -33,13 +33,13 @@ def run():
 
 if __name__ == "__main__":
     if sys.version_info[:2] < (2, 4):
-        print "Python version 2.4 or later required for tests (%d.%d detected)." %  sys.version_info[:2]
+        print("Python version 2.4 or later required for tests (%d.%d detected)." %  sys.version_info[:2])
         sys.exit(-1)
     try:
         import pygraphviz
     except:
-        print "Can't import pygraphviz module, not in path"
-        print sys.path
+        print("Can't import pygraphviz module, not in path")
+        print(sys.path)
         raise
     
     run()
diff --git a/setup.py b/setup.py
index f92ef42..38648f1 100644
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,3 @@
-#!/usr/bin/env python
 # -*- coding: utf-8 -*-
 """
 Setup script for PyGraphviz
@@ -15,19 +14,10 @@ import os
 import sys
 if os.path.exists('MANIFEST'): os.remove('MANIFEST')
 
-from distutils.core import setup, Extension
+from setuptools import setup, Extension
 
 from setup_extra import pkg_config, dotneato_config
 
-if sys.argv[-1] == 'setup.py':
-    print "To install, run 'python setup.py install'"
-    print
-
-if sys.version_info[:2] < (2, 4):
-    print "PyGraphviz requires Python version 2.4 or later (%d.%d detected)." % \
-          sys.version_info[:2]
-    sys.exit(-1)
-
 library_path=None
 include_path=None
 
@@ -56,16 +46,16 @@ include_path=None
 
 # Attempt to find Graphviz installation
 if library_path is None and include_path is None:
-    print "Trying pkg-config"
+    print("Trying pkg-config")
     include_path,library_path=pkg_config()
 
 if library_path is None and include_path is None:
-    print "Trying dotneato-config"
+    print("Trying dotneato-config")
     include_path,library_path=dotneato_config()
 
 if library_path is None or include_path is None:
-    print 
-    print  """Your Graphviz installation could not be found.
+    print('')
+    print("""Your Graphviz installation could not be found.
 
 1) You don't have Graphviz installed:
    Install Graphviz (http://graphviz.org)
@@ -82,14 +72,14 @@ If you think your installation is correct you will need to manually
 change the include_path and library_path variables in setup.py to
 point to the correct locations of your graphviz installation.
 
-The current setting of library_path and include_path is:"""
-    print "library_path=%s"%library_path
-    print "include_path=%s"%include_path
-    print
-    raise OSError,"Error locating graphviz."
+The current setting of library_path and include_path is:""")
+    print("library_path=%s"%library_path)
+    print("include_path=%s"%include_path)
+    print('')
+    raise OSError("Error locating graphviz.")
 
-print "library_path=%s"%library_path
-print "include_path=%s"%include_path
+print("library_path=%s"%library_path)
+print("include_path=%s"%include_path)
 
 if len(library_path)>0:
     library_dirs=[library_path]
diff --git a/setup_extra.py b/setup_extra.py
index f1201da..7b90064 100644
--- a/setup_extra.py
+++ b/setup_extra.py
@@ -1,4 +1,3 @@
-#!/usr/bin/env python
 # -*- coding: utf-8 -*-
 """
 Setup helpers for PyGraphviz.
@@ -18,10 +17,10 @@ def pkg_config():
     try:
         import subprocess as S
     except ImportError:
-        print """-- Missing subprocess package:
+        print("""-- Missing subprocess package:
         Install subprocess from
         http://effbot.org/downloads/#subprocess
-        or set the graphviz paths manually as described below."""
+        or set the graphviz paths manually as described below.""")
 
     library_path=None
     include_path=None
@@ -31,15 +30,15 @@ def pkg_config():
                            shell=True, stdin=S.PIPE, stdout=S.PIPE,
                            close_fds=True).communicate()
         if output:
-            library_path=output.strip()[2:]
+            library_path=output.strip()[2:].decode('utf-8')
         output,err = \
                    S.Popen('pkg-config --cflags-only-I libcgraph',
                            shell=True, stdin=S.PIPE, stdout=S.PIPE,
                            close_fds=True).communicate()
         if output:
-            include_path=output.strip()[2:]
+            include_path=output.strip()[2:].decode('utf-8')
     except:
-        print "Failed to find pkg-config"
+        print("Failed to find pkg-config")
     return include_path,library_path
 
 def dotneato_config():
@@ -50,10 +49,10 @@ def dotneato_config():
     try:
         import subprocess as S
     except ImportError:
-        print """-- Missing subprocess package:
+        print("""-- Missing subprocess package:
         Install subprocess from
         http://effbot.org/downloads/#subprocess
-        or set the graphviz paths manually as described below."""
+        or set the graphviz paths manually as described below.""")
     library_path=None
     include_path=None
     try:
@@ -71,7 +70,7 @@ def dotneato_config():
                 library_path=library_path.strip()[2:]
                 include_path=include_path.strip()[2:]
     except:
-        print "Failed to find dotneato-config"
+        print("Failed to find dotneato-config")
     return include_path,library_path
 
 
