diff -r ec8bdb11097b src/blockdiag/imagedraw/png.py
--- a/src/blockdiag/imagedraw/png.py	Mon Sep 02 03:24:03 2013 +0900
+++ b/src/blockdiag/imagedraw/png.py	Wed Sep 18 20:02:30 2013 +0900
@@ -13,6 +13,10 @@
 #  See the License for the specific language governing permissions and
 #  limitations under the License.
 
+from __future__ import division
+import sys
+if sys.version_info[0] == 2:
+    range = xrange
 import re
 import math
 from itertools import tee
@@ -51,7 +55,7 @@
 
 def line_segments(xylist):
     p1, p2 = tee(point_pairs(xylist))
-    p2.next()
+    next(p2)
     return zip(p1, p2)
 
 
@@ -61,7 +65,7 @@
         if pt1[1] > pt2[1]:
             pt2, pt1 = line
 
-        r = stepslice(xrange(pt1[1], pt2[1]), length)
+        r = stepslice(range(pt1[1], pt2[1]), length)
         for y1, y2 in istep(n for n in r):
             yield [(pt1[0], y1), (pt1[0], y2)]
 
@@ -69,7 +73,7 @@
         if pt1[0] > pt2[0]:
             pt2, pt1 = line
 
-        r = stepslice(xrange(pt1[0], pt2[0]), length)
+        r = stepslice(range(pt1[0], pt2[0]), length)
         for x1, x2 in istep(n for n in r):
             yield [(x1, pt1[1]), (x2, pt1[1])]
     else:  # diagonal
@@ -308,8 +312,8 @@
                 draw.text((0, 0), string, fill=fill)
                 del draw
 
-                basesize = (size[0] * self.scale_ratio,
-                            size[1] * self.scale_ratio)
+                basesize = (int(size[0] * self.scale_ratio),
+                            int(size[1] * self.scale_ratio))
                 text_image = image.resize(basesize, Image.ANTIALIAS)
                 self.paste(text_image, xy, text_image)
         else:
@@ -382,12 +386,12 @@
         # centering image.
         w, h = image.size
         if box.width > w:
-            x = box[0] + (box.width - w) / 2
+            x = box[0] + (box.width - w) // 2
         else:
             x = box[0]
 
         if box.height > h:
-            y = box[1] + (box.height - h) / 2
+            y = box[1] + (box.height - h) // 2
         else:
             y = box[1]
 
diff -r ec8bdb11097b src/blockdiag/utils/__init__.py
--- a/src/blockdiag/utils/__init__.py	Mon Sep 02 03:24:03 2013 +0900
+++ b/src/blockdiag/utils/__init__.py	Wed Sep 18 20:02:30 2013 +0900
@@ -13,6 +13,7 @@
 #  See the License for the specific language governing permissions and
 #  limitations under the License.
 
+from __future__ import division
 import re
 import sys
 import math
@@ -99,7 +100,7 @@
 
     @property
     def top(self):
-        return XY(self.x1 + self.width / 2, self.y1)
+        return XY(self.x1 + self.width // 2, self.y1)
 
     @property
     def topright(self):
@@ -111,7 +112,7 @@
 
     @property
     def bottom(self):
-        return XY(self.x1 + self.width / 2, self.y2)
+        return XY(self.x1 + self.width // 2, self.y2)
 
     @property
     def bottomright(self):
@@ -119,15 +120,15 @@
 
     @property
     def left(self):
-        return XY(self.x1, self.y1 + self.height / 2)
+        return XY(self.x1, self.y1 + self.height // 2)
 
     @property
     def right(self):
-        return XY(self.x2, self.y1 + self.height / 2)
+        return XY(self.x2, self.y1 + self.height // 2)
 
     @property
     def center(self):
-        return XY(self.x1 + self.width / 2, self.y1 + self.height / 2)
+        return XY(self.x1 + self.width // 2, self.y1 + self.height // 2)
 
 
 def any(seq):
diff -r ec8bdb11097b src/blockdiag/utils/myitertools.py
--- a/src/blockdiag/utils/myitertools.py	Mon Sep 02 03:24:03 2013 +0900
+++ b/src/blockdiag/utils/myitertools.py	Wed Sep 18 20:02:30 2013 +0900
@@ -12,14 +12,16 @@
 #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 #  See the License for the specific language governing permissions and
 #  limitations under the License.
-
+import sys
+if sys.version_info[0] == 2:
+    range = xrange
 from itertools import cycle
 
 
 def istep(seq, step=2):
     iterable = iter(seq)
     while True:
-        yield [iterable.next() for _ in range(step)]
+        yield [next(iterable) for _ in range(step)]
 
 
 def stepslice(iterable, steps):
@@ -28,19 +30,19 @@
 
     while True:
         # skip (1)
-        n = step.next()
+        n = next(step)
         if n == 0:
             pass
         elif n == 1:
-            o = iterable.next()
+            o = next(iterable)
             yield o
             yield o
         else:
-            yield iterable.next()
-            for _ in xrange(n - 2):
-                iterable.next()
-            yield iterable.next()
+            yield next(iterable)
+            for _ in range(n - 2):
+                next(iterable)
+            yield next(iterable)
 
         # skip (2)
-        for _ in xrange(step.next()):
-            iterable.next()
+        for _ in range(next(step)):
+            next(iterable)
diff -r ec8bdb11097b src/blockdiag/utils/rst/directives.py
--- a/src/blockdiag/utils/rst/directives.py	Mon Sep 02 03:24:03 2013 +0900
+++ b/src/blockdiag/utils/rst/directives.py	Wed Sep 18 20:02:30 2013 +0900
@@ -25,6 +25,7 @@
 from blockdiag.utils import any
 from blockdiag.utils.bootstrap import detectfont
 from blockdiag.utils.rst.nodes import blockdiag
+from functools import cmp_to_key
 
 
 directive_options_default = dict(format='PNG',
@@ -59,7 +60,7 @@
     except (TypeError, ValueError):
         n2 = 65535
 
-    return cmp(n1, n2)
+    return -1 if n1 < n2 else ( 0 if n1 == n2 else 1)
 
 
 class BlockdiagDirectiveBase(rst.Directive):
@@ -262,7 +263,7 @@
         headers = [klass.attrname[n] for n in klass.desctable]
 
         descriptions = [n.to_desctable() for n in nodes if n.drawable]
-        descriptions.sort(cmp_node_number)
+        descriptions.sort(key=cmp_to_key(cmp_node_number))
 
         for i in reversed(range(len(headers))):
             if any(desc[i] for desc in descriptions):
