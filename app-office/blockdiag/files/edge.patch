diff -r 1b120326b282 -r 8c51cce1e9ea bootstrap.py
--- a/bootstrap.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/bootstrap.py	Sat Jul 06 17:01:45 2013 +0900
@@ -18,75 +18,10 @@
 use the -c option to specify an alternate configuration file.
 """
 
-import os, shutil, sys, tempfile, urllib, urllib2, subprocess
+import os, shutil, sys, tempfile
 from optparse import OptionParser
 
-if sys.platform == 'win32':
-    def quote(c):
-        if ' ' in c:
-            return '"%s"' % c  # work around spawn lamosity on windows
-        else:
-            return c
-else:
-    quote = str
-
-# See zc.buildout.easy_install._has_broken_dash_S for motivation and comments.
-stdout, stderr = subprocess.Popen(
-    [sys.executable, '-Sc',
-     'try:\n'
-     '    import ConfigParser\n'
-     'except ImportError:\n'
-     '    print 1\n'
-     'else:\n'
-     '    print 0\n'],
-    stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
-has_broken_dash_S = bool(int(stdout.strip()))
-
-# In order to be more robust in the face of system Pythons, we want to
-# run without site-packages loaded.  This is somewhat tricky, in
-# particular because Python 2.6's distutils imports site, so starting
-# with the -S flag is not sufficient.  However, we'll start with that:
-if not has_broken_dash_S and 'site' in sys.modules:
-    # We will restart with python -S.
-    args = sys.argv[:]
-    args[0:0] = [sys.executable, '-S']
-    args = map(quote, args)
-    os.execv(sys.executable, args)
-# Now we are running with -S.  We'll get the clean sys.path, import site
-# because distutils will do it later, and then reset the path and clean
-# out any namespace packages from site-packages that might have been
-# loaded by .pth files.
-clean_path = sys.path[:]
-import site  # imported because of its side effects
-sys.path[:] = clean_path
-for k, v in sys.modules.items():
-    if k in ('setuptools', 'pkg_resources') or (
-        hasattr(v, '__path__') and
-        len(v.__path__) == 1 and
-        not os.path.exists(os.path.join(v.__path__[0], '__init__.py'))):
-        # This is a namespace package.  Remove it.
-        sys.modules.pop(k)
-
-is_jython = sys.platform.startswith('java')
-
-setuptools_source = 'http://peak.telecommunity.com/dist/ez_setup.py'
-distribute_source = 'http://python-distribute.org/distribute_setup.py'
-
-
-# parsing arguments
-def normalize_to_url(option, opt_str, value, parser):
-    if value:
-        if '://' not in value:  # It doesn't smell like a URL.
-            value = 'file://%s' % (
-                urllib.pathname2url(
-                    os.path.abspath(os.path.expanduser(value))),)
-        if opt_str == '--download-base' and not value.endswith('/'):
-            # Download base needs a trailing slash to make the world happy.
-            value += '/'
-    else:
-        value = None
-    name = opt_str[2:].replace('-', '_')
-    setattr(parser.values, name, value)
+tmpeggs = tempfile.mkdtemp()
 
 usage = '''\
 [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
@@ -101,26 +36,8 @@
 '''
 
 parser = OptionParser(usage=usage)
-parser.add_option("-v", "--version", dest="version",
-                          help="use a specific zc.buildout version")
-parser.add_option("-d", "--distribute",
-                   action="store_true", dest="use_distribute", default=False,
-                   help="Use Distribute rather than Setuptools.")
-parser.add_option("--setup-source", action="callback", dest="setup_source",
-                  callback=normalize_to_url, nargs=1, type="string",
-                  help=("Specify a URL or file location for the setup file. "
-                        "If you use Setuptools, this will default to " +
-                        setuptools_source + "; if you use Distribute, this "
-                        "will default to " + distribute_source + "."))
-parser.add_option("--download-base", action="callback", dest="download_base",
-                  callback=normalize_to_url, nargs=1, type="string",
-                  help=("Specify a URL or directory for downloading "
-                        "zc.buildout and either Setuptools or Distribute. "
-                        "Defaults to PyPI."))
-parser.add_option("--eggs",
-                  help=("Specify a directory for storing eggs.  Defaults to "
-                        "a temporary directory that is deleted when the "
-                        "bootstrap script completes."))
+parser.add_option("-v", "--version", help="use a specific zc.buildout version")
+
 parser.add_option("-t", "--accept-buildout-test-releases",
                   dest='accept_buildout_test_releases',
                   action="store_true", default=False,
@@ -130,50 +47,38 @@
                         "extensions for you.  If you use this flag, "
                         "bootstrap and buildout will get the newest releases "
                         "even if they are alphas or betas."))
-parser.add_option("-c", None, action="store", dest="config_file",
+parser.add_option("-c", "--config-file",
                    help=("Specify the path to the buildout configuration "
                          "file to be used."))
+parser.add_option("-f", "--find-links",
+                   help=("Specify a URL to search for buildout releases"))
 
-options, orig_args = parser.parse_args()
 
-args = []
+options, args = parser.parse_args()
 
-# if -c was provided, we push it back into args for buildout's main function
-if options.config_file is not None:
-    args += ['-c', options.config_file]
+######################################################################
+# load/install distribute
 
-if options.eggs:
-    eggs_dir = os.path.abspath(os.path.expanduser(options.eggs))
-else:
-    eggs_dir = tempfile.mkdtemp()
-
-if options.setup_source is None:
-    if options.use_distribute:
-        options.setup_source = distribute_source
-    else:
-        options.setup_source = setuptools_source
-
-if options.accept_buildout_test_releases:
-    args.append('buildout:accept-buildout-test-releases=true')
-
+to_reload = False
 try:
-    import pkg_resources
-    import setuptools  # A flag.  Sometimes pkg_resources is installed alone.
+    import pkg_resources, setuptools
     if not hasattr(pkg_resources, '_distribute'):
+        to_reload = True
         raise ImportError
 except ImportError:
-    ez_code = urllib2.urlopen(
-        options.setup_source).read().replace('\r\n', '\n')
     ez = {}
-    exec ez_code in ez
-    setup_args = dict(to_dir=eggs_dir, download_delay=0)
-    if options.download_base:
-        setup_args['download_base'] = options.download_base
-    if options.use_distribute:
-        setup_args['no_fake'] = True
+
+    try:
+        from urllib.request import urlopen
+    except ImportError:
+        from urllib2 import urlopen
+
+    exec(urlopen('http://python-distribute.org/distribute_setup.py').read(), ez)
+    setup_args = dict(to_dir=tmpeggs, download_delay=0, no_fake=True)
     ez['use_setuptools'](**setup_args)
-    if 'pkg_resources' in sys.modules:
-        reload(sys.modules['pkg_resources'])
+
+    if to_reload:
+        reload(pkg_resources)
     import pkg_resources
     # This does not (always?) update the default working set.  We will
     # do it.
@@ -181,31 +86,26 @@
         if path not in pkg_resources.working_set.entries:
             pkg_resources.working_set.add_entry(path)
 
-cmd = [quote(sys.executable),
-       '-c',
-       quote('from setuptools.command.easy_install import main; main()'),
-       '-mqNxd',
-       quote(eggs_dir)]
+######################################################################
+# Install buildout
 
-if not has_broken_dash_S:
-    cmd.insert(1, '-S')
+ws  = pkg_resources.working_set
 
-find_links = options.download_base
-if not find_links:
-    find_links = os.environ.get('bootstrap-testing-find-links')
+cmd = [sys.executable, '-c',
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
 if find_links:
-    cmd.extend(['-f', quote(find_links)])
+    cmd.extend(['-f', find_links])
 
-if options.use_distribute:
-    setup_requirement = 'distribute'
-else:
-    setup_requirement = 'setuptools'
-ws = pkg_resources.working_set
-setup_requirement_path = ws.find(
-    pkg_resources.Requirement.parse(setup_requirement)).location
-env = dict(
-    os.environ,
-    PYTHONPATH=setup_requirement_path)
+distribute_path = ws.find(
+    pkg_resources.Requirement.parse('distribute')).location
 
 requirement = 'zc.buildout'
 version = options.version
@@ -213,14 +113,13 @@
     # Figure out the most recent final version of zc.buildout.
     import setuptools.package_index
     _final_parts = '*final-', '*final'
-
     def _final_version(parsed_version):
         for part in parsed_version:
             if (part[:1] == '*') and (part not in _final_parts):
                 return False
         return True
     index = setuptools.package_index.PackageIndex(
-        search_path=[setup_requirement_path])
+        search_path=[distribute_path])
     if find_links:
         index.add_find_links((find_links,))
     req = pkg_resources.Requirement.parse(requirement)
@@ -242,25 +141,25 @@
     requirement = '=='.join((requirement, version))
 cmd.append(requirement)
 
-if is_jython:
-    import subprocess
-    exitcode = subprocess.Popen(cmd, env=env).wait()
-else:  # Windows prefers this, apparently; otherwise we would prefer subprocess
-    exitcode = os.spawnle(*([os.P_WAIT, sys.executable] + cmd + [env]))
-if exitcode != 0:
-    sys.stdout.flush()
-    sys.stderr.flush()
-    print ("An error occurred when trying to install zc.buildout. "
-           "Look above this message for any errors that "
-           "were output by easy_install.")
-    sys.exit(exitcode)
+import subprocess
+if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=distribute_path)) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s",
+        repr(cmd)[1:-1])
 
-ws.add_entry(eggs_dir)
+######################################################################
+# Import and run buildout
+
+ws.add_entry(tmpeggs)
 ws.require(requirement)
 import zc.buildout.buildout
-if orig_args:
-    # run buildout with commands passed to bootstrap.py, then actually bootstrap
-    zc.buildout.buildout.main(args + orig_args)
-zc.buildout.buildout.main(args + ['bootstrap'])
-if not options.eggs:  # clean up temporary egg directory
-    shutil.rmtree(eggs_dir)
+
+if not [a for a in args if '=' not in a]:
+    args.append('bootstrap')
+
+# if -c was provided, we push it back into args for buildout' main function
+if options.config_file is not None:
+    args[0:0] = ['-c', options.config_file]
+
+zc.buildout.buildout.main(args)
+shutil.rmtree(tmpeggs)
diff -r 1b120326b282 -r 8c51cce1e9ea src/README.txt
--- a/src/README.txt	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/README.txt	Sat Jul 06 17:01:45 2013 +0900
@@ -102,6 +102,7 @@
 * Python 2.4 or later (not support 3.x)
 * Python Imaging Library 1.1.5 or later.
 * funcparserlib 0.3.4 or later.
+* webcolors 1.3 or later.
 * setuptools or distribute.
 
 
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/drawer.py
--- a/src/blockdiag/drawer.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag/drawer.py	Sat Jul 06 17:01:45 2013 +0900
@@ -13,9 +13,9 @@
 #  See the License for the specific language governing permissions and
 #  limitations under the License.
 
+from collections import defaultdict
 from blockdiag import imagedraw, noderenderer
 from blockdiag.metrics import AutoScaler, DiagramMetrics
-from blockdiag.utils.collections import defaultdict
 
 
 class DiagramDraw(object):
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/imagedraw/base.py
--- a/src/blockdiag/imagedraw/base.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag/imagedraw/base.py	Sat Jul 06 17:01:45 2013 +0900
@@ -13,9 +13,9 @@
 #  See the License for the specific language governing permissions and
 #  limitations under the License.
 
+from functools import partial
 from blockdiag.imagedraw import textfolder
 from blockdiag.utils import Box
-from blockdiag.utils.functools import partial
 
 
 class ImageDraw(object):
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/imagedraw/filters/linejump.py
--- a/src/blockdiag/imagedraw/filters/linejump.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag/imagedraw/filters/linejump.py	Sat Jul 06 17:01:45 2013 +0900
@@ -13,10 +13,11 @@
 #  See the License for the specific language governing permissions and
 #  limitations under the License.
 
-from blockdiag.utils import functools, Box, XY
+import functools
+from blockdiag.utils import Box, XY
 
 
-class LazyReciever(object):
+class LazyReceiver(object):
     def __init__(self, target):
         self.target = target
         self.calls = []
@@ -31,9 +32,9 @@
         def _(*args, **kwargs):
             if name in self.target.self_generative_methods:
                 ret = method(self.target, *args, **kwargs)
-                reciever = LazyReciever(ret)
-                self.nested.append(reciever)
-                return reciever
+                receiver = LazyReceiver(ret)
+                self.nested.append(receiver)
+                return receiver
             else:
                 self.calls.append((method, args, kwargs))
                 return self
@@ -59,7 +60,7 @@
             method(self.target, *args, **kwargs)
 
 
-class LineJumpDrawFilter(LazyReciever):
+class LineJumpDrawFilter(LazyReceiver):
     def __init__(self, target, jump_radius):
         super(LineJumpDrawFilter, self).__init__(target)
         self.ytree = []
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/imagedraw/pdf.py
--- a/src/blockdiag/imagedraw/pdf.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag/imagedraw/pdf.py	Sat Jul 06 17:01:45 2013 +0900
@@ -16,6 +16,7 @@
 import re
 import sys
 import math
+from functools import partial
 from reportlab.pdfgen import canvas
 from reportlab.pdfbase import pdfmetrics
 from reportlab.pdfbase.ttfonts import TTFont
@@ -23,7 +24,6 @@
 from blockdiag.imagedraw.utils import cached
 from blockdiag.utils import urlutil, Box, Size
 from blockdiag.utils.fontmap import parse_fontpath
-from blockdiag.utils.functools import partial
 
 
 class PDFImageDraw(base.ImageDraw):
@@ -34,6 +34,8 @@
         self.canvas = None
         self.fonts = {}
 
+        self.set_canvas_size(Size(1, 1))  # This line make textsize() workable
+
     def set_canvas_size(self, size):
         self.canvas = canvas.Canvas(self.filename, pagesize=size)
         self.size = size
@@ -128,6 +130,7 @@
 
     @cached
     def textlinesize(self, string, font):
+        self.set_font(font)
         width = self.canvas.stringWidth(string, font.path, font.size)
         return Size(int(math.ceil(width)), font.size)
 
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/imagedraw/png.py
--- a/src/blockdiag/imagedraw/png.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag/imagedraw/png.py	Sat Jul 06 17:01:45 2013 +0900
@@ -16,12 +16,12 @@
 import re
 import math
 from itertools import izip, tee
+from functools import partial, wraps
 from blockdiag.imagedraw import base
 from blockdiag.imagedraw.utils import cached, ellipse
 from blockdiag.imagedraw.utils.ellipse import dots as ellipse_dots
 from blockdiag.utils import urlutil, Box, Size, XY
 from blockdiag.utils.fontmap import parse_fontpath, FontMap
-from blockdiag.utils.functools import partial, wraps
 from blockdiag.utils.myitertools import istep, stepslice
 
 try:
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/imagedraw/svg.py
--- a/src/blockdiag/imagedraw/svg.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag/imagedraw/svg.py	Sat Jul 06 17:01:45 2013 +0900
@@ -19,8 +19,7 @@
 from blockdiag.imagedraw.simplesvg import *
 from blockdiag.imagedraw.utils import cached
 from blockdiag.imagedraw.utils.ellipse import endpoints as ellipse_endpoints
-from blockdiag.utils import urlutil, Box, XY
-from blockdiag.utils.functools import partial
+from blockdiag.utils import urlutil, Box, XY, is_PIL_available
 
 feGaussianBlur = svgclass('feGaussianBlur')
 
@@ -107,7 +106,7 @@
 
     @cached
     def textlinesize(self, string, font, **kwargs):
-        if kwargs.get('ignore_pil', self.ignore_pil):
+        if kwargs.get('ignore_pil', self.ignore_pil) or not is_PIL_available():
             from blockdiag.imagedraw.utils import textsize
             return textsize(string, font)
         else:
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/metrics.py
--- a/src/blockdiag/metrics.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag/metrics.py	Sat Jul 06 17:01:45 2013 +0900
@@ -14,11 +14,11 @@
 #  limitations under the License.
 
 import copy
+from collections import defaultdict
 from blockdiag import noderenderer
 from blockdiag.elements import DiagramNode
 from blockdiag.utils import Box, Size, XY
 from blockdiag.utils.fontmap import FontInfo, FontMap
-from blockdiag.utils.collections import defaultdict
 
 cellsize = 8
 
@@ -234,6 +234,10 @@
 
 class SubMetrics(object):
     def __getattr__(self, name):
+        # avoid recursion-error on Python 2.6
+        if 'metrics' not in self.__dict__:
+            raise AttributeError()
+
         return getattr(self.metrics, name)
 
 
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/parser.py
--- a/src/blockdiag/parser.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag/parser.py	Sat Jul 06 17:01:45 2013 +0900
@@ -37,11 +37,11 @@
 
 import codecs
 from re import MULTILINE, DOTALL
+from collections import namedtuple
 from funcparserlib.lexer import make_tokenizer, Token, LexerError
 from funcparserlib.parser import (some, a, maybe, many, finished, skip,
                                   forward_decl)
 
-from blockdiag.utils.collections import namedtuple
 
 ENCODING = 'utf-8'
 
@@ -217,5 +217,5 @@
 
 
 def parse_file(path):
-    code = codecs.open(path, 'r', 'utf-8').read()
+    code = codecs.open(path, 'r', 'utf-8-sig').read()
     return parse_string(code)
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/tests/test_builder_node.py
--- a/src/blockdiag/tests/test_builder_node.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag/tests/test_builder_node.py	Sat Jul 06 17:01:45 2013 +0900
@@ -1,9 +1,8 @@
 # -*- coding: utf-8 -*-
 
+from collections import defaultdict
 from blockdiag.tests.utils import __build_diagram, __validate_node_attributes
 
-from blockdiag.utils.collections import defaultdict
-
 
 def test_single_node_diagram():
     diagram = __build_diagram('single_node.diag')
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/tests/test_utils_fontmap.py
--- a/src/blockdiag/tests/test_utils_fontmap.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag/tests/test_utils_fontmap.py	Sat Jul 06 17:01:45 2013 +0900
@@ -7,7 +7,7 @@
 from blockdiag.tests.utils import stderr_wrapper, assertRaises
 
 from cStringIO import StringIO
-from blockdiag.utils.collections import namedtuple
+from collections import namedtuple
 from blockdiag.utils.fontmap import FontInfo, FontMap
 
 
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/utils/__init__.py
--- a/src/blockdiag/utils/__init__.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag/utils/__init__.py	Sat Jul 06 17:01:45 2013 +0900
@@ -14,8 +14,9 @@
 #  limitations under the License.
 
 import re
+import sys
 import math
-from blockdiag.utils.collections import namedtuple
+from collections import namedtuple
 
 
 Size = namedtuple('Size', 'width height')
@@ -123,6 +124,14 @@
         return XY(self.x1 + self.width / 2, self.y1 + self.height / 2)
 
 
+def any(seq):
+    for element in seq:
+        if element:
+            return True
+
+    return False
+
+
 def unquote(string):
     """
     Remove quotas from string
@@ -144,3 +153,34 @@
             return string
     else:
         return string
+
+
+class codecs(object):
+    @staticmethod
+    def getreader(encoding):
+        import codecs
+        return codecs.getreader(encoding)
+
+    @staticmethod
+    def open(filename, mode, encoding):
+        import codecs
+        if sys.version_info <= (2, 5) and encoding == 'utf-8-sig':
+            fd = codecs.open(path, mode, 'utf-8')
+            if fd.read(1) != u'\uFEFF':  # skip BOM
+                fd.seek(0)
+        else:
+            fd = codecs.open(filename, mode, encoding)
+
+        return fd
+
+
+def is_PIL_available():
+    try:
+        try:
+            from PIL import _imagingft
+        except ImportError:
+            import _imagingft
+
+        return True
+    except ImportError:
+        return False
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/utils/bootstrap.py
--- a/src/blockdiag/utils/bootstrap.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag/utils/bootstrap.py	Sat Jul 06 17:01:45 2013 +0900
@@ -16,6 +16,7 @@
 import os
 import re
 import sys
+import codecs
 from optparse import OptionParser
 from blockdiag import imagedraw
 from blockdiag.utils.config import ConfigParser
@@ -72,12 +73,12 @@
                 raise RuntimeError(msg)
 
     def parse_diagram(self):
-        import codecs
         if self.options.input == '-':
-            stream = codecs.getreader('utf-8')(sys.stdin)
+            stream = codecs.getreader('utf-8-sig')(sys.stdin)
             self.code = stream.read()
         else:
-            self.code = codecs.open(self.options.input, 'r', 'utf-8').read()
+            fp = codecs.open(self.options.input, 'r', 'utf-8-sig')
+            self.code = fp.read()
 
         return self.module.parser.parse_string(self.code)
 
@@ -253,6 +254,7 @@
         'AppleGothic.ttf',
         'msgothic.ttf',
         'msgoth04.ttf',
+        'msgothic.ttc',
     ]
 
     fontpath = None
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/utils/config.py
--- a/src/blockdiag/utils/config.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag/utils/config.py	Sat Jul 06 17:01:45 2013 +0900
@@ -30,10 +30,6 @@
             SafeConfigParser.__init__(self)
 
     def read(self, path):
-        if sys.version_info > (2, 5):
-            fd = codecs.open(path, 'r', 'utf-8-sig')
-        else:
-            fd = codecs.open(path, 'r', 'utf-8')
-
+        fd = codecs.open(path, 'r', 'utf-8-sig')
         self.readfp(fd)
         fd.close()
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/utils/fontmap.py
--- a/src/blockdiag/utils/fontmap.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag/utils/fontmap.py	Sat Jul 06 17:01:45 2013 +0900
@@ -17,8 +17,8 @@
 import os
 import sys
 import copy
+from collections import namedtuple
 from blockdiag.utils.config import ConfigParser
-from blockdiag.utils.collections import namedtuple
 
 
 def parse_fontpath(path):
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/utils/namedtuple.py
--- a/src/blockdiag/utils/namedtuple.py	Wed Nov 21 22:20:43 2012 +0900
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,18 +0,0 @@
-# -*- coding: utf-8 -*-
-#  Copyright 2011 Takeshi KOMIYA
-#
-#  Licensed under the Apache License, Version 2.0 (the "License");
-#  you may not use this file except in compliance with the License.
-#  You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-#  Unless required by applicable law or agreed to in writing, software
-#  distributed under the License is distributed on an "AS IS" BASIS,
-#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-#  See the License for the specific language governing permissions and
-#  limitations under the License.
-
-
-from blockdiag.utils.collections import namedtuple
-namedtuple
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag/utils/rst/directives.py
--- a/src/blockdiag/utils/rst/directives.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag/utils/rst/directives.py	Sat Jul 06 17:01:45 2013 +0900
@@ -15,14 +15,15 @@
 
 import os
 import codecs
+from collections import namedtuple
 from docutils import nodes
 from docutils.parsers import rst
 from docutils.statemachine import ViewList
 from blockdiag import parser
 from blockdiag.builder import ScreenNodeBuilder
 from blockdiag.drawer import DiagramDraw
+from blockdiag.utils import any
 from blockdiag.utils.bootstrap import detectfont
-from blockdiag.utils.collections import namedtuple
 from blockdiag.utils.rst.nodes import blockdiag
 
 
@@ -87,7 +88,7 @@
 
             try:
                 filename = self.source_filename(self.arguments[0])
-                fp = codecs.open(filename, 'r', 'utf-8')
+                fp = codecs.open(filename, 'r', 'utf-8-sig')
                 try:
                     dotcode = fp.read()
                 finally:
diff -r 1b120326b282 -r 8c51cce1e9ea src/blockdiag_sphinxhelper.py
--- a/src/blockdiag_sphinxhelper.py	Wed Nov 21 22:20:43 2012 +0900
+++ b/src/blockdiag_sphinxhelper.py	Sat Jul 06 17:01:45 2013 +0900
@@ -27,8 +27,8 @@
 from blockdiag.utils.rst import directives
 
 # FIXME: obsoleted interface (keep for compatibility)
+import collections
 from blockdiag import command, parser, builder, drawer
-from blockdiag.utils import collections
 from blockdiag.utils.fontmap import FontMap
 from blockdiag.utils.rst.directives import blockdiag, BlockdiagDirective
 
