diff -uNr nwdiag-0.9.4.orig/src/nwdiag/builder.py nwdiag-0.9.4/src/nwdiag/builder.py
--- nwdiag-0.9.4.orig/src/nwdiag/builder.py	2012-11-23 00:07:06.000000000 +0900
+++ nwdiag-0.9.4/src/nwdiag/builder.py	2013-09-18 20:19:43.922944098 +0900
@@ -199,7 +199,7 @@
 
                 starts = 0
                 if layouted:
-                    layouted.sort(lambda a, b: cmp(a.xy.x, b.xy.x))
+                    layouted.sort(key=lambda a: a.xy.x)
                     basenode = layouted[0]
                     commonnw = set(basenode.networks) & set(node.networks)
 
@@ -238,7 +238,7 @@
     def set_network_size(self):
         for network in self.diagram.networks:
             nodes = [n for n in self.diagram.nodes if network in n.networks]
-            nodes.sort(lambda a, b: cmp(a.xy.x, b.xy.x))
+            nodes.sort(key=lambda a: a.xy.x)
 
             x0 = min(n.xy.x for n in nodes)
             network.xy = XY(x0, network.xy.y)
@@ -248,7 +248,7 @@
 
     def set_group_size(self, group):
         nodes = list(group.nodes)
-        nodes.sort(lambda a, b: cmp(a.xy.x, b.xy.x))
+        nodes.sort(key=lambda a: a.xy.x)
 
         x0 = min(n.xy.x for n in nodes)
         y0 = min(n.xy.y for n in nodes)
diff -uNr nwdiag-0.9.4.orig/src/nwdiag/drawer.py nwdiag-0.9.4/src/nwdiag/drawer.py
--- nwdiag-0.9.4.orig/src/nwdiag/drawer.py	2012-11-23 00:07:06.000000000 +0900
+++ nwdiag-0.9.4/src/nwdiag/drawer.py	2013-09-18 20:19:43.923944098 +0900
@@ -13,6 +13,7 @@
 #  See the License for the specific language governing permissions and
 #  limitations under the License.
 
+from __future__ import division
 import blockdiag.drawer
 from nwdiag.metrics import DiagramMetrics
 from blockdiag.utils import Box, XY
@@ -54,10 +55,10 @@
 
                 if (self.diagram.external_connector and
                    (network == self.diagram.networks[0])):
-                    r = metrics.trunk_diameter / 2
+                    r = metrics.trunk_diameter // 2
 
                     pt = metrics.network(network).top
-                    pt0 = XY(pt.x, pt.y - metrics.span_height * 2 / 3)
+                    pt0 = XY(pt.x, pt.y - metrics.span_height * 2 // 3)
                     pt1 = XY(pt.x, pt.y - r)
 
                     self.drawer.line([pt0, pt1], fill=network.linecolor)
@@ -65,14 +66,14 @@
     def trunkline(self, network, shadow=False):
         metrics = self.metrics
         m = metrics.network(network)
-        r = metrics.trunk_diameter / 2
+        r = metrics.trunk_diameter // 2
 
         pt1, pt2 = m.trunkline
         box = Box(pt1.x, pt1.y - r, pt2.x, pt2.y + r)
 
         if shadow:
             xdiff = self.metrics.shadow_offset.x
-            ydiff = self.metrics.shadow_offset.y / 2
+            ydiff = self.metrics.shadow_offset.y // 2
 
             box = Box(pt1.x + xdiff, pt1.y - r + ydiff,
                       pt2.x + xdiff, pt2.y + r + ydiff)
@@ -82,9 +83,9 @@
 
             path = pathdata(box[0], box[1])
             path.line(box[2], box[1])
-            path.ellarc(r / 2, r, 0, 0, 1, box[2], box[3])
+            path.ellarc(r // 2, r, 0, 0, 1, box[2], box[3])
             path.line(box[0], box[3])
-            path.ellarc(r / 2, r, 0, 0, 1, box[0], box[1])
+            path.ellarc(r // 2, r, 0, 0, 1, box[0], box[1])
 
             if shadow:
                 self.drawer.path(path, fill=self.shadow, filter='blur')
@@ -93,15 +94,15 @@
                                  outline=network.linecolor)
 
                 path = pathdata(box[2], box[3])
-                path.ellarc(r / 2, r, 0, 0, 1, box[2], box[1])
+                path.ellarc(r // 2, r, 0, 0, 1, box[2], box[1])
                 self.drawer.path(path, fill='none', outline=network.linecolor)
 
                 # for edge jumping
                 line = (XY(box[0], box[1]), XY(box[2], box[1]))
                 self.drawer.line(line, fill='none', jump=True)
         else:
-            lsection = Box(box[0] - r / 2, box[1], box[0] + r / 2, box[3])
-            rsection = Box(box[2] - r / 2, box[1], box[2] + r / 2, box[3])
+            lsection = Box(box[0] - r // 2, box[1], box[0] + r // 2, box[3])
+            rsection = Box(box[2] - r // 2, box[1], box[2] + r // 2, box[3])
 
             if shadow:
                 color = self.shadow
diff -uNr nwdiag-0.9.4.orig/src/nwdiag/metrics.py nwdiag-0.9.4/src/nwdiag/metrics.py
--- nwdiag-0.9.4.orig/src/nwdiag/metrics.py	2012-11-23 00:07:06.000000000 +0900
+++ nwdiag-0.9.4/src/nwdiag/metrics.py	2013-09-18 20:19:43.923944098 +0900
@@ -13,6 +13,7 @@
 #  See the License for the specific language governing permissions and
 #  limitations under the License.
 
+from __future__ import division
 import math
 import blockdiag.metrics
 from nwdiag import elements
@@ -32,9 +33,9 @@
 
         self.networks = diagram.networks
         self.trunk_diameter = self.cellsize
-        self.jump_shift = self.trunk_diameter / 2
+        self.jump_shift = self.trunk_diameter // 2
         self.jump_radius = self.trunk_diameter
-        self.page_padding = [self.span_height / 2, 0, 0, self.node_width]
+        self.page_padding = [self.span_height // 2, 0, 0, self.node_width]
 
         for node in diagram.nodes:
             bottom = [n for n in node.networks if n.xy.y > node.xy.y]
@@ -74,27 +75,27 @@
     @property
     def top(self):
         pt = self.box.top
-        return XY(pt.x, pt.y - self.span_height / 2)
+        return XY(pt.x, pt.y - self.span_height // 2)
 
     @property
     def left(self):
         pt = self.box.left
-        return XY(pt.x - self.span_width / 2, pt.y)
+        return XY(pt.x - self.span_width // 2, pt.y)
 
     @property
     def right(self):
         pt = self.box.right
-        return XY(pt.x + self.span_width / 2, pt.y)
+        return XY(pt.x + self.span_width // 2, pt.y)
 
     @property
     def textbox(self):
         x = self.left.x
         y = self.top.y
 
-        width = self.node_width * 3 / 2
+        width = self.node_width * 3 // 2
         height = self.node_height
 
-        return Box(x - width, y - height / 2, x, y + height / 2)
+        return Box(x - width, y - height // 2, x, y + height // 2)
 
 
 class NodeMetrics(blockdiag.metrics.NodeMetrics):
@@ -105,10 +106,10 @@
     @property
     def connectors(self):
         above = [n for n in self.node.networks if n.xy.y <= self.node.xy.y]
-        above.sort(lambda a, b: -cmp(a.xy.y, b.xy.y))
+        above.sort(key=lambda a: a.xy.y, reverse=True)
 
         bottom = [n for n in self.node.networks if n.xy.y > self.node.xy.y]
-        bottom.sort(lambda a, b: cmp(a.xy.y, b.xy.y))
+        bottom.sort(key=lambda a: a.xy.y)
 
         Connector = namedtuple('Connector', 'network line textbox')
 
@@ -118,7 +119,7 @@
                 if network.hidden:
                     span = 0
                 else:
-                    span = self.trunk_diameter / 2
+                    span = self.trunk_diameter // 2
 
                 if network.xy.y <= self.node.xy.y:
                     x, y2 = self.top
@@ -131,13 +132,13 @@
                     dx = 0
                 else:
                     pos = networks.index(network)
-                    base_x = (len(networks) - 1) / 2.0 - pos
+                    base_x = (len(networks) - 1) // 2.0 - pos
                     dx = int(math.floor(base_x * self.cellsize * 2))
 
                 width = self.node_width + self.span_width
-                textbox = Box(x + dx + self.cellsize / 2,
-                              y2 - self.span_height / 2,
-                              x + width - self.cellsize / 2,
+                textbox = Box(x + dx + self.cellsize // 2,
+                              y2 - self.span_height // 2,
+                              x + width - self.cellsize // 2,
                               y2)
                 line = [XY(x + dx, y1), XY(x + dx, y2)]
 
@@ -154,7 +155,7 @@
         self.is_root_group = False
         if group.nodes:
             networks = group.nodes[0].networks[:]
-            networks.sort(lambda a, b: cmp(a.xy.y, b.xy.y))
+            networks.sort(key=lambda a: a.xy.y)
             network = min(networks)
             if self.top.x == metrics.network(network).top.x:
                 self.is_root_group = True
@@ -166,7 +167,7 @@
         box = Box(box[0], box[1] + span, box[2], box[3] + span)
 
         if self.is_root_group:
-            width = (self.node_width + self.span_width) / 2
+            width = (self.node_width + self.span_width) // 2
             box = Box(box[0] + width, box[1], box[2] + width, box[3])
 
         return box
@@ -174,7 +175,7 @@
     @property
     def marginbox(self):
         box = super(GroupMetrics, self).box
-        margin_x = self.span_height / 2 - self.cellsize
+        margin_x = self.span_height // 2 - self.cellsize
         margin_y = self.cellsize
         return Box(box[0] - margin_y, box[1] - margin_x,
                    box[2] + margin_y, box[3] + margin_x)
diff -uNr nwdiag-0.9.4.orig/src/nwdiag/parser.py nwdiag-0.9.4/src/nwdiag/parser.py
--- nwdiag-0.9.4.orig/src/nwdiag/parser.py	2013-09-18 20:19:11.291945384 +0900
+++ nwdiag-0.9.4/src/nwdiag/parser.py	2013-09-18 20:19:43.923944098 +0900
@@ -61,14 +61,14 @@
 
 
 def tokenize(string):
-    'str -> Sequence(Token)'
+    """str -> Sequence(Token)"""
     specs = [
         ('Comment', (r'/\*(.|[\r\n])*?\*/', MULTILINE)),
         ('Comment', (r'(//|#).*',)),
         ('NL',      (r'[\r\n]+',)),
         ('Space',   (r'[ \t\r\n]+',)),
-        ('Name',    (ur'[A-Za-z_\u0080-\uffff]'
-                     ur'[A-Za-z_\-.0-9\u0080-\uffff]*',)),
+        ('Name',    (u'[A-Za-z_\u0080-\uffff]'
+                     u'[A-Za-z_\\-.0-9\u0080-\uffff]*',)),
         ('Op',      (r'([{};,=\[\]]|--|->)',)),
         ('IPAddr',  (r'([0-9]+(\.[0-9]+){3}|[:0-9a-fA-F]+)',)),
         ('Number',  (r'-?(\.[0-9]+)|([0-9]+(\.[0-9]*)?)',)),
@@ -80,7 +80,7 @@
 
 
 def parse(seq):
-    'Sequence(Token) -> object'
+    """Sequence(Token) -> object"""
     unarg = lambda f: lambda args: f(*args)
     tokval = lambda x: x.value
     flatten = lambda list: sum(list, [])
@@ -189,11 +189,8 @@
         else:
             return 2
 
-    def compare(node1, node2):
-        return cmp(weight(node1), weight(node2))
-
     if hasattr(tree, 'stmts'):
-        tree.stmts.sort(compare)
+        tree.stmts.sort(key=lambda x: weight(x))
         for stmt in tree.stmts:
             sort_tree(stmt)
 
@@ -204,10 +201,10 @@
     try:
         tree = parse(tokenize(string))
         return sort_tree(tree)
-    except LexerError, e:
+    except LexerError as e:
         message = "Got unexpected token at line %d column %d" % e.place
         raise ParseException(message)
-    except Exception, e:
+    except Exception as e:
         raise ParseException(str(e))
 
 
diff -uNr nwdiag-0.9.4.orig/src/nwdiag/tests/test_builder.py nwdiag-0.9.4/src/nwdiag/tests/test_builder.py
--- nwdiag-0.9.4.orig/src/nwdiag/tests/test_builder.py	2012-10-17 17:46:44.000000000 +0900
+++ nwdiag-0.9.4/src/nwdiag/tests/test_builder.py	2013-09-18 20:19:43.924944098 +0900
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 
+from __future__ import print_function
 from nwdiag.builder import *
 from nwdiag.elements import *
 from nwdiag.parser import *
@@ -68,7 +69,7 @@
 
     assert_pos = {'A': (0, 0), 'B': (0, 1)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
 
@@ -77,7 +78,7 @@
 
     assert_pos = {'A': (0, 0)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
 
@@ -86,7 +87,7 @@
 
     assert_pos = {'A': (0, 0), 'B': (1, 1)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
 
@@ -96,7 +97,7 @@
     assert_pos = {'A': (0, 0), 'B': (1, 0), 'C': (2, 0), 'D': (3, 0),
                   'E': (4, 0), 'Z': (3, 1)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
 
@@ -107,7 +108,7 @@
                   'E': (4, 0), 'F': (5, 0), 'G': (6, 0), 'H': (1, 1),
                   'I': (2, 1), 'J': (4, 2), 'K': (5, 2)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
 
@@ -116,7 +117,7 @@
 
     assert_pos = {'A': (0, 0), 'B': (1, 0)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
     assert len(screen.groups[0].nodes) == 2
@@ -129,7 +130,7 @@
 
     assert_pos = {'A': (0, 0), 'B': (1, 0)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
     assert len(screen.groups[0].nodes) == 2
@@ -142,7 +143,7 @@
 
     assert_pos = {'A': (0, 0), 'B': (1, 0), 'C': (2, 1)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
     assert len(screen.groups[0].nodes) == 3
@@ -156,7 +157,7 @@
     assert_pos = {'A': (0, 0), 'B': (1, 0), 'C': (0, 1),
                   'D': (2, 1), 'E': (3, 1)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
 
@@ -166,7 +167,7 @@
     assert_pos = {'A': (0, 0), 'B': (1, 0), 'C': (3, 0),
                   'D': (2, 0), 'E': (4, 0)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
 
@@ -175,7 +176,7 @@
 
     assert_pos = {'A': (0, 0), 'B': (0, 1), 'C': (1, 2)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
 
@@ -184,7 +185,7 @@
 
     assert_pos = {'A': (0, 0), 'B': (1, 0), 'C': (1, 1)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
 
@@ -193,7 +194,7 @@
 
     assert_pos = {'A': (0, 0), 'B': (1, 0), 'C': (1, 1), 'D': (1, 2)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
 
@@ -202,7 +203,7 @@
 
     assert_pos = {'A': (0, 0), 'B': (1, 1), 'C': (1, 2)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
 
@@ -211,7 +212,7 @@
 
     assert_pos = {'A': (0, 0), 'B': (1, 0), 'C': (2, 0), 'D': (2, 1)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
 
@@ -220,7 +221,7 @@
 
     assert_pos = {'A': (0, 0), 'B': (0, 1), 'C': (1, 2), 'D': (1, 3)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
 
@@ -229,7 +230,7 @@
 
     assert_pos = {'A': (0, 0), 'B': (0, 1), 'C': (1, 2), 'D': (0, 3)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
 
 
@@ -238,5 +239,5 @@
 
     assert_pos = {'A': (0, 0), 'B': (0, 1), 'C': (1, 2)}
     for node in screen.nodes:
-        print assert_pos[node.id], node.xy
+        print(assert_pos[node.id], node.xy)
         assert node.xy == assert_pos[node.id]
diff -uNr nwdiag-0.9.4.orig/src/nwdiag/tests/test_pep8.py nwdiag-0.9.4/src/nwdiag/tests/test_pep8.py
--- nwdiag-0.9.4.orig/src/nwdiag/tests/test_pep8.py	2012-11-23 00:07:14.000000000 +0900
+++ nwdiag-0.9.4/src/nwdiag/tests/test_pep8.py	2013-09-18 20:19:43.924944098 +0900
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 
+from __future__ import print_function
 import os
 import sys
 import pep8
@@ -48,5 +49,5 @@
     errors = report.get_count('E')
     warnings = report.get_count('W')
     message = 'pep8: %d errors / %d warnings' % (errors, warnings)
-    print message
+    print(message)
     assert report.total_errors == 0, message
diff -uNr nwdiag-0.9.4.orig/src/packetdiag/builder.py nwdiag-0.9.4/src/packetdiag/builder.py
--- nwdiag-0.9.4.orig/src/packetdiag/builder.py	2013-09-18 20:19:11.298945383 +0900
+++ nwdiag-0.9.4/src/packetdiag/builder.py	2013-09-18 20:19:43.924944098 +0900
@@ -13,6 +13,7 @@
 #  See the License for the specific language governing permissions and
 #  limitations under the License.
 
+from __future__ import division
 from packetdiag import parser
 from packetdiag.elements import Diagram, FieldItem, DiagramNode
 from blockdiag.utils import XY
@@ -81,7 +82,7 @@
         filled = {}
         for field in self.split_field_by_column():
             x = field.number % self.diagram.colwidth
-            y = field.number / self.diagram.colwidth
+            y = field.number // self.diagram.colwidth
 
             if filled.get(y) is None:
                 filled[y] = {}
diff -uNr nwdiag-0.9.4.orig/src/packetdiag/drawer.py nwdiag-0.9.4/src/packetdiag/drawer.py
--- nwdiag-0.9.4.orig/src/packetdiag/drawer.py	2013-09-18 20:19:11.299945383 +0900
+++ nwdiag-0.9.4/src/packetdiag/drawer.py	2013-09-18 20:21:56.051938893 +0900
@@ -15,7 +15,11 @@
 
 import blockdiag.drawer
 from packetdiag.metrics import DiagramMetrics
-
+import sys
+if sys.version_info[0] == 2:
+    def u(x): return unicode(x)
+else:
+    def u(x): return str(x)
 
 class DiagramDraw(blockdiag.drawer.DiagramDraw):
     def create_metrics(self, *args, **kwargs):
@@ -38,9 +42,9 @@
                 box = self.metrics.measure_label(i)
 
                 if self.diagram.scale_direction == "left_to_right":
-                    label = unicode(i)
+                    label = u(i)
                 else:
-                    label = unicode(self.diagram.colwidth - i)
+                    label = u(self.diagram.colwidth - i)
 
                 self.drawer.textarea(box, label, font,
                                      fill=self.diagram.textcolor)
diff -uNr nwdiag-0.9.4.orig/src/packetdiag/parser.py nwdiag-0.9.4/src/packetdiag/parser.py
--- nwdiag-0.9.4.orig/src/packetdiag/parser.py	2013-09-18 20:19:11.300945383 +0900
+++ nwdiag-0.9.4/src/packetdiag/parser.py	2013-09-18 20:22:41.563937100 +0900
@@ -56,7 +56,7 @@
 
 
 def tokenize(string):
-    'str -> Sequence(Token)'
+    """str -> Sequence(Token)"""
     specs = [
         ('Comment', (r'/\*(.|[\r\n])*?\*/', MULTILINE)),
         ('Comment', (r'(//|#).*',)),
@@ -66,8 +66,8 @@
         ('Range',  (r'[0-9]+-[0-9]+',)),
         ('Number',  (r'[0-9]+',)),
         ('FieldListItem', (r'[\*\-]\s*[^\r\n\[]+',)),
-        ('Name',    (ur'[A-Za-z_0-9\u0080-\uffff]'
-                     ur'[A-Za-z_\-.0-9\u0080-\uffff]*',)),
+        ('Name',    (u'[A-Za-z_0-9\u0080-\uffff]'
+                     u'[A-Za-z_\\-.0-9\u0080-\uffff]*',)),
         ('Op',      (r'[{}:;,=\[\]]',)),
         ('String',  (r'(?P<quote>"|\').*?(?<!\\)(?P=quote)', DOTALL)),
     ]
@@ -77,7 +77,7 @@
 
 
 def parse(seq):
-    'Sequence(Token) -> object'
+    """Sequence(Token) -> object"""
     unarg = lambda f: lambda args: f(*args)
     tokval = lambda x: x.value
     flatten = lambda list: sum(list, [])
@@ -152,11 +152,8 @@
         else:
             return 2
 
-    def compare(a, b):
-        return cmp(weight(a), weight(b))
-
     if hasattr(tree, 'stmts'):
-        tree.stmts.sort(compare)
+        tree.stmts.sort(key=lambda x: weight(x))
         for stmt in tree.stmts:
             sort_tree(stmt)
 
@@ -167,10 +164,10 @@
     try:
         tree = parse(tokenize(string))
         return sort_tree(tree)
-    except LexerError, e:
+    except LexerError as e:
         message = "Got unexpected token at line %d column %d" % e.place
         raise ParseException(message)
-    except Exception, e:
+    except Exception as e:
         raise ParseException(str(e))
 
 
diff -uNr nwdiag-0.9.4.orig/src/packetdiag/tests/test_pep8.py nwdiag-0.9.4/src/packetdiag/tests/test_pep8.py
--- nwdiag-0.9.4.orig/src/packetdiag/tests/test_pep8.py	2012-11-23 00:07:14.000000000 +0900
+++ nwdiag-0.9.4/src/packetdiag/tests/test_pep8.py	2013-09-18 20:19:43.925944098 +0900
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 
+from __future__ import print_function
 import os
 import sys
 import pep8
@@ -48,5 +49,5 @@
     errors = report.get_count('E')
     warnings = report.get_count('W')
     message = 'pep8: %d errors / %d warnings' % (errors, warnings)
-    print message
+    print(message)
     assert report.total_errors == 0, message
diff -uNr nwdiag-0.9.4.orig/src/packetdiag/utils/rst/directives.py nwdiag-0.9.4/src/packetdiag/utils/rst/directives.py
--- nwdiag-0.9.4.orig/src/packetdiag/utils/rst/directives.py	2012-11-23 00:07:06.000000000 +0900
+++ nwdiag-0.9.4/src/packetdiag/utils/rst/directives.py	2013-09-18 20:19:43.926944098 +0900
@@ -22,6 +22,7 @@
 from packetdiag.drawer import DiagramDraw
 from packetdiag.utils.rst.nodes import packetdiag
 from blockdiag.utils.rst import directives
+from functools import cmp_to_key
 
 
 directive_options_default = dict(format='PNG',
@@ -105,7 +106,7 @@
         headers = [FieldItem.attrname[name] for name in FieldItem.desctable]
 
         descriptions = [n.to_desctable() for n in nodes()]
-        descriptions.sort(directives.cmp_node_number)
+        descriptions.sort(key=cmp_to_key(directives.cmp_node_number))
 
         for i in range(len(headers) - 1, -1, -1):
             if any(desc[i] for desc in descriptions):
diff -uNr nwdiag-0.9.4.orig/src/rackdiag/elements.py nwdiag-0.9.4/src/rackdiag/elements.py
--- nwdiag-0.9.4.orig/src/rackdiag/elements.py	2012-12-20 23:48:46.000000000 +0900
+++ nwdiag-0.9.4/src/rackdiag/elements.py	2013-09-18 20:19:43.926944098 +0900
@@ -13,6 +13,7 @@
 #  See the License for the specific language governing permissions and
 #  limitations under the License.
 
+from __future__ import division
 import re
 import blockdiag.elements
 from rackdiag.utils.math import lcm
@@ -175,7 +176,7 @@
                 for level in levels:
                     nodes = self.items(level)
                     if nodes:
-                        width = self.colwidth / colwidth
+                        width = self.colwidth // colwidth
                         for node in nodes:
                             node.xy = XY(node.xy.x * width, node.xy.y)
                             node.colwidth = width
diff -uNr nwdiag-0.9.4.orig/src/rackdiag/metrics.py nwdiag-0.9.4/src/rackdiag/metrics.py
--- nwdiag-0.9.4.orig/src/rackdiag/metrics.py	2012-11-17 18:19:38.000000000 +0900
+++ nwdiag-0.9.4/src/rackdiag/metrics.py	2013-09-18 20:19:43.926944098 +0900
@@ -13,6 +13,7 @@
 #  See the License for the specific language governing permissions and
 #  limitations under the License.
 
+from __future__ import division
 import blockdiag.metrics
 from blockdiag.utils import Box, XY
 from blockdiag.utils.collections import defaultdict
@@ -47,7 +48,7 @@
             self.spreadsheet.set_span_width(x, span_width)
 
             if rack.colwidth > 1:
-                node_width = self.node_width / rack.colwidth
+                node_width = self.node_width // rack.colwidth
                 for i in range(rack.colwidth):
                     self.spreadsheet.set_node_width(rack.xy.x + i, node_width)
 
diff -uNr nwdiag-0.9.4.orig/src/rackdiag/parser.py nwdiag-0.9.4/src/rackdiag/parser.py
--- nwdiag-0.9.4.orig/src/rackdiag/parser.py	2013-09-18 20:19:11.301945383 +0900
+++ nwdiag-0.9.4/src/rackdiag/parser.py	2013-09-18 20:19:43.926944098 +0900
@@ -57,7 +57,7 @@
 
 
 def tokenize(string):
-    'str -> Sequence(Token)'
+    """str -> Sequence(Token)"""
     specs = [
         ('Comment', (r'/\*(.|[\r\n])*?\*/', MULTILINE)),
         ('Comment', (r'(//|#).*',)),
@@ -67,8 +67,8 @@
         ('NonnumRackItem', (r'[\*\-]\s*[^\r\n\[]+',)),
         ('Units',   (r'([0-9]+U|[0-9]+(?:\.[0-9]+)?(A|kg))',)),
         ('Number',  (r'[0-9]+',)),
-        ('Name',    (ur'[A-Za-z_0-9\u0080-\uffff]'
-                     ur'[A-Za-z_\-.0-9\u0080-\uffff]*',)),
+        ('Name',    (u'[A-Za-z_0-9\u0080-\uffff]'
+                     u'[A-Za-z_\\-.0-9\u0080-\uffff]*',)),
         ('Op',      (r'[{}:;,=\[\]]',)),
         ('String',  (r'(?P<quote>"|\').*?(?<!\\)(?P=quote)', DOTALL)),
     ]
@@ -78,7 +78,7 @@
 
 
 def parse(seq):
-    'Sequence(Token) -> object'
+    """Sequence(Token) -> object"""
     unarg = lambda f: lambda args: f(*args)
     tokval = lambda x: x.value
     flatten = lambda list: sum(list, [])
@@ -167,11 +167,8 @@
         else:
             return 2
 
-    def compare(node1, node2):
-        return cmp(weight(node1), weight(node2))
-
     if hasattr(tree, 'stmts'):
-        tree.stmts.sort(compare)
+        tree.stmts.sort(key=lambda x: weight(x))
         for stmt in tree.stmts:
             sort_tree(stmt)
 
@@ -182,10 +179,10 @@
     try:
         tree = parse(tokenize(string))
         return sort_tree(tree)
-    except LexerError, e:
+    except LexerError as e:
         message = "Got unexpected token at line %d column %d" % e.place
         raise ParseException(message)
-    except Exception, e:
+    except Exception as e:
         raise ParseException(str(e))
 
 
diff -uNr nwdiag-0.9.4.orig/src/rackdiag/tests/test_builder.py nwdiag-0.9.4/src/rackdiag/tests/test_builder.py
--- nwdiag-0.9.4.orig/src/rackdiag/tests/test_builder.py	2012-12-20 23:45:21.000000000 +0900
+++ nwdiag-0.9.4/src/rackdiag/tests/test_builder.py	2013-09-18 20:19:43.927944098 +0900
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 
+from __future__ import print_function
 import os
 import unittest2
 from rackdiag.builder import ScreenNodeBuilder
@@ -28,7 +29,7 @@
     def assertAttributes(self, **attributes):
         for rack in self.diagram.racks:
             for node in rack.nodes:
-                print node, node.label
+                print(node, node.label)
 
                 for key, attribute in attributes.items():
                     value = attribute.get(node.label)
diff -uNr nwdiag-0.9.4.orig/src/rackdiag/tests/test_pep8.py nwdiag-0.9.4/src/rackdiag/tests/test_pep8.py
--- nwdiag-0.9.4.orig/src/rackdiag/tests/test_pep8.py	2012-11-23 00:07:14.000000000 +0900
+++ nwdiag-0.9.4/src/rackdiag/tests/test_pep8.py	2013-09-18 20:19:43.927944098 +0900
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 
+from __future__ import print_function
 import os
 import sys
 import pep8
@@ -48,5 +49,5 @@
     errors = report.get_count('E')
     warnings = report.get_count('W')
     message = 'pep8: %d errors / %d warnings' % (errors, warnings)
-    print message
+    print(message)
     assert report.total_errors == 0, message
diff -uNr nwdiag-0.9.4.orig/src/rackdiag/utils/math.py nwdiag-0.9.4/src/rackdiag/utils/math.py
--- nwdiag-0.9.4.orig/src/rackdiag/utils/math.py	2011-11-08 02:04:08.000000000 +0900
+++ nwdiag-0.9.4/src/rackdiag/utils/math.py	2013-09-18 20:19:43.927944098 +0900
@@ -13,6 +13,7 @@
 #  See the License for the specific language governing permissions and
 #  limitations under the License.
 
+from __future__ import division
 
 def gcd(*args):
     if len(args) == 0:
@@ -34,6 +35,6 @@
     elif len(args) == 1:
         return args[0]
     elif len(args) == 2:
-        return args[0] * args[1] / gcd(*args)
+        return args[0] * args[1] // gcd(*args)
     else:
         return lcm(lcm(*args[:-1]), args[-1])
diff -uNr nwdiag-0.9.4.orig/src/rackdiag/utils/rst/directives.py nwdiag-0.9.4/src/rackdiag/utils/rst/directives.py
--- nwdiag-0.9.4.orig/src/rackdiag/utils/rst/directives.py	2012-11-23 00:07:06.000000000 +0900
+++ nwdiag-0.9.4/src/rackdiag/utils/rst/directives.py	2013-09-18 20:19:43.927944098 +0900
@@ -22,6 +22,7 @@
 from rackdiag.drawer import DiagramDraw
 from rackdiag.utils.rst.nodes import rackdiag
 from blockdiag.utils.rst import directives
+from functools import cmp_to_key
 
 
 directive_options_default = dict(format='PNG',
@@ -105,7 +106,7 @@
         headers = [RackItem.attrname[name] for name in RackItem.desctable]
 
         descriptions = [n.to_desctable() for n in nodes()]
-        descriptions.sort(directives.cmp_node_number)
+        descriptions.sort(key=cmp_to_key(directives.cmp_node_number))
 
         # records for total
         total = ['-', 'Total'] + [''] * (len(RackItem.desctable) - 2)
