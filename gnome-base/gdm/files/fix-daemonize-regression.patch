diff -uNr gdm-9999.orig/daemon/main.c gdm-9999/daemon/main.c
--- gdm-9999.orig/daemon/main.c	2012-08-23 11:15:40.513765520 +0900
+++ gdm-9999/daemon/main.c	2012-08-23 14:13:53.929079769 +0900
@@ -410,6 +410,56 @@
         return debug;
 }
 
+static void
+dup_dev_null (int fd, int flags)
+{
+	int nullfd;
+	int dupfd;
+
+	VE_IGNORE_EINTR (nullfd = open ("/dev/null", flags));
+	if (G_UNLIKELY (nullfd < 0)) {
+		gdm_fail (_("Cannot open /dev/null: %s!"),
+			  strerror (errno));
+		exit (EXIT_FAILURE);
+	}
+
+	VE_IGNORE_EINTR (dupfd = dup2 (nullfd, fd));
+	if (G_UNLIKELY (dupfd < 0)) {
+		gdm_fail (_("Cannot duplicate /dev/null: %s!"),
+			  strerror (errno));
+		exit (EXIT_FAILURE);
+	}
+
+	VE_IGNORE_EINTR (close (nullfd));
+}
+
+static void
+daemonity (void)
+{
+	pid_t pid;
+
+	pid = fork ();
+
+	/* terminate the parent */
+	if (pid > 0)
+		exit (EXIT_SUCCESS);
+
+	if (G_UNLIKELY (pid < 0)) {
+		gdm_fail (_("fork () failed: %s!"), strerror (errno));
+		exit (EXIT_FAILURE);
+	}
+
+	if (G_UNLIKELY (setsid () < 0)) {
+		gdm_fail (_("setsid () failed: %s!"), strerror (errno));
+		exit (EXIT_FAILURE);
+	}
+
+	/* reopen stdin, stdout, stderr with /dev/null */
+	dup_dev_null (STDIN_FILENO, O_RDONLY);
+	dup_dev_null (STDOUT_FILENO, O_RDWR);
+	dup_dev_null (STDERR_FILENO, O_RDWR);
+}
+
 int
 main (int    argc,
       char **argv)
@@ -418,13 +468,16 @@
         GOptionContext     *context;
         GError             *error;
         int                 ret;
+	int		    i;
         gboolean            res;
         GdmSignalHandler   *signal_handler;
         static gboolean     do_timed_exit    = FALSE;
         static gboolean     print_version    = FALSE;
         static gboolean     fatal_warnings   = FALSE;
+	static gboolean     no_daemon        = FALSE;
         static GOptionEntry entries []   = {
                 { "fatal-warnings", 0, 0, G_OPTION_ARG_NONE, &fatal_warnings, N_("Make all warnings fatal"), NULL },
+		{ "nodaemon", 0, 0, G_OPTION_ARG_NONE, &no_daemon, N_("Do not fork into the background"), NULL },
                 { "timed-exit", 0, 0, G_OPTION_ARG_NONE, &do_timed_exit, N_("Exit after a time (for debugging)"), NULL },
                 { "version", 0, 0, G_OPTION_ARG_NONE, &print_version, N_("Print GDM version"), NULL },
 
@@ -439,6 +492,14 @@
 
         g_type_init ();
 
+	/* preprocess the arguments to support the xdm style
+	 * -nodaemon option
+	 */
+	for (i = 0; i < argc; i++) {
+		if (strcmp (argv[i], "-nodaemon") == 0)
+			argv[i] = "--nodaemon";
+	}
+
         context = g_option_context_new (_("GNOME Display Manager"));
         g_option_context_add_main_entries (context, entries, NULL);
         g_option_context_set_ignore_unknown_options (context, TRUE);
@@ -496,6 +557,9 @@
         /* Connect to the bus, own the name and start the manager */
         bus_reconnect ();
 
+	if (no_daemon == FALSE)
+		daemonity ();
+
         /* pid file */
         delete_pid ();
         write_pid ();
