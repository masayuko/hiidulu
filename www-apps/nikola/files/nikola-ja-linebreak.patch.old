diff --git a/nikola/plugins/compile/rest/__init__.py b/nikola/plugins/compile/rest/__init__.py
index 98c7151..be19288 100644
--- a/nikola/plugins/compile/rest/__init__.py
+++ b/nikola/plugins/compile/rest/__init__.py
@@ -34,6 +34,7 @@ try:
     import docutils.nodes
     import docutils.utils
     import docutils.io
+    import docutils.readers.doctree
     import docutils.readers.standalone
     import docutils.writers.html4css1
     has_docutils = True
@@ -208,6 +209,55 @@ def add_node(node, visit_function=None, depart_function=None):
         setattr(docutils.writers.html4css1.HTMLTranslator, 'depart_' + node.__name__, depart_function)
 
 
+# in order no to change literals, select only 'paragraph' nodes
+# via http://msiz.hatenablog.jp/entry/2014/02/10/005208
+#
+def get_para_list(dtree):
+    para_list = []
+    for node in dtree.traverse():
+        if isinstance(node, docutils.nodes.paragraph):
+            para_list.append(node)
+    return para_list
+
+
+def strip_spaces_between_uchars(para_list):
+    # non-ascii [\n\r\t] non-ascii
+    __RGX = re.compile(r'([^!-~])[\n\r\t]+([^!-~])')
+    # modify text inside Text node
+    for para in para_list:
+        for node in para.traverse():
+            if isinstance(node, docutils.nodes.Text):
+                newtext = node.astext()
+                newtext = __RGX.sub(r"\1\2", newtext)
+                node.parent.replace(node, docutils.nodes.Text(newtext))
+
+
+def strip_spaces_around_uchars_paragraph_children(para_list):
+    # non-ascii [\s]* <End-of-TEXT>
+    __RGX1 = re.compile(r'([^!-~])[\s]*$')
+    # <Beginning-of-TEXT> [\s]* non-ascii
+    __RGX2 = re.compile(r'^[\s]*([^!-~])')
+    # modify texts over 2 nodes
+    # (paragraph node can have childre of Inline (reference, etc) nodes)
+    for para in para_list:
+        prev_textnode = docutils.nodes.Text("")
+        for node in para.traverse():
+            new_textnode = None
+            if isinstance(node, docutils.nodes.Text):
+                prevtext = prev_textnode.astext()
+                newtext = node.astext()
+                if __RGX1.search(prevtext) and __RGX2.search(newtext):
+                    new_prev_textnode = docutils.nodes.Text(
+                        prev_textnode.astext().rstrip())
+                    new_textnode = Text(newtext.lstrip())
+                    prev_textnode.parent.replace(prev_textnode,
+                                                 new_prev_textnode)
+                    node.parent.replace(node, new_textnode)
+                    new_prev_textnode.parent = prev_textnode.parent
+                    new_textnode.parent = node.parent
+                prev_textnode = new_textnode if new_textnode else node
+
+
 def rst2html(source, source_path=None, source_class=docutils.io.StringInput,
              destination_path=None, reader=None,
              parser=None, parser_name='restructuredtext', writer=None,
@@ -240,15 +290,44 @@ def rst2html(source, source_path=None, source_class=docutils.io.StringInput,
         reader.l_settings = {'logger': logger, 'source': source_path,
                              'add_ln': l_add_ln}
 
-    pub = docutils.core.Publisher(reader, parser, writer, settings=settings,
-                                  source_class=source_class,
-                                  destination_class=docutils.io.StringOutput)
-    pub.set_components(None, parser_name, writer_name)
+    pub = docutils.core.Publisher(
+        reader=reader, parser=parser,
+        writer=None, settings=settings,
+        source_class=source_class,
+        destination_class=docutils.io.NullOutput)
+    pub.set_components(None, parser_name, 'null')
     pub.process_programmatic_settings(
         settings_spec, settings_overrides, config_section)
     pub.set_source(source, None)
     pub.settings._nikola_source_path = source_path
+    output = pub.publish(enable_exit_status=enable_exit_status)
+
+    dtree = pub.document
+    para_list = get_para_list(dtree)
+    strip_spaces_between_uchars(para_list)
+    strip_spaces_around_uchars_paragraph_children(para_list)
+
+    reader = docutils.readers.doctree.Reader(parser_name='null')
+    pub = docutils.core.Publisher(reader, None, writer, settings=settings,
+                                  source=docutils.io.DocTreeInput(dtree),
+                                  destination_class=docutils.io.StringOutput)
+    if not writer and writer_name:
+        pub.set_writer(writer_name)
+    pub.set_components(None, 'null', writer_name)
+    pub.process_programmatic_settings(
+        settings_spec, settings_overrides, config_section)
     pub.set_destination(None, destination_path)
     pub.publish(enable_exit_status=enable_exit_status)
 
+    #pub = docutils.core.Publisher(reader, parser, writer, settings=settings,
+    #                              source_class=source_class,
+    #                              destination_class=docutils.io.StringOutput)
+    #pub.set_components(None, parser_name, writer_name)
+    #pub.process_programmatic_settings(
+    #    settings_spec, settings_overrides, config_section)
+    #pub.set_source(source, None)
+    #pub.settings._nikola_source_path = source_path
+    #pub.set_destination(None, destination_path)
+    #pub.publish(enable_exit_status=enable_exit_status)
+
     return pub.writer.parts['docinfo'] + pub.writer.parts['fragment'], pub.document.reporter.max_level, pub.settings.record_dependencies
